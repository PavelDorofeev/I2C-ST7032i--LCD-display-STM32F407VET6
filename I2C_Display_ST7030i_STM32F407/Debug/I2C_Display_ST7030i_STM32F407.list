
I2C_Display_ST7030i_STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005110  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000684  080052a0  080052a0  000152a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005924  08005924  00015924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800592c  0800592c  0001592c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005930  08005930  00015930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08005934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          00005d34  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00009000  20005da4  20005da4  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001ff71  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003e78  00000000  00000000  00040011  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000ebed  00000000  00000000  00043e89  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e8  00000000  00000000  00052a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001850  00000000  00000000  00053b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00009eb4  00000000  00000000  000553b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00006fc7  00000000  00000000  0005f264  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0006622b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003b3c  00000000  00000000  000662a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005288 	.word	0x08005288

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005288 	.word	0x08005288

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x30>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800059a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005a2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ac:	2003      	movs	r0, #3
 80005ae:	f000 f82f 	bl	8000610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b2:	2000      	movs	r0, #0
 80005b4:	f003 fd90 	bl	80040d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b8:	f003 fd1e 	bl	8003ff8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005bc:	2000      	movs	r0, #0
 80005be:	bd08      	pop	{r3, pc}
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005c4:	4a03      	ldr	r2, [pc, #12]	; (80005d4 <HAL_IncTick+0x10>)
 80005c6:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <HAL_IncTick+0x14>)
 80005c8:	6811      	ldr	r1, [r2, #0]
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	440b      	add	r3, r1
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20005b5c 	.word	0x20005b5c
 80005d8:	20000000 	.word	0x20000000

080005dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005dc:	4b01      	ldr	r3, [pc, #4]	; (80005e4 <HAL_GetTick+0x8>)
 80005de:	6818      	ldr	r0, [r3, #0]
}
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20005b5c 	.word	0x20005b5c

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b538      	push	{r3, r4, r5, lr}
 80005ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005ec:	f7ff fff6 	bl	80005dc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005f2:	bf1c      	itt	ne
 80005f4:	4b05      	ldrne	r3, [pc, #20]	; (800060c <HAL_Delay+0x24>)
 80005f6:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005f8:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005fa:	bf18      	it	ne
 80005fc:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005fe:	f7ff ffed 	bl	80005dc <HAL_GetTick>
 8000602:	1b40      	subs	r0, r0, r5
 8000604:	4284      	cmp	r4, r0
 8000606:	d8fa      	bhi.n	80005fe <HAL_Delay+0x16>
  {
  }
}
 8000608:	bd38      	pop	{r3, r4, r5, pc}
 800060a:	bf00      	nop
 800060c:	20000000 	.word	0x20000000

08000610 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000612:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000614:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000618:	041b      	lsls	r3, r3, #16
 800061a:	0c1b      	lsrs	r3, r3, #16
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000620:	0200      	lsls	r0, r0, #8
 8000622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000626:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800062a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800062c:	60d3      	str	r3, [r2, #12]
 800062e:	4770      	bx	lr
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000636:	b530      	push	{r4, r5, lr}
 8000638:	68dc      	ldr	r4, [r3, #12]
 800063a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800063e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000642:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000644:	2b04      	cmp	r3, #4
 8000646:	bf28      	it	cs
 8000648:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064c:	f04f 0501 	mov.w	r5, #1
 8000650:	fa05 f303 	lsl.w	r3, r5, r3
 8000654:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000658:	bf8c      	ite	hi
 800065a:	3c03      	subhi	r4, #3
 800065c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800065e:	4019      	ands	r1, r3
 8000660:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000662:	fa05 f404 	lsl.w	r4, r5, r4
 8000666:	3c01      	subs	r4, #1
 8000668:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800066a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800066c:	ea42 0201 	orr.w	r2, r2, r1
 8000670:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	bfad      	iteet	ge
 8000676:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	f000 000f 	andlt.w	r0, r0, #15
 800067e:	4b06      	ldrlt	r3, [pc, #24]	; (8000698 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000680:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000684:	bfb5      	itete	lt
 8000686:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000688:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000690:	bd30      	pop	{r4, r5, pc}
 8000692:	bf00      	nop
 8000694:	e000ed00 	.word	0xe000ed00
 8000698:	e000ed14 	.word	0xe000ed14

0800069c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800069c:	2800      	cmp	r0, #0
 800069e:	db08      	blt.n	80006b2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a0:	0942      	lsrs	r2, r0, #5
 80006a2:	2301      	movs	r3, #1
 80006a4:	f000 001f 	and.w	r0, r0, #31
 80006a8:	fa03 f000 	lsl.w	r0, r3, r0
 80006ac:	4b01      	ldr	r3, [pc, #4]	; (80006b4 <HAL_NVIC_EnableIRQ+0x18>)
 80006ae:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006b2:	4770      	bx	lr
 80006b4:	e000e100 	.word	0xe000e100

080006b8 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80006b8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d003      	beq.n	80006c8 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80006c4:	2001      	movs	r0, #1
 80006c6:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80006c8:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80006ca:	2305      	movs	r3, #5
 80006cc:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80006d0:	6813      	ldr	r3, [r2, #0]
 80006d2:	f023 0301 	bic.w	r3, r3, #1
 80006d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80006d8:	2000      	movs	r0, #0
}
 80006da:	4770      	bx	lr

080006dc <HAL_DMA_GetState>:
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  return hdma->State;
 80006dc:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80006e0:	4770      	bx	lr
	...

080006e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006e8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ea:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800089c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006f0:	4a68      	ldr	r2, [pc, #416]	; (8000894 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006f2:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80008a0 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006f6:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006f8:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006fa:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006fe:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000700:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000704:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000708:	45b6      	cmp	lr, r6
 800070a:	f040 80ae 	bne.w	800086a <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800070e:	684c      	ldr	r4, [r1, #4]
 8000710:	f024 0710 	bic.w	r7, r4, #16
 8000714:	2f02      	cmp	r7, #2
 8000716:	d116      	bne.n	8000746 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000718:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800071c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000720:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000724:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000728:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800072c:	f04f 0c0f 	mov.w	ip, #15
 8000730:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000734:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000738:	690d      	ldr	r5, [r1, #16]
 800073a:	fa05 f50b 	lsl.w	r5, r5, fp
 800073e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000742:	f8ca 5020 	str.w	r5, [sl, #32]
 8000746:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800074a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800074c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000750:	fa05 f50a 	lsl.w	r5, r5, sl
 8000754:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000756:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800075a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800075e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000762:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000764:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000768:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800076a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800076e:	d811      	bhi.n	8000794 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000770:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000772:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000776:	68cf      	ldr	r7, [r1, #12]
 8000778:	fa07 fc0a 	lsl.w	ip, r7, sl
 800077c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000780:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000782:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000784:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000788:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800078c:	409f      	lsls	r7, r3
 800078e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000792:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000794:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000796:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000798:	688f      	ldr	r7, [r1, #8]
 800079a:	fa07 f70a 	lsl.w	r7, r7, sl
 800079e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80007a0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007a2:	00e5      	lsls	r5, r4, #3
 80007a4:	d561      	bpl.n	800086a <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	f04f 0b00 	mov.w	fp, #0
 80007aa:	f8cd b00c 	str.w	fp, [sp, #12]
 80007ae:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007b2:	4d39      	ldr	r5, [pc, #228]	; (8000898 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b4:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80007b8:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80007bc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80007c0:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80007c4:	9703      	str	r7, [sp, #12]
 80007c6:	9f03      	ldr	r7, [sp, #12]
 80007c8:	f023 0703 	bic.w	r7, r3, #3
 80007cc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80007d0:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007d4:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80007d8:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007dc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007e0:	f04f 0e0f 	mov.w	lr, #15
 80007e4:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007e8:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007ea:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007ee:	d043      	beq.n	8000878 <HAL_GPIO_Init+0x194>
 80007f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007f4:	42a8      	cmp	r0, r5
 80007f6:	d041      	beq.n	800087c <HAL_GPIO_Init+0x198>
 80007f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007fc:	42a8      	cmp	r0, r5
 80007fe:	d03f      	beq.n	8000880 <HAL_GPIO_Init+0x19c>
 8000800:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000804:	42a8      	cmp	r0, r5
 8000806:	d03d      	beq.n	8000884 <HAL_GPIO_Init+0x1a0>
 8000808:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800080c:	42a8      	cmp	r0, r5
 800080e:	d03b      	beq.n	8000888 <HAL_GPIO_Init+0x1a4>
 8000810:	4548      	cmp	r0, r9
 8000812:	d03b      	beq.n	800088c <HAL_GPIO_Init+0x1a8>
 8000814:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000818:	42a8      	cmp	r0, r5
 800081a:	d039      	beq.n	8000890 <HAL_GPIO_Init+0x1ac>
 800081c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000820:	42a8      	cmp	r0, r5
 8000822:	bf14      	ite	ne
 8000824:	2508      	movne	r5, #8
 8000826:	2507      	moveq	r5, #7
 8000828:	fa05 f50c 	lsl.w	r5, r5, ip
 800082c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000830:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000832:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000834:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000836:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800083a:	bf0c      	ite	eq
 800083c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800083e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000840:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000842:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000844:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000848:	bf0c      	ite	eq
 800084a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800084c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800084e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000850:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000852:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000856:	bf0c      	ite	eq
 8000858:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800085a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800085c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800085e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000860:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000862:	bf54      	ite	pl
 8000864:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000866:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000868:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800086a:	3301      	adds	r3, #1
 800086c:	2b10      	cmp	r3, #16
 800086e:	f47f af44 	bne.w	80006fa <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000872:	b005      	add	sp, #20
 8000874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000878:	465d      	mov	r5, fp
 800087a:	e7d5      	b.n	8000828 <HAL_GPIO_Init+0x144>
 800087c:	2501      	movs	r5, #1
 800087e:	e7d3      	b.n	8000828 <HAL_GPIO_Init+0x144>
 8000880:	2502      	movs	r5, #2
 8000882:	e7d1      	b.n	8000828 <HAL_GPIO_Init+0x144>
 8000884:	2503      	movs	r5, #3
 8000886:	e7cf      	b.n	8000828 <HAL_GPIO_Init+0x144>
 8000888:	2504      	movs	r5, #4
 800088a:	e7cd      	b.n	8000828 <HAL_GPIO_Init+0x144>
 800088c:	2505      	movs	r5, #5
 800088e:	e7cb      	b.n	8000828 <HAL_GPIO_Init+0x144>
 8000890:	2506      	movs	r5, #6
 8000892:	e7c9      	b.n	8000828 <HAL_GPIO_Init+0x144>
 8000894:	40013c00 	.word	0x40013c00
 8000898:	40020000 	.word	0x40020000
 800089c:	40023800 	.word	0x40023800
 80008a0:	40021400 	.word	0x40021400

080008a4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80008a4:	6903      	ldr	r3, [r0, #16]
 80008a6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80008a8:	bf14      	ite	ne
 80008aa:	2001      	movne	r0, #1
 80008ac:	2000      	moveq	r0, #0
 80008ae:	4770      	bx	lr

080008b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008b0:	b10a      	cbz	r2, 80008b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008b2:	6181      	str	r1, [r0, #24]
 80008b4:	4770      	bx	lr
 80008b6:	0409      	lsls	r1, r1, #16
 80008b8:	e7fb      	b.n	80008b2 <HAL_GPIO_WritePin+0x2>

080008ba <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80008ba:	6801      	ldr	r1, [r0, #0]
 80008bc:	694b      	ldr	r3, [r1, #20]
 80008be:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80008c2:	f04f 0200 	mov.w	r2, #0
 80008c6:	d010      	beq.n	80008ea <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80008c8:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80008cc:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80008ce:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80008d0:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80008d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80008d6:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80008da:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80008dc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80008e6:	2001      	movs	r0, #1
 80008e8:	4770      	bx	lr
  }
  return HAL_OK;
 80008ea:	4618      	mov	r0, r3
}
 80008ec:	4770      	bx	lr

080008ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80008ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008f2:	4604      	mov	r4, r0
 80008f4:	4617      	mov	r7, r2
 80008f6:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80008f8:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80008fc:	b28e      	uxth	r6, r1
 80008fe:	6825      	ldr	r5, [r4, #0]
 8000900:	f1b8 0f01 	cmp.w	r8, #1
 8000904:	bf0c      	ite	eq
 8000906:	696b      	ldreq	r3, [r5, #20]
 8000908:	69ab      	ldrne	r3, [r5, #24]
 800090a:	ea36 0303 	bics.w	r3, r6, r3
 800090e:	bf14      	ite	ne
 8000910:	2001      	movne	r0, #1
 8000912:	2000      	moveq	r0, #0
 8000914:	b908      	cbnz	r0, 800091a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800091a:	696b      	ldr	r3, [r5, #20]
 800091c:	055a      	lsls	r2, r3, #21
 800091e:	d516      	bpl.n	800094e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000920:	682b      	ldr	r3, [r5, #0]
 8000922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000926:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000928:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800092c:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800092e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000930:	2300      	movs	r3, #0
 8000932:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000934:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000938:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800093c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800093e:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000942:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000944:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000948:	2001      	movs	r0, #1
 800094a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800094e:	1c7b      	adds	r3, r7, #1
 8000950:	d0d5      	beq.n	80008fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000952:	f7ff fe43 	bl	80005dc <HAL_GetTick>
 8000956:	eba0 0009 	sub.w	r0, r0, r9
 800095a:	4287      	cmp	r7, r0
 800095c:	d301      	bcc.n	8000962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 800095e:	2f00      	cmp	r7, #0
 8000960:	d1cd      	bne.n	80008fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000962:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8000964:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000966:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000968:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800096c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000970:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000972:	f042 0220 	orr.w	r2, r2, #32
 8000976:	e7e4      	b.n	8000942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

08000978 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8000978:	b570      	push	{r4, r5, r6, lr}
 800097a:	4604      	mov	r4, r0
 800097c:	460d      	mov	r5, r1
 800097e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000980:	6823      	ldr	r3, [r4, #0]
 8000982:	695b      	ldr	r3, [r3, #20]
 8000984:	075b      	lsls	r3, r3, #29
 8000986:	d501      	bpl.n	800098c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000988:	2000      	movs	r0, #0
 800098a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800098c:	4620      	mov	r0, r4
 800098e:	f7ff ff94 	bl	80008ba <I2C_IsAcknowledgeFailed>
 8000992:	b9a8      	cbnz	r0, 80009c0 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000994:	1c6a      	adds	r2, r5, #1
 8000996:	d0f3      	beq.n	8000980 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000998:	f7ff fe20 	bl	80005dc <HAL_GetTick>
 800099c:	1b80      	subs	r0, r0, r6
 800099e:	4285      	cmp	r5, r0
 80009a0:	d301      	bcc.n	80009a6 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d1ec      	bne.n	8000980 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80009a6:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80009a8:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80009aa:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80009ac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80009b0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80009b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80009b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80009ba:	f042 0220 	orr.w	r2, r2, #32
 80009be:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80009c0:	2001      	movs	r0, #1
}
 80009c2:	bd70      	pop	{r4, r5, r6, pc}

080009c4 <I2C_WaitOnFlagUntilTimeout>:
{
 80009c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009c8:	9e08      	ldr	r6, [sp, #32]
 80009ca:	4604      	mov	r4, r0
 80009cc:	4690      	mov	r8, r2
 80009ce:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80009d0:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80009d4:	b28d      	uxth	r5, r1
 80009d6:	6823      	ldr	r3, [r4, #0]
 80009d8:	f1b9 0f01 	cmp.w	r9, #1
 80009dc:	bf0c      	ite	eq
 80009de:	695b      	ldreq	r3, [r3, #20]
 80009e0:	699b      	ldrne	r3, [r3, #24]
 80009e2:	ea35 0303 	bics.w	r3, r5, r3
 80009e6:	bf0c      	ite	eq
 80009e8:	2301      	moveq	r3, #1
 80009ea:	2300      	movne	r3, #0
 80009ec:	4543      	cmp	r3, r8
 80009ee:	d002      	beq.n	80009f6 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80009f0:	2000      	movs	r0, #0
}
 80009f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 80009f6:	1c7b      	adds	r3, r7, #1
 80009f8:	d0ed      	beq.n	80009d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009fa:	f7ff fdef 	bl	80005dc <HAL_GetTick>
 80009fe:	1b80      	subs	r0, r0, r6
 8000a00:	4287      	cmp	r7, r0
 8000a02:	d301      	bcc.n	8000a08 <I2C_WaitOnFlagUntilTimeout+0x44>
 8000a04:	2f00      	cmp	r7, #0
 8000a06:	d1e6      	bne.n	80009d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000a08:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a0a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000a0c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a0e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000a12:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000a16:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000a18:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000a1c:	f042 0220 	orr.w	r2, r2, #32
 8000a20:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000a22:	2001      	movs	r0, #1
 8000a24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000a28 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000a28:	b570      	push	{r4, r5, r6, lr}
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	460d      	mov	r5, r1
 8000a2e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000a30:	6823      	ldr	r3, [r4, #0]
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	061b      	lsls	r3, r3, #24
 8000a36:	d501      	bpl.n	8000a3c <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8000a38:	2000      	movs	r0, #0
 8000a3a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	f7ff ff3c 	bl	80008ba <I2C_IsAcknowledgeFailed>
 8000a42:	b9a8      	cbnz	r0, 8000a70 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000a44:	1c6a      	adds	r2, r5, #1
 8000a46:	d0f3      	beq.n	8000a30 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a48:	f7ff fdc8 	bl	80005dc <HAL_GetTick>
 8000a4c:	1b80      	subs	r0, r0, r6
 8000a4e:	4285      	cmp	r5, r0
 8000a50:	d301      	bcc.n	8000a56 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8000a52:	2d00      	cmp	r5, #0
 8000a54:	d1ec      	bne.n	8000a30 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000a56:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a58:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000a5a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a5c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000a60:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000a64:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000a66:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000a6a:	f042 0220 	orr.w	r2, r2, #32
 8000a6e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000a70:	2001      	movs	r0, #1
}
 8000a72:	bd70      	pop	{r4, r5, r6, pc}

08000a74 <HAL_I2C_Init>:
{
 8000a74:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8000a76:	4604      	mov	r4, r0
 8000a78:	b908      	cbnz	r0, 8000a7e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000a7e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000a82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000a86:	b91b      	cbnz	r3, 8000a90 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000a88:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000a8c:	f003 fad6 	bl	800403c <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8000a90:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000a92:	2324      	movs	r3, #36	; 0x24
 8000a94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000a98:	6813      	ldr	r3, [r2, #0]
 8000a9a:	f023 0301 	bic.w	r3, r3, #1
 8000a9e:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000aa0:	f001 f946 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000aa4:	6865      	ldr	r5, [r4, #4]
 8000aa6:	4b41      	ldr	r3, [pc, #260]	; (8000bac <HAL_I2C_Init+0x138>)
 8000aa8:	429d      	cmp	r5, r3
 8000aaa:	d84d      	bhi.n	8000b48 <HAL_I2C_Init+0xd4>
 8000aac:	4b40      	ldr	r3, [pc, #256]	; (8000bb0 <HAL_I2C_Init+0x13c>)
 8000aae:	4298      	cmp	r0, r3
 8000ab0:	d9e3      	bls.n	8000a7a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ab2:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000ab4:	493f      	ldr	r1, [pc, #252]	; (8000bb4 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ab6:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000ab8:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000abc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ac0:	430b      	orrs	r3, r1
 8000ac2:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000ac4:	6a13      	ldr	r3, [r2, #32]
 8000ac6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000aca:	3101      	adds	r1, #1
 8000acc:	4319      	orrs	r1, r3
 8000ace:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ad0:	69d1      	ldr	r1, [r2, #28]
 8000ad2:	4b36      	ldr	r3, [pc, #216]	; (8000bac <HAL_I2C_Init+0x138>)
 8000ad4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000ad8:	429d      	cmp	r5, r3
 8000ada:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000ade:	f100 30ff 	add.w	r0, r0, #4294967295
 8000ae2:	d848      	bhi.n	8000b76 <HAL_I2C_Init+0x102>
 8000ae4:	006d      	lsls	r5, r5, #1
 8000ae6:	fbb0 f0f5 	udiv	r0, r0, r5
 8000aea:	3001      	adds	r0, #1
 8000aec:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000af0:	2b04      	cmp	r3, #4
 8000af2:	bf38      	it	cc
 8000af4:	2304      	movcc	r3, #4
 8000af6:	430b      	orrs	r3, r1
 8000af8:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000afa:	6811      	ldr	r1, [r2, #0]
 8000afc:	6a20      	ldr	r0, [r4, #32]
 8000afe:	69e3      	ldr	r3, [r4, #28]
 8000b00:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000b04:	4303      	orrs	r3, r0
 8000b06:	430b      	orrs	r3, r1
 8000b08:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000b0a:	6891      	ldr	r1, [r2, #8]
 8000b0c:	68e0      	ldr	r0, [r4, #12]
 8000b0e:	6923      	ldr	r3, [r4, #16]
 8000b10:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000b14:	4303      	orrs	r3, r0
 8000b16:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000b1a:	430b      	orrs	r3, r1
 8000b1c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000b1e:	68d1      	ldr	r1, [r2, #12]
 8000b20:	69a0      	ldr	r0, [r4, #24]
 8000b22:	6963      	ldr	r3, [r4, #20]
 8000b24:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000b28:	4303      	orrs	r3, r0
 8000b2a:	430b      	orrs	r3, r1
 8000b2c:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000b2e:	6813      	ldr	r3, [r2, #0]
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b36:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000b38:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b3a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000b3c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000b40:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b42:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000b46:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <HAL_I2C_Init+0x144>)
 8000b4a:	4298      	cmp	r0, r3
 8000b4c:	d995      	bls.n	8000a7a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b4e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000b50:	4e18      	ldr	r6, [pc, #96]	; (8000bb4 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b52:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000b54:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b5c:	4333      	orrs	r3, r6
 8000b5e:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000b60:	6a13      	ldr	r3, [r2, #32]
 8000b62:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000b66:	4371      	muls	r1, r6
 8000b68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b6c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000b70:	fbb1 f1f6 	udiv	r1, r1, r6
 8000b74:	e7a9      	b.n	8000aca <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000b76:	68a3      	ldr	r3, [r4, #8]
 8000b78:	b953      	cbnz	r3, 8000b90 <HAL_I2C_Init+0x11c>
 8000b7a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000b7e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b82:	1c43      	adds	r3, r0, #1
 8000b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b88:	b16b      	cbz	r3, 8000ba6 <HAL_I2C_Init+0x132>
 8000b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b8e:	e7b2      	b.n	8000af6 <HAL_I2C_Init+0x82>
 8000b90:	2319      	movs	r3, #25
 8000b92:	436b      	muls	r3, r5
 8000b94:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b98:	1c43      	adds	r3, r0, #1
 8000b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b9e:	b113      	cbz	r3, 8000ba6 <HAL_I2C_Init+0x132>
 8000ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ba4:	e7a7      	b.n	8000af6 <HAL_I2C_Init+0x82>
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e7a5      	b.n	8000af6 <HAL_I2C_Init+0x82>
 8000baa:	bf00      	nop
 8000bac:	000186a0 	.word	0x000186a0
 8000bb0:	001e847f 	.word	0x001e847f
 8000bb4:	000f4240 	.word	0x000f4240
 8000bb8:	003d08ff 	.word	0x003d08ff

08000bbc <HAL_I2C_Master_Transmit>:
{
 8000bbc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000bc0:	4604      	mov	r4, r0
 8000bc2:	461f      	mov	r7, r3
 8000bc4:	460d      	mov	r5, r1
 8000bc6:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8000bc8:	f7ff fd08 	bl	80005dc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bcc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000bd0:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8000bd2:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bd4:	d004      	beq.n	8000be0 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8000bd6:	2502      	movs	r5, #2
}
 8000bd8:	4628      	mov	r0, r5
 8000bda:	b004      	add	sp, #16
 8000bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000be0:	9000      	str	r0, [sp, #0]
 8000be2:	2319      	movs	r3, #25
 8000be4:	2201      	movs	r2, #1
 8000be6:	4958      	ldr	r1, [pc, #352]	; (8000d48 <HAL_I2C_Master_Transmit+0x18c>)
 8000be8:	4620      	mov	r0, r4
 8000bea:	f7ff feeb 	bl	80009c4 <I2C_WaitOnFlagUntilTimeout>
 8000bee:	2800      	cmp	r0, #0
 8000bf0:	d1f1      	bne.n	8000bd6 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8000bf2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d0ed      	beq.n	8000bd6 <HAL_I2C_Master_Transmit+0x1a>
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000c00:	6823      	ldr	r3, [r4, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000c06:	bf5e      	ittt	pl
 8000c08:	681a      	ldrpl	r2, [r3, #0]
 8000c0a:	f042 0201 	orrpl.w	r2, r2, #1
 8000c0e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c16:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000c18:	2221      	movs	r2, #33	; 0x21
 8000c1a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000c1e:	2210      	movs	r2, #16
 8000c20:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000c24:	2200      	movs	r2, #0
 8000c26:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8000c28:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000c2a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000c2c:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000c2e:	4a47      	ldr	r2, [pc, #284]	; (8000d4c <HAL_I2C_Master_Transmit+0x190>)
 8000c30:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000c32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8000c34:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000c38:	2a08      	cmp	r2, #8
 8000c3a:	d004      	beq.n	8000c46 <HAL_I2C_Master_Transmit+0x8a>
 8000c3c:	2a01      	cmp	r2, #1
 8000c3e:	d002      	beq.n	8000c46 <HAL_I2C_Master_Transmit+0x8a>
 8000c40:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000c44:	d104      	bne.n	8000c50 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	e002      	b.n	8000c56 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000c50:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000c52:	2a12      	cmp	r2, #18
 8000c54:	d0f7      	beq.n	8000c46 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000c56:	9600      	str	r6, [sp, #0]
 8000c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000c60:	4620      	mov	r0, r4
 8000c62:	f7ff feaf 	bl	80009c4 <I2C_WaitOnFlagUntilTimeout>
 8000c66:	b108      	cbz	r0, 8000c6c <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 8000c68:	2501      	movs	r5, #1
 8000c6a:	e7b5      	b.n	8000bd8 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c6c:	6923      	ldr	r3, [r4, #16]
 8000c6e:	6822      	ldr	r2, [r4, #0]
 8000c70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c74:	d113      	bne.n	8000c9e <HAL_I2C_Master_Transmit+0xe2>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000c76:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000c7a:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000c7c:	4633      	mov	r3, r6
 8000c7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000c80:	4933      	ldr	r1, [pc, #204]	; (8000d50 <HAL_I2C_Master_Transmit+0x194>)
 8000c82:	4620      	mov	r0, r4
 8000c84:	f7ff fe33 	bl	80008ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000c88:	4605      	mov	r5, r0
 8000c8a:	2800      	cmp	r0, #0
 8000c8c:	d1ec      	bne.n	8000c68 <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c8e:	6823      	ldr	r3, [r4, #0]
 8000c90:	9003      	str	r0, [sp, #12]
 8000c92:	695a      	ldr	r2, [r3, #20]
 8000c94:	9203      	str	r2, [sp, #12]
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	9303      	str	r3, [sp, #12]
 8000c9a:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8000c9c:	e044      	b.n	8000d28 <HAL_I2C_Master_Transmit+0x16c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000c9e:	11eb      	asrs	r3, r5, #7
 8000ca0:	f003 0306 	and.w	r3, r3, #6
 8000ca4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000ca8:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000caa:	492a      	ldr	r1, [pc, #168]	; (8000d54 <HAL_I2C_Master_Transmit+0x198>)
 8000cac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000cae:	4633      	mov	r3, r6
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	f7ff fe1c 	bl	80008ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000cb6:	2800      	cmp	r0, #0
 8000cb8:	d1d6      	bne.n	8000c68 <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000cba:	6823      	ldr	r3, [r4, #0]
 8000cbc:	b2ed      	uxtb	r5, r5
 8000cbe:	611d      	str	r5, [r3, #16]
 8000cc0:	e7dc      	b.n	8000c7c <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000cc2:	4632      	mov	r2, r6
 8000cc4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	f7ff feae 	bl	8000a28 <I2C_WaitOnTXEFlagUntilTimeout>
 8000ccc:	b140      	cbz	r0, 8000ce0 <HAL_I2C_Master_Transmit+0x124>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000cce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000cd0:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000cd2:	bf01      	itttt	eq
 8000cd4:	6822      	ldreq	r2, [r4, #0]
 8000cd6:	6813      	ldreq	r3, [r2, #0]
 8000cd8:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8000cdc:	6013      	streq	r3, [r2, #0]
 8000cde:	e7c3      	b.n	8000c68 <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000ce0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ce2:	6820      	ldr	r0, [r4, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	f812 1b01 	ldrb.w	r1, [r2], #1
 8000cea:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8000cec:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000cee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	b292      	uxth	r2, r2
 8000cf4:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000cf6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000cf8:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8000cfa:	1e51      	subs	r1, r2, #1
 8000cfc:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000cfe:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8000d00:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000d02:	d50a      	bpl.n	8000d1a <HAL_I2C_Master_Transmit+0x15e>
 8000d04:	b149      	cbz	r1, 8000d1a <HAL_I2C_Master_Transmit+0x15e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000d06:	7859      	ldrb	r1, [r3, #1]
 8000d08:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8000d0a:	3302      	adds	r3, #2
 8000d0c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8000d0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d10:	3b01      	subs	r3, #1
 8000d12:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8000d14:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8000d16:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000d18:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d1a:	4632      	mov	r2, r6
 8000d1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f7ff fe2a 	bl	8000978 <I2C_WaitOnBTFFlagUntilTimeout>
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d1d2      	bne.n	8000cce <HAL_I2C_Master_Transmit+0x112>
    while (hi2c->XferSize > 0U)
 8000d28:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1c9      	bne.n	8000cc2 <HAL_I2C_Master_Transmit+0x106>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d2e:	6821      	ldr	r1, [r4, #0]
 8000d30:	680a      	ldr	r2, [r1, #0]
 8000d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d36:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000d38:	2220      	movs	r2, #32
 8000d3a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8000d3e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d42:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8000d46:	e747      	b.n	8000bd8 <HAL_I2C_Master_Transmit+0x1c>
 8000d48:	00100002 	.word	0x00100002
 8000d4c:	ffff0000 	.word	0xffff0000
 8000d50:	00010002 	.word	0x00010002
 8000d54:	00010008 	.word	0x00010008

08000d58 <HAL_I2C_MasterTxCpltCallback>:
 8000d58:	4770      	bx	lr

08000d5a <HAL_I2C_MasterRxCpltCallback>:
 8000d5a:	4770      	bx	lr

08000d5c <HAL_I2C_SlaveTxCpltCallback>:
 8000d5c:	4770      	bx	lr

08000d5e <HAL_I2C_SlaveRxCpltCallback>:
 8000d5e:	4770      	bx	lr

08000d60 <HAL_I2C_AddrCallback>:
{
 8000d60:	4770      	bx	lr

08000d62 <HAL_I2C_ListenCpltCallback>:
 8000d62:	4770      	bx	lr

08000d64 <HAL_I2C_MemTxCpltCallback>:
 8000d64:	4770      	bx	lr

08000d66 <HAL_I2C_MemRxCpltCallback>:
 8000d66:	4770      	bx	lr

08000d68 <HAL_I2C_ErrorCallback>:
 8000d68:	4770      	bx	lr

08000d6a <HAL_I2C_AbortCpltCallback>:
{
 8000d6a:	4770      	bx	lr

08000d6c <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8000d6c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000d6e:	6802      	ldr	r2, [r0, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000d70:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
{
 8000d74:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000d76:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferCpltCallback = NULL;
 8000d78:	6b46      	ldr	r6, [r0, #52]	; 0x34
  hi2c->hdmarx->XferCpltCallback = NULL;
 8000d7a:	6b85      	ldr	r5, [r0, #56]	; 0x38
  hi2c->hdmatx->XferCpltCallback = NULL;
 8000d7c:	2300      	movs	r3, #0
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000d7e:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
  hi2c->hdmatx->XferCpltCallback = NULL;
 8000d82:	63f3      	str	r3, [r6, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 8000d84:	63eb      	str	r3, [r5, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000d86:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8000d88:	8543      	strh	r3, [r0, #42]	; 0x2a
  __HAL_I2C_DISABLE(hi2c);
 8000d8a:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8000d8c:	6533      	str	r3, [r6, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8000d8e:	f024 0401 	bic.w	r4, r4, #1
  hi2c->hdmarx->XferAbortCallback = NULL;
 8000d92:	652b      	str	r3, [r5, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8000d94:	6014      	str	r4, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8000d96:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8000d9a:	2c60      	cmp	r4, #96	; 0x60
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000d9c:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8000d9e:	d108      	bne.n	8000db2 <I2C_DMAAbort+0x46>
    hi2c->State         = HAL_I2C_STATE_READY;
 8000da0:	2220      	movs	r2, #32
 8000da2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000da6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8000daa:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8000dac:	f7ff ffdd 	bl	8000d6a <HAL_I2C_AbortCpltCallback>
 8000db0:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8000db2:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8000db6:	2928      	cmp	r1, #40	; 0x28
 8000db8:	d10d      	bne.n	8000dd6 <I2C_DMAAbort+0x6a>
      __HAL_I2C_ENABLE(hi2c);
 8000dba:	6814      	ldr	r4, [r2, #0]
 8000dbc:	f044 0401 	orr.w	r4, r4, #1
 8000dc0:	6014      	str	r4, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000dc2:	6814      	ldr	r4, [r2, #0]
 8000dc4:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8000dc8:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8000dca:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8000dcc:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 8000dd0:	f7ff ffca 	bl	8000d68 <HAL_I2C_ErrorCallback>
 8000dd4:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->State = HAL_I2C_STATE_READY;
 8000dd6:	2220      	movs	r2, #32
 8000dd8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ddc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8000de0:	e7f6      	b.n	8000dd0 <I2C_DMAAbort+0x64>
	...

08000de4 <I2C_ITError>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000de4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8000de8:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8000dec:	2b10      	cmp	r3, #16
{
 8000dee:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000df0:	b2d2      	uxtb	r2, r2
{
 8000df2:	4604      	mov	r4, r0
 8000df4:	6803      	ldr	r3, [r0, #0]
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8000df6:	d105      	bne.n	8000e04 <I2C_ITError+0x20>
 8000df8:	2a22      	cmp	r2, #34	; 0x22
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000dfa:	bf02      	ittt	eq
 8000dfc:	6819      	ldreq	r1, [r3, #0]
 8000dfe:	f421 6100 	biceq.w	r1, r1, #2048	; 0x800
 8000e02:	6019      	streq	r1, [r3, #0]
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8000e04:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8000e08:	2928      	cmp	r1, #40	; 0x28
 8000e0a:	d13a      	bne.n	8000e82 <I2C_ITError+0x9e>
    hi2c->PreviousState = I2C_STATE_NONE;
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8000e10:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8000e14:	685a      	ldr	r2, [r3, #4]
 8000e16:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8000e1a:	d059      	beq.n	8000ed0 <I2C_ITError+0xec>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8000e1c:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8000e1e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8000e20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e24:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8000e26:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	4b3c      	ldr	r3, [pc, #240]	; (8000f20 <I2C_ITError+0x13c>)
 8000e2e:	d035      	beq.n	8000e9c <I2C_ITError+0xb8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8000e30:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8000e32:	f7ff fc41 	bl	80006b8 <HAL_DMA_Abort_IT>
 8000e36:	b150      	cbz	r0, 8000e4e <I2C_ITError+0x6a>
        __HAL_I2C_DISABLE(hi2c);
 8000e38:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8000e3a:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8000e3c:	6813      	ldr	r3, [r2, #0]
 8000e3e:	f023 0301 	bic.w	r3, r3, #1
 8000e42:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8000e44:	2320      	movs	r3, #32
 8000e46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000e4a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000e4c:	4798      	blx	r3
  CurrentState = hi2c->State;
 8000e4e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8000e52:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000e54:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 8000e56:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8000e58:	d512      	bpl.n	8000e80 <I2C_ITError+0x9c>
 8000e5a:	2b28      	cmp	r3, #40	; 0x28
 8000e5c:	d110      	bne.n	8000e80 <I2C_ITError+0x9c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8000e5e:	6822      	ldr	r2, [r4, #0]
 8000e60:	6853      	ldr	r3, [r2, #4]
 8000e62:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e66:	6053      	str	r3, [r2, #4]
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000e68:	4b2e      	ldr	r3, [pc, #184]	; (8000f24 <I2C_ITError+0x140>)
 8000e6a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 8000e6c:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8000e72:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8000e74:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000e78:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8000e7c:	f7ff ff71 	bl	8000d62 <HAL_I2C_ListenCpltCallback>
 8000e80:	bd10      	pop	{r4, pc}
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8000e82:	6859      	ldr	r1, [r3, #4]
 8000e84:	0509      	lsls	r1, r1, #20
 8000e86:	d404      	bmi.n	8000e92 <I2C_ITError+0xae>
 8000e88:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 8000e8a:	bf1c      	itt	ne
 8000e8c:	2220      	movne	r2, #32
 8000e8e:	f884 203d 	strbne.w	r2, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8000e92:	2200      	movs	r2, #0
 8000e94:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e96:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8000e9a:	e7bb      	b.n	8000e14 <I2C_ITError+0x30>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8000e9c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000e9e:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8000ea0:	f7ff fc0a 	bl	80006b8 <HAL_DMA_Abort_IT>
 8000ea4:	2800      	cmp	r0, #0
 8000ea6:	d0d2      	beq.n	8000e4e <I2C_ITError+0x6a>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8000ea8:	6823      	ldr	r3, [r4, #0]
 8000eaa:	695a      	ldr	r2, [r3, #20]
 8000eac:	0652      	lsls	r2, r2, #25
 8000eae:	d505      	bpl.n	8000ebc <I2C_ITError+0xd8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000eb0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000eb2:	691b      	ldr	r3, [r3, #16]
 8000eb4:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8000eb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000eb8:	3301      	adds	r3, #1
 8000eba:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8000ebc:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000ebe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8000ec0:	6813      	ldr	r3, [r2, #0]
 8000ec2:	f023 0301 	bic.w	r3, r3, #1
 8000ec6:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8000ec8:	2320      	movs	r3, #32
 8000eca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8000ece:	e7bc      	b.n	8000e4a <I2C_ITError+0x66>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8000ed0:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8000ed4:	2960      	cmp	r1, #96	; 0x60
 8000ed6:	d115      	bne.n	8000f04 <I2C_ITError+0x120>
    hi2c->State = HAL_I2C_STATE_READY;
 8000ed8:	2120      	movs	r1, #32
 8000eda:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ede:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8000ee0:	695a      	ldr	r2, [r3, #20]
 8000ee2:	0650      	lsls	r0, r2, #25
 8000ee4:	d505      	bpl.n	8000ef2 <I2C_ITError+0x10e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000ee6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8000eec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000eee:	3301      	adds	r3, #1
 8000ef0:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8000ef2:	6822      	ldr	r2, [r4, #0]
 8000ef4:	6813      	ldr	r3, [r2, #0]
 8000ef6:	f023 0301 	bic.w	r3, r3, #1
 8000efa:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8000efc:	4620      	mov	r0, r4
 8000efe:	f7ff ff34 	bl	8000d6a <HAL_I2C_AbortCpltCallback>
 8000f02:	e7a4      	b.n	8000e4e <I2C_ITError+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8000f04:	695a      	ldr	r2, [r3, #20]
 8000f06:	0651      	lsls	r1, r2, #25
 8000f08:	d505      	bpl.n	8000f16 <I2C_ITError+0x132>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000f0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8000f10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f12:	3301      	adds	r3, #1
 8000f14:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8000f16:	4620      	mov	r0, r4
 8000f18:	f7ff ff26 	bl	8000d68 <HAL_I2C_ErrorCallback>
 8000f1c:	e797      	b.n	8000e4e <I2C_ITError+0x6a>
 8000f1e:	bf00      	nop
 8000f20:	08000d6d 	.word	0x08000d6d
 8000f24:	ffff0000 	.word	0xffff0000

08000f28 <HAL_I2C_EV_IRQHandler>:
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8000f28:	6803      	ldr	r3, [r0, #0]
{
 8000f2a:	b530      	push	{r4, r5, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8000f2c:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8000f2e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8000f30:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
{
 8000f34:	4604      	mov	r4, r0
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8000f36:	b2c9      	uxtb	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000f38:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8000f3c:	2910      	cmp	r1, #16
{
 8000f3e:	b08d      	sub	sp, #52	; 0x34
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000f40:	b2c0      	uxtb	r0, r0
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8000f42:	d002      	beq.n	8000f4a <HAL_I2C_EV_IRQHandler+0x22>
 8000f44:	2940      	cmp	r1, #64	; 0x40
 8000f46:	f040 82b6 	bne.w	80014b6 <HAL_I2C_EV_IRQHandler+0x58e>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8000f4a:	6998      	ldr	r0, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8000f4c:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8000f4e:	f011 0f01 	tst.w	r1, #1
 8000f52:	d107      	bne.n	8000f64 <HAL_I2C_EV_IRQHandler+0x3c>
 8000f54:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 8000f58:	d002      	beq.n	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
 8000f5a:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8000f5e:	d152      	bne.n	8001006 <HAL_I2C_EV_IRQHandler+0xde>
}
 8000f60:	b00d      	add	sp, #52	; 0x34
 8000f62:	bd30      	pop	{r4, r5, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000f64:	0595      	lsls	r5, r2, #22
 8000f66:	d54e      	bpl.n	8001006 <HAL_I2C_EV_IRQHandler+0xde>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8000f68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f6a:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8000f6e:	d10c      	bne.n	8000f8a <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8000f70:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8000f72:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8000f74:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8000f78:	2a40      	cmp	r2, #64	; 0x40
 8000f7a:	d111      	bne.n	8000fa0 <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8000f7c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000f7e:	b952      	cbnz	r2, 8000f96 <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8000f80:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f82:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8000f86:	611a      	str	r2, [r3, #16]
 8000f88:	e7ea      	b.n	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8000f8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f8c:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 8000f90:	d1f0      	bne.n	8000f74 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8000f92:	2208      	movs	r2, #8
 8000f94:	e7ed      	b.n	8000f72 <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8000f96:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f98:	f042 0201 	orr.w	r2, r2, #1
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	e7f2      	b.n	8000f86 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fa0:	6922      	ldr	r2, [r4, #16]
 8000fa2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8000fa6:	d11b      	bne.n	8000fe0 <HAL_I2C_EV_IRQHandler+0xb8>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8000fa8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8000fac:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8000fae:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8000fb0:	d112      	bne.n	8000fd8 <HAL_I2C_EV_IRQHandler+0xb0>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8000fb2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8000fb6:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8000fb8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000fba:	b912      	cbnz	r2, 8000fc2 <HAL_I2C_EV_IRQHandler+0x9a>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8000fbc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000fbe:	2900      	cmp	r1, #0
 8000fc0:	d0ce      	beq.n	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8000fc2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000fc4:	b91a      	cbnz	r2, 8000fce <HAL_I2C_EV_IRQHandler+0xa6>
 8000fc6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000fc8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000fca:	2a00      	cmp	r2, #0
 8000fcc:	d0c8      	beq.n	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	e7c3      	b.n	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8000fd8:	f042 0201 	orr.w	r2, r2, #1
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	e7ea      	b.n	8000fb6 <HAL_I2C_EV_IRQHandler+0x8e>
      if (hi2c->EventCount == 0U)
 8000fe0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000fe2:	b932      	cbnz	r2, 8000ff2 <HAL_I2C_EV_IRQHandler+0xca>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8000fe4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000fe6:	11d2      	asrs	r2, r2, #7
 8000fe8:	f002 0206 	and.w	r2, r2, #6
 8000fec:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8000ff0:	e7c9      	b.n	8000f86 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 8000ff2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000ff4:	2a01      	cmp	r2, #1
 8000ff6:	d1b3      	bne.n	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8000ff8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000ffa:	11d2      	asrs	r2, r2, #7
 8000ffc:	f002 0206 	and.w	r2, r2, #6
 8001000:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8001004:	e7bf      	b.n	8000f86 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001006:	070d      	lsls	r5, r1, #28
 8001008:	d503      	bpl.n	8001012 <HAL_I2C_EV_IRQHandler+0xea>
 800100a:	0595      	lsls	r5, r2, #22
 800100c:	d501      	bpl.n	8001012 <HAL_I2C_EV_IRQHandler+0xea>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800100e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001010:	e7e4      	b.n	8000fdc <HAL_I2C_EV_IRQHandler+0xb4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001012:	078d      	lsls	r5, r1, #30
 8001014:	f140 80e1 	bpl.w	80011da <HAL_I2C_EV_IRQHandler+0x2b2>
 8001018:	0595      	lsls	r5, r2, #22
 800101a:	f140 80de 	bpl.w	80011da <HAL_I2C_EV_IRQHandler+0x2b2>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800101e:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001022:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001024:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001026:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800102a:	2822      	cmp	r0, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800102c:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800102e:	f040 80cc 	bne.w	80011ca <HAL_I2C_EV_IRQHandler+0x2a2>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001032:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001034:	b940      	cbnz	r0, 8001048 <HAL_I2C_EV_IRQHandler+0x120>
 8001036:	2940      	cmp	r1, #64	; 0x40
 8001038:	d106      	bne.n	8001048 <HAL_I2C_EV_IRQHandler+0x120>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800103a:	9001      	str	r0, [sp, #4]
 800103c:	695a      	ldr	r2, [r3, #20]
 800103e:	9201      	str	r2, [sp, #4]
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	9b01      	ldr	r3, [sp, #4]
 8001046:	e78b      	b.n	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001048:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800104a:	b981      	cbnz	r1, 800106e <HAL_I2C_EV_IRQHandler+0x146>
 800104c:	6920      	ldr	r0, [r4, #16]
 800104e:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8001052:	d10c      	bne.n	800106e <HAL_I2C_EV_IRQHandler+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001054:	9102      	str	r1, [sp, #8]
 8001056:	695a      	ldr	r2, [r3, #20]
 8001058:	9202      	str	r2, [sp, #8]
 800105a:	699a      	ldr	r2, [r3, #24]
 800105c:	9202      	str	r2, [sp, #8]
 800105e:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001066:	601a      	str	r2, [r3, #0]
            hi2c->EventCount++;
 8001068:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800106a:	3301      	adds	r3, #1
 800106c:	e028      	b.n	80010c0 <HAL_I2C_EV_IRQHandler+0x198>
      if (hi2c->XferCount == 0U)
 800106e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001070:	b289      	uxth	r1, r1
 8001072:	b951      	cbnz	r1, 800108a <HAL_I2C_EV_IRQHandler+0x162>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001074:	9103      	str	r1, [sp, #12]
 8001076:	695a      	ldr	r2, [r3, #20]
 8001078:	9203      	str	r2, [sp, #12]
 800107a:	699a      	ldr	r2, [r3, #24]
 800107c:	9203      	str	r2, [sp, #12]
 800107e:	9a03      	ldr	r2, [sp, #12]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	e019      	b.n	80010be <HAL_I2C_EV_IRQHandler+0x196>
      else if (hi2c->XferCount == 1U)
 800108a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800108c:	b289      	uxth	r1, r1
 800108e:	2901      	cmp	r1, #1
 8001090:	d14a      	bne.n	8001128 <HAL_I2C_EV_IRQHandler+0x200>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001092:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001096:	d11c      	bne.n	80010d2 <HAL_I2C_EV_IRQHandler+0x1aa>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800109e:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80010a6:	d00d      	beq.n	80010c4 <HAL_I2C_EV_IRQHandler+0x19c>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010ae:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010b0:	2200      	movs	r2, #0
 80010b2:	9204      	str	r2, [sp, #16]
 80010b4:	695a      	ldr	r2, [r3, #20]
 80010b6:	9204      	str	r2, [sp, #16]
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	9304      	str	r3, [sp, #16]
 80010bc:	9b04      	ldr	r3, [sp, #16]
      hi2c->EventCount = 0U;
 80010be:	2300      	movs	r3, #0
 80010c0:	6523      	str	r3, [r4, #80]	; 0x50
 80010c2:	e74d      	b.n	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010c4:	9205      	str	r2, [sp, #20]
 80010c6:	695a      	ldr	r2, [r3, #20]
 80010c8:	9205      	str	r2, [sp, #20]
 80010ca:	699a      	ldr	r2, [r3, #24]
 80010cc:	9205      	str	r2, [sp, #20]
 80010ce:	9a05      	ldr	r2, [sp, #20]
 80010d0:	e7d6      	b.n	8001080 <HAL_I2C_EV_IRQHandler+0x158>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80010d2:	2a08      	cmp	r2, #8
 80010d4:	d01c      	beq.n	8001110 <HAL_I2C_EV_IRQHandler+0x1e8>
 80010d6:	2a20      	cmp	r2, #32
 80010d8:	d01a      	beq.n	8001110 <HAL_I2C_EV_IRQHandler+0x1e8>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80010da:	2d12      	cmp	r5, #18
 80010dc:	d10d      	bne.n	80010fa <HAL_I2C_EV_IRQHandler+0x1d2>
 80010de:	2a01      	cmp	r2, #1
 80010e0:	d116      	bne.n	8001110 <HAL_I2C_EV_IRQHandler+0x1e8>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010e8:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010ea:	2200      	movs	r2, #0
 80010ec:	9206      	str	r2, [sp, #24]
 80010ee:	695a      	ldr	r2, [r3, #20]
 80010f0:	9206      	str	r2, [sp, #24]
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	9306      	str	r3, [sp, #24]
 80010f6:	9b06      	ldr	r3, [sp, #24]
 80010f8:	e7e1      	b.n	80010be <HAL_I2C_EV_IRQHandler+0x196>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80010fa:	2a10      	cmp	r2, #16
 80010fc:	d8f1      	bhi.n	80010e2 <HAL_I2C_EV_IRQHandler+0x1ba>
 80010fe:	498e      	ldr	r1, [pc, #568]	; (8001338 <HAL_I2C_EV_IRQHandler+0x410>)
 8001100:	fa21 f202 	lsr.w	r2, r1, r2
 8001104:	07d0      	lsls	r0, r2, #31
 8001106:	d5ec      	bpl.n	80010e2 <HAL_I2C_EV_IRQHandler+0x1ba>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800110e:	e7eb      	b.n	80010e8 <HAL_I2C_EV_IRQHandler+0x1c0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001116:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001118:	2200      	movs	r2, #0
 800111a:	9207      	str	r2, [sp, #28]
 800111c:	695a      	ldr	r2, [r3, #20]
 800111e:	9207      	str	r2, [sp, #28]
 8001120:	699a      	ldr	r2, [r3, #24]
 8001122:	9207      	str	r2, [sp, #28]
 8001124:	9a07      	ldr	r2, [sp, #28]
 8001126:	e7ab      	b.n	8001080 <HAL_I2C_EV_IRQHandler+0x158>
      else if (hi2c->XferCount == 2U)
 8001128:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800112a:	b289      	uxth	r1, r1
 800112c:	2902      	cmp	r1, #2
 800112e:	d12c      	bne.n	800118a <HAL_I2C_EV_IRQHandler+0x262>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001130:	2a10      	cmp	r2, #16
 8001132:	d803      	bhi.n	800113c <HAL_I2C_EV_IRQHandler+0x214>
 8001134:	4980      	ldr	r1, [pc, #512]	; (8001338 <HAL_I2C_EV_IRQHandler+0x410>)
 8001136:	40d1      	lsrs	r1, r2
 8001138:	07c9      	lsls	r1, r1, #31
 800113a:	d422      	bmi.n	8001182 <HAL_I2C_EV_IRQHandler+0x25a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800113c:	6819      	ldr	r1, [r3, #0]
 800113e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001142:	6019      	str	r1, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001144:	6819      	ldr	r1, [r3, #0]
 8001146:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800114a:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800114c:	6859      	ldr	r1, [r3, #4]
 800114e:	050d      	lsls	r5, r1, #20
 8001150:	d50f      	bpl.n	8001172 <HAL_I2C_EV_IRQHandler+0x24a>
 8001152:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001156:	d008      	beq.n	800116a <HAL_I2C_EV_IRQHandler+0x242>
 8001158:	1e51      	subs	r1, r2, #1
 800115a:	291f      	cmp	r1, #31
 800115c:	bf9d      	ittte	ls
 800115e:	4a77      	ldrls	r2, [pc, #476]	; (800133c <HAL_I2C_EV_IRQHandler+0x414>)
 8001160:	40ca      	lsrls	r2, r1
 8001162:	43d2      	mvnls	r2, r2
 8001164:	2201      	movhi	r2, #1
 8001166:	07d0      	lsls	r0, r2, #31
 8001168:	d403      	bmi.n	8001172 <HAL_I2C_EV_IRQHandler+0x24a>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001170:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001172:	2200      	movs	r2, #0
 8001174:	9208      	str	r2, [sp, #32]
 8001176:	695a      	ldr	r2, [r3, #20]
 8001178:	9208      	str	r2, [sp, #32]
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	9308      	str	r3, [sp, #32]
 800117e:	9b08      	ldr	r3, [sp, #32]
 8001180:	e79d      	b.n	80010be <HAL_I2C_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001182:	6819      	ldr	r1, [r3, #0]
 8001184:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001188:	e7df      	b.n	800114a <HAL_I2C_EV_IRQHandler+0x222>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800118a:	6819      	ldr	r1, [r3, #0]
 800118c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001190:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001192:	6859      	ldr	r1, [r3, #4]
 8001194:	0509      	lsls	r1, r1, #20
 8001196:	d510      	bpl.n	80011ba <HAL_I2C_EV_IRQHandler+0x292>
 8001198:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800119c:	d009      	beq.n	80011b2 <HAL_I2C_EV_IRQHandler+0x28a>
 800119e:	3a01      	subs	r2, #1
 80011a0:	2a1f      	cmp	r2, #31
 80011a2:	bf9d      	ittte	ls
 80011a4:	4965      	ldrls	r1, [pc, #404]	; (800133c <HAL_I2C_EV_IRQHandler+0x414>)
 80011a6:	fa21 f202 	lsrls.w	r2, r1, r2
 80011aa:	43d2      	mvnls	r2, r2
 80011ac:	2201      	movhi	r2, #1
 80011ae:	07d2      	lsls	r2, r2, #31
 80011b0:	d403      	bmi.n	80011ba <HAL_I2C_EV_IRQHandler+0x292>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011b8:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011ba:	2200      	movs	r2, #0
 80011bc:	9209      	str	r2, [sp, #36]	; 0x24
 80011be:	695a      	ldr	r2, [r3, #20]
 80011c0:	9209      	str	r2, [sp, #36]	; 0x24
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	9309      	str	r3, [sp, #36]	; 0x24
 80011c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011c8:	e779      	b.n	80010be <HAL_I2C_EV_IRQHandler+0x196>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011ca:	2200      	movs	r2, #0
 80011cc:	920a      	str	r2, [sp, #40]	; 0x28
 80011ce:	695a      	ldr	r2, [r3, #20]
 80011d0:	920a      	str	r2, [sp, #40]	; 0x28
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	930a      	str	r3, [sp, #40]	; 0x28
 80011d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80011d8:	e6c2      	b.n	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80011da:	f010 0f04 	tst.w	r0, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80011de:	6858      	ldr	r0, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80011e0:	f000 80ae 	beq.w	8001340 <HAL_I2C_EV_IRQHandler+0x418>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80011e4:	0505      	lsls	r5, r0, #20
 80011e6:	f53f aebb 	bmi.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80011ea:	f011 0f80 	tst.w	r1, #128	; 0x80
 80011ee:	f001 0104 	and.w	r1, r1, #4
 80011f2:	d069      	beq.n	80012c8 <HAL_I2C_EV_IRQHandler+0x3a0>
 80011f4:	0550      	lsls	r0, r2, #21
 80011f6:	d567      	bpl.n	80012c8 <HAL_I2C_EV_IRQHandler+0x3a0>
 80011f8:	2900      	cmp	r1, #0
 80011fa:	d165      	bne.n	80012c8 <HAL_I2C_EV_IRQHandler+0x3a0>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80011fc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001200:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001202:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001206:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001208:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800120a:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800120c:	b9c5      	cbnz	r5, 8001240 <HAL_I2C_EV_IRQHandler+0x318>
 800120e:	2a21      	cmp	r2, #33	; 0x21
 8001210:	d118      	bne.n	8001244 <HAL_I2C_EV_IRQHandler+0x31c>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001212:	2808      	cmp	r0, #8
 8001214:	d078      	beq.n	8001308 <HAL_I2C_EV_IRQHandler+0x3e0>
 8001216:	2820      	cmp	r0, #32
 8001218:	d076      	beq.n	8001308 <HAL_I2C_EV_IRQHandler+0x3e0>
 800121a:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800121e:	d073      	beq.n	8001308 <HAL_I2C_EV_IRQHandler+0x3e0>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001226:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001228:	2311      	movs	r3, #17
 800122a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800122c:	2300      	movs	r3, #0
 800122e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001232:	2320      	movs	r3, #32
 8001234:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001238:	4620      	mov	r0, r4
 800123a:	f7ff fd8d 	bl	8000d58 <HAL_I2C_MasterTxCpltCallback>
 800123e:	e68f      	b.n	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001240:	2a21      	cmp	r2, #33	; 0x21
 8001242:	d005      	beq.n	8001250 <HAL_I2C_EV_IRQHandler+0x328>
 8001244:	2940      	cmp	r1, #64	; 0x40
 8001246:	f47f ae8b 	bne.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800124a:	2a22      	cmp	r2, #34	; 0x22
 800124c:	f47f ae88 	bne.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 8001250:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001252:	b292      	uxth	r2, r2
 8001254:	b91a      	cbnz	r2, 800125e <HAL_I2C_EV_IRQHandler+0x336>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800125c:	e6ba      	b.n	8000fd4 <HAL_I2C_EV_IRQHandler+0xac>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800125e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001262:	2a40      	cmp	r2, #64	; 0x40
 8001264:	d126      	bne.n	80012b4 <HAL_I2C_EV_IRQHandler+0x38c>
        if (hi2c->EventCount == 0U)
 8001266:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001268:	b962      	cbnz	r2, 8001284 <HAL_I2C_EV_IRQHandler+0x35c>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800126a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800126c:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800126e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001270:	d104      	bne.n	800127c <HAL_I2C_EV_IRQHandler+0x354>
 8001272:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001274:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8001276:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001278:	3302      	adds	r3, #2
 800127a:	e721      	b.n	80010c0 <HAL_I2C_EV_IRQHandler+0x198>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800127c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001280:	611a      	str	r2, [r3, #16]
 8001282:	e6f1      	b.n	8001068 <HAL_I2C_EV_IRQHandler+0x140>
        else if (hi2c->EventCount == 1U)
 8001284:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001286:	2a01      	cmp	r2, #1
 8001288:	d102      	bne.n	8001290 <HAL_I2C_EV_IRQHandler+0x368>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800128a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	e7f7      	b.n	8001280 <HAL_I2C_EV_IRQHandler+0x358>
        else if (hi2c->EventCount == 2U)
 8001290:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001292:	2a02      	cmp	r2, #2
 8001294:	f47f ae64 	bne.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001298:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800129c:	2a22      	cmp	r2, #34	; 0x22
 800129e:	d104      	bne.n	80012aa <HAL_I2C_EV_IRQHandler+0x382>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	e65a      	b.n	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80012aa:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80012ae:	2a21      	cmp	r2, #33	; 0x21
 80012b0:	f47f ae56 	bne.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012b6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80012ba:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 80012bc:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80012be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012c0:	3b01      	subs	r3, #1
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80012c6:	e64b      	b.n	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80012c8:	2900      	cmp	r1, #0
 80012ca:	f43f ae49 	beq.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
 80012ce:	0592      	lsls	r2, r2, #22
 80012d0:	f57f ae46 	bpl.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80012d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80012d6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80012da:	2a21      	cmp	r2, #33	; 0x21
 80012dc:	f47f ae40 	bne.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 80012e0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80012e2:	b292      	uxth	r2, r2
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	d1e5      	bne.n	80012b4 <HAL_I2C_EV_IRQHandler+0x38c>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80012e8:	2908      	cmp	r1, #8
 80012ea:	d00d      	beq.n	8001308 <HAL_I2C_EV_IRQHandler+0x3e0>
 80012ec:	2920      	cmp	r1, #32
 80012ee:	d00b      	beq.n	8001308 <HAL_I2C_EV_IRQHandler+0x3e0>
 80012f0:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80012f4:	d008      	beq.n	8001308 <HAL_I2C_EV_IRQHandler+0x3e0>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80012f6:	6859      	ldr	r1, [r3, #4]
 80012f8:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80012fc:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80012fe:	2311      	movs	r3, #17
 8001300:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001302:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8001306:	e794      	b.n	8001232 <HAL_I2C_EV_IRQHandler+0x30a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800130e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001316:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001318:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800131a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800131c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800131e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001322:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001326:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800132a:	2a40      	cmp	r2, #64	; 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 800132c:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800132e:	d184      	bne.n	800123a <HAL_I2C_EV_IRQHandler+0x312>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001330:	f7ff fd18 	bl	8000d64 <HAL_I2C_MemTxCpltCallback>
 8001334:	e614      	b.n	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
 8001336:	bf00      	nop
 8001338:	00010014 	.word	0x00010014
 800133c:	80008081 	.word	0x80008081
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001340:	0505      	lsls	r5, r0, #20
 8001342:	f53f ae0d 	bmi.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001346:	f011 0f40 	tst.w	r1, #64	; 0x40
 800134a:	f001 0104 	and.w	r1, r1, #4
 800134e:	d048      	beq.n	80013e2 <HAL_I2C_EV_IRQHandler+0x4ba>
 8001350:	0550      	lsls	r0, r2, #21
 8001352:	d546      	bpl.n	80013e2 <HAL_I2C_EV_IRQHandler+0x4ba>
 8001354:	2900      	cmp	r1, #0
 8001356:	d144      	bne.n	80013e2 <HAL_I2C_EV_IRQHandler+0x4ba>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001358:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800135c:	2a22      	cmp	r2, #34	; 0x22
 800135e:	f47f adff 	bne.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
    tmp = hi2c->XferCount;
 8001362:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001364:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8001366:	2a03      	cmp	r2, #3
 8001368:	d914      	bls.n	8001394 <HAL_I2C_EV_IRQHandler+0x46c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800136a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8001370:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001372:	3301      	adds	r3, #1
 8001374:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001376:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001378:	3b01      	subs	r3, #1
 800137a:	b29b      	uxth	r3, r3
 800137c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 800137e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001380:	b29b      	uxth	r3, r3
 8001382:	2b03      	cmp	r3, #3
 8001384:	f47f adec 	bne.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001388:	6822      	ldr	r2, [r4, #0]
 800138a:	6853      	ldr	r3, [r2, #4]
 800138c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001390:	6053      	str	r3, [r2, #4]
 8001392:	e5e5      	b.n	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001394:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001396:	2802      	cmp	r0, #2
 8001398:	f43f ade2 	beq.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
 800139c:	2a01      	cmp	r2, #1
 800139e:	f63f addf 	bhi.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013a8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80013b0:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80013b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013ba:	3301      	adds	r3, #1
 80013bc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80013be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013c0:	3b01      	subs	r3, #1
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80013c6:	2320      	movs	r3, #32
 80013c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80013cc:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013d0:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80013d4:	2b40      	cmp	r3, #64	; 0x40
 80013d6:	d168      	bne.n	80014aa <HAL_I2C_EV_IRQHandler+0x582>
        hi2c->PreviousState = I2C_STATE_NONE;
 80013d8:	6321      	str	r1, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80013da:	4620      	mov	r0, r4
 80013dc:	f7ff fcc3 	bl	8000d66 <HAL_I2C_MemRxCpltCallback>
 80013e0:	e5be      	b.n	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013e2:	2900      	cmp	r1, #0
 80013e4:	f43f adbc 	beq.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
 80013e8:	0592      	lsls	r2, r2, #22
 80013ea:	f57f adb9 	bpl.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80013ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 80013f0:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80013f2:	b289      	uxth	r1, r1
 80013f4:	2904      	cmp	r1, #4
 80013f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80013f8:	d109      	bne.n	800140e <HAL_I2C_EV_IRQHandler+0x4e6>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001400:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8001406:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001408:	3301      	adds	r3, #1
 800140a:	6263      	str	r3, [r4, #36]	; 0x24
 800140c:	e757      	b.n	80012be <HAL_I2C_EV_IRQHandler+0x396>
  else if (hi2c->XferCount == 3U)
 800140e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8001410:	b280      	uxth	r0, r0
 8001412:	2803      	cmp	r0, #3
 8001414:	d10c      	bne.n	8001430 <HAL_I2C_EV_IRQHandler+0x508>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001416:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001418:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800141a:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 800141e:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001420:	d0ef      	beq.n	8001402 <HAL_I2C_EV_IRQHandler+0x4da>
 8001422:	2a02      	cmp	r2, #2
 8001424:	d0ed      	beq.n	8001402 <HAL_I2C_EV_IRQHandler+0x4da>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	e7e8      	b.n	8001402 <HAL_I2C_EV_IRQHandler+0x4da>
  else if (hi2c->XferCount == 2U)
 8001430:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8001432:	b280      	uxth	r0, r0
 8001434:	2802      	cmp	r0, #2
 8001436:	d1e4      	bne.n	8001402 <HAL_I2C_EV_IRQHandler+0x4da>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001438:	2a01      	cmp	r2, #1
 800143a:	d001      	beq.n	8001440 <HAL_I2C_EV_IRQHandler+0x518>
 800143c:	2a10      	cmp	r2, #16
 800143e:	d128      	bne.n	8001492 <HAL_I2C_EV_IRQHandler+0x56a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001446:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 800144c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800144e:	1c53      	adds	r3, r2, #1
 8001450:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001452:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001454:	3b01      	subs	r3, #1
 8001456:	b29b      	uxth	r3, r3
 8001458:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800145a:	6823      	ldr	r3, [r4, #0]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 8001460:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001462:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr++;
 8001464:	3301      	adds	r3, #1
 8001466:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001468:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800146a:	3b01      	subs	r3, #1
 800146c:	b29b      	uxth	r3, r3
 800146e:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001470:	6853      	ldr	r3, [r2, #4]
 8001472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001476:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001478:	2320      	movs	r3, #32
 800147a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800147e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001482:	2b40      	cmp	r3, #64	; 0x40
 8001484:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001488:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800148c:	d10d      	bne.n	80014aa <HAL_I2C_EV_IRQHandler+0x582>
      hi2c->PreviousState = I2C_STATE_NONE;
 800148e:	6323      	str	r3, [r4, #48]	; 0x30
 8001490:	e7a3      	b.n	80013da <HAL_I2C_EV_IRQHandler+0x4b2>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001492:	2a04      	cmp	r2, #4
 8001494:	d001      	beq.n	800149a <HAL_I2C_EV_IRQHandler+0x572>
 8001496:	2a02      	cmp	r2, #2
 8001498:	d103      	bne.n	80014a2 <HAL_I2C_EV_IRQHandler+0x57a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80014a0:	e7d1      	b.n	8001446 <HAL_I2C_EV_IRQHandler+0x51e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014a8:	e7cd      	b.n	8001446 <HAL_I2C_EV_IRQHandler+0x51e>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80014aa:	2312      	movs	r3, #18
 80014ac:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80014ae:	4620      	mov	r0, r4
 80014b0:	f7ff fc53 	bl	8000d5a <HAL_I2C_MasterRxCpltCallback>
 80014b4:	e554      	b.n	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80014b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80014b8:	b321      	cbz	r1, 8001504 <HAL_I2C_EV_IRQHandler+0x5dc>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80014ba:	6959      	ldr	r1, [r3, #20]
  uint32_t sr2itflags               = 0U;
 80014bc:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014be:	f011 0f02 	tst.w	r1, #2
 80014c2:	d029      	beq.n	8001518 <HAL_I2C_EV_IRQHandler+0x5f0>
 80014c4:	f412 7f00 	tst.w	r2, #512	; 0x200
 80014c8:	d026      	beq.n	8001518 <HAL_I2C_EV_IRQHandler+0x5f0>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80014ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014cc:	b102      	cbz	r2, 80014d0 <HAL_I2C_EV_IRQHandler+0x5a8>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80014ce:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80014d0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80014d4:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80014d8:	2a28      	cmp	r2, #40	; 0x28
 80014da:	d116      	bne.n	800150a <HAL_I2C_EV_IRQHandler+0x5e2>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014e2:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80014e4:	f085 0104 	eor.w	r1, r5, #4
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80014e8:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 80014ea:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80014ee:	f3c1 0180 	ubfx	r1, r1, #2, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80014f2:	bf54      	ite	pl
 80014f4:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80014f6:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 80014f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80014fc:	4620      	mov	r0, r4
 80014fe:	f7ff fc2f 	bl	8000d60 <HAL_I2C_AddrCallback>
 8001502:	e52d      	b.n	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001504:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001506:	6959      	ldr	r1, [r3, #20]
 8001508:	e7d9      	b.n	80014be <HAL_I2C_EV_IRQHandler+0x596>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800150a:	f06f 0202 	mvn.w	r2, #2
 800150e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8001510:	2300      	movs	r3, #0
 8001512:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001516:	e523      	b.n	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001518:	06cd      	lsls	r5, r1, #27
 800151a:	f140 80af 	bpl.w	800167c <HAL_I2C_EV_IRQHandler+0x754>
 800151e:	0595      	lsls	r5, r2, #22
 8001520:	f140 80ac 	bpl.w	800167c <HAL_I2C_EV_IRQHandler+0x754>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001524:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800152e:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8001530:	2200      	movs	r2, #0
 8001532:	920b      	str	r2, [sp, #44]	; 0x2c
 8001534:	695a      	ldr	r2, [r3, #20]
 8001536:	920b      	str	r2, [sp, #44]	; 0x2c
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	f042 0201 	orr.w	r2, r2, #1
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001548:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	0511      	lsls	r1, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800154e:	b2ed      	uxtb	r5, r5
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001550:	d520      	bpl.n	8001594 <HAL_I2C_EV_IRQHandler+0x66c>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001552:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8001556:	2a22      	cmp	r2, #34	; 0x22
 8001558:	d148      	bne.n	80015ec <HAL_I2C_EV_IRQHandler+0x6c4>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800155a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800155c:	6802      	ldr	r2, [r0, #0]
 800155e:	6852      	ldr	r2, [r2, #4]
 8001560:	b292      	uxth	r2, r2
 8001562:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8001564:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001566:	b292      	uxth	r2, r2
 8001568:	b11a      	cbz	r2, 8001572 <HAL_I2C_EV_IRQHandler+0x64a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800156a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800156c:	f042 0204 	orr.w	r2, r2, #4
 8001570:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001578:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800157a:	f7ff f8af 	bl	80006dc <HAL_DMA_GetState>
 800157e:	2801      	cmp	r0, #1
 8001580:	d008      	beq.n	8001594 <HAL_I2C_EV_IRQHandler+0x66c>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001582:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001584:	4b78      	ldr	r3, [pc, #480]	; (8001768 <HAL_I2C_EV_IRQHandler+0x840>)
 8001586:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001588:	f7ff f896 	bl	80006b8 <HAL_DMA_Abort_IT>
 800158c:	b110      	cbz	r0, 8001594 <HAL_I2C_EV_IRQHandler+0x66c>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800158e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001590:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001592:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8001594:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001596:	b29b      	uxth	r3, r3
 8001598:	b313      	cbz	r3, 80015e0 <HAL_I2C_EV_IRQHandler+0x6b8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	695a      	ldr	r2, [r3, #20]
 800159e:	0752      	lsls	r2, r2, #29
 80015a0:	d509      	bpl.n	80015b6 <HAL_I2C_EV_IRQHandler+0x68e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80015a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015aa:	3301      	adds	r3, #1
 80015ac:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80015ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015b0:	3b01      	subs	r3, #1
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80015b6:	6823      	ldr	r3, [r4, #0]
 80015b8:	695a      	ldr	r2, [r3, #20]
 80015ba:	0650      	lsls	r0, r2, #25
 80015bc:	d509      	bpl.n	80015d2 <HAL_I2C_EV_IRQHandler+0x6aa>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80015c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015c6:	3301      	adds	r3, #1
 80015c8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80015ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015cc:	3b01      	subs	r3, #1
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 80015d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	b11b      	cbz	r3, 80015e0 <HAL_I2C_EV_IRQHandler+0x6b8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80015d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80015e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015e2:	b303      	cbz	r3, 8001626 <HAL_I2C_EV_IRQHandler+0x6fe>
    I2C_ITError(hi2c);
 80015e4:	4620      	mov	r0, r4
 80015e6:	f7ff fbfd 	bl	8000de4 <I2C_ITError>
 80015ea:	e4b9      	b.n	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80015ec:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80015ee:	6802      	ldr	r2, [r0, #0]
 80015f0:	6852      	ldr	r2, [r2, #4]
 80015f2:	b292      	uxth	r2, r2
 80015f4:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80015f6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80015f8:	b292      	uxth	r2, r2
 80015fa:	b11a      	cbz	r2, 8001604 <HAL_I2C_EV_IRQHandler+0x6dc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80015fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80015fe:	f042 0204 	orr.w	r2, r2, #4
 8001602:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800160a:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800160c:	f7ff f866 	bl	80006dc <HAL_DMA_GetState>
 8001610:	2801      	cmp	r0, #1
 8001612:	d0bf      	beq.n	8001594 <HAL_I2C_EV_IRQHandler+0x66c>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001614:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001616:	4b54      	ldr	r3, [pc, #336]	; (8001768 <HAL_I2C_EV_IRQHandler+0x840>)
 8001618:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800161a:	f7ff f84d 	bl	80006b8 <HAL_DMA_Abort_IT>
 800161e:	2800      	cmp	r0, #0
 8001620:	d0b8      	beq.n	8001594 <HAL_I2C_EV_IRQHandler+0x66c>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001622:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001624:	e7b4      	b.n	8001590 <HAL_I2C_EV_IRQHandler+0x668>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001626:	2d2a      	cmp	r5, #42	; 0x2a
 8001628:	d106      	bne.n	8001638 <HAL_I2C_EV_IRQHandler+0x710>
      hi2c->PreviousState = I2C_STATE_NONE;
 800162a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800162c:	2328      	movs	r3, #40	; 0x28
 800162e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001632:	4620      	mov	r0, r4
 8001634:	f7ff fb93 	bl	8000d5e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001638:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800163c:	2b28      	cmp	r3, #40	; 0x28
 800163e:	d10c      	bne.n	800165a <HAL_I2C_EV_IRQHandler+0x732>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001640:	4b4a      	ldr	r3, [pc, #296]	; (800176c <HAL_I2C_EV_IRQHandler+0x844>)
 8001642:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8001644:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8001646:	2300      	movs	r3, #0
 8001648:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 800164a:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 800164c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001650:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8001654:	f7ff fb85 	bl	8000d62 <HAL_I2C_ListenCpltCallback>
 8001658:	e482      	b.n	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800165a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800165c:	2b22      	cmp	r3, #34	; 0x22
 800165e:	d002      	beq.n	8001666 <HAL_I2C_EV_IRQHandler+0x73e>
 8001660:	2d22      	cmp	r5, #34	; 0x22
 8001662:	f47f ac7d 	bne.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001666:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001668:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800166a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800166c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001670:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001674:	4620      	mov	r0, r4
 8001676:	f7ff fb72 	bl	8000d5e <HAL_I2C_SlaveRxCpltCallback>
 800167a:	e471      	b.n	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800167c:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 8001680:	2821      	cmp	r0, #33	; 0x21
 8001682:	f001 0504 	and.w	r5, r1, #4
 8001686:	d135      	bne.n	80016f4 <HAL_I2C_EV_IRQHandler+0x7cc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001688:	0609      	lsls	r1, r1, #24
 800168a:	d527      	bpl.n	80016dc <HAL_I2C_EV_IRQHandler+0x7b4>
 800168c:	0551      	lsls	r1, r2, #21
 800168e:	d525      	bpl.n	80016dc <HAL_I2C_EV_IRQHandler+0x7b4>
 8001690:	bb25      	cbnz	r5, 80016dc <HAL_I2C_EV_IRQHandler+0x7b4>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001692:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8001696:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001698:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800169a:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 800169c:	2a00      	cmp	r2, #0
 800169e:	f43f ac5f 	beq.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80016a4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80016a8:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 80016aa:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80016ac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80016ae:	3a01      	subs	r2, #1
 80016b0:	b292      	uxth	r2, r2
 80016b2:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80016b4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80016b6:	b292      	uxth	r2, r2
 80016b8:	2a00      	cmp	r2, #0
 80016ba:	f47f ac51 	bne.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
 80016be:	2929      	cmp	r1, #41	; 0x29
 80016c0:	f47f ac4e 	bne.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016ca:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80016cc:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80016ce:	6320      	str	r0, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80016d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80016d4:	4620      	mov	r0, r4
 80016d6:	f7ff fb41 	bl	8000d5c <HAL_I2C_SlaveTxCpltCallback>
 80016da:	e441      	b.n	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016dc:	2d00      	cmp	r5, #0
 80016de:	f43f ac3f 	beq.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
 80016e2:	0595      	lsls	r5, r2, #22
 80016e4:	f57f ac3c 	bpl.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 80016e8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80016ea:	b292      	uxth	r2, r2
 80016ec:	2a00      	cmp	r2, #0
 80016ee:	f47f ade1 	bne.w	80012b4 <HAL_I2C_EV_IRQHandler+0x38c>
 80016f2:	e435      	b.n	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016f4:	0648      	lsls	r0, r1, #25
 80016f6:	d527      	bpl.n	8001748 <HAL_I2C_EV_IRQHandler+0x820>
 80016f8:	0551      	lsls	r1, r2, #21
 80016fa:	d525      	bpl.n	8001748 <HAL_I2C_EV_IRQHandler+0x820>
 80016fc:	bb25      	cbnz	r5, 8001748 <HAL_I2C_EV_IRQHandler+0x820>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80016fe:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8001702:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001704:	b289      	uxth	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001706:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 8001708:	2900      	cmp	r1, #0
 800170a:	f43f ac29 	beq.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800170e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8001714:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001716:	3301      	adds	r3, #1
 8001718:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800171a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800171c:	3b01      	subs	r3, #1
 800171e:	b29b      	uxth	r3, r3
 8001720:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001722:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001724:	b29b      	uxth	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	f47f ac1a 	bne.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
 800172c:	2a2a      	cmp	r2, #42	; 0x2a
 800172e:	f47f ac17 	bne.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001732:	6822      	ldr	r2, [r4, #0]
 8001734:	6853      	ldr	r3, [r2, #4]
 8001736:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800173a:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800173c:	2322      	movs	r3, #34	; 0x22
 800173e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001740:	2328      	movs	r3, #40	; 0x28
 8001742:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8001746:	e795      	b.n	8001674 <HAL_I2C_EV_IRQHandler+0x74c>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001748:	2d00      	cmp	r5, #0
 800174a:	f43f ac09 	beq.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
 800174e:	0592      	lsls	r2, r2, #22
 8001750:	f57f ac06 	bpl.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8001754:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001756:	b292      	uxth	r2, r2
 8001758:	2a00      	cmp	r2, #0
 800175a:	f43f ac01 	beq.w	8000f60 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800175e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	7013      	strb	r3, [r2, #0]
 8001764:	e64f      	b.n	8001406 <HAL_I2C_EV_IRQHandler+0x4de>
 8001766:	bf00      	nop
 8001768:	08000d6d 	.word	0x08000d6d
 800176c:	ffff0000 	.word	0xffff0000

08001770 <HAL_I2C_ER_IRQHandler>:
{
 8001770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001772:	6803      	ldr	r3, [r0, #0]
 8001774:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001776:	685e      	ldr	r6, [r3, #4]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001778:	f417 7580 	ands.w	r5, r7, #256	; 0x100
{
 800177c:	4604      	mov	r4, r0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800177e:	d006      	beq.n	800178e <HAL_I2C_ER_IRQHandler+0x1e>
 8001780:	f416 7580 	ands.w	r5, r6, #256	; 0x100
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001784:	bf1e      	ittt	ne
 8001786:	f46f 7280 	mvnne.w	r2, #256	; 0x100
 800178a:	615a      	strne	r2, [r3, #20]
    error |= HAL_I2C_ERROR_BERR;
 800178c:	2501      	movne	r5, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800178e:	05b9      	lsls	r1, r7, #22
 8001790:	d506      	bpl.n	80017a0 <HAL_I2C_ER_IRQHandler+0x30>
 8001792:	05f2      	lsls	r2, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001794:	bf42      	ittt	mi
 8001796:	f46f 7200 	mvnmi.w	r2, #512	; 0x200
    error |= HAL_I2C_ERROR_ARLO;
 800179a:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800179e:	615a      	strmi	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80017a0:	0578      	lsls	r0, r7, #21
 80017a2:	d537      	bpl.n	8001814 <HAL_I2C_ER_IRQHandler+0xa4>
 80017a4:	05f1      	lsls	r1, r6, #23
 80017a6:	d535      	bpl.n	8001814 <HAL_I2C_ER_IRQHandler+0xa4>
    tmp1 = hi2c->Mode;
 80017a8:	f894 e03e 	ldrb.w	lr, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 80017ac:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 80017ae:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 80017b2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80017b4:	f1be 0f20 	cmp.w	lr, #32
    tmp2 = hi2c->XferCount;
 80017b8:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 80017ba:	b2d2      	uxtb	r2, r2
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80017bc:	d15a      	bne.n	8001874 <HAL_I2C_ER_IRQHandler+0x104>
 80017be:	2900      	cmp	r1, #0
 80017c0:	d158      	bne.n	8001874 <HAL_I2C_ER_IRQHandler+0x104>
 80017c2:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 80017c6:	2921      	cmp	r1, #33	; 0x21
 80017c8:	d003      	beq.n	80017d2 <HAL_I2C_ER_IRQHandler+0x62>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80017ca:	2a28      	cmp	r2, #40	; 0x28
 80017cc:	d152      	bne.n	8001874 <HAL_I2C_ER_IRQHandler+0x104>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80017ce:	2821      	cmp	r0, #33	; 0x21
 80017d0:	d150      	bne.n	8001874 <HAL_I2C_ER_IRQHandler+0x104>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80017d2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80017d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80017d8:	2908      	cmp	r1, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80017da:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80017dc:	d001      	beq.n	80017e2 <HAL_I2C_ER_IRQHandler+0x72>
 80017de:	2920      	cmp	r1, #32
 80017e0:	d12a      	bne.n	8001838 <HAL_I2C_ER_IRQHandler+0xc8>
 80017e2:	2a28      	cmp	r2, #40	; 0x28
 80017e4:	d128      	bne.n	8001838 <HAL_I2C_ER_IRQHandler+0xc8>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017e6:	4a2c      	ldr	r2, [pc, #176]	; (8001898 <HAL_I2C_ER_IRQHandler+0x128>)
 80017e8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80017f0:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80017f6:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017fe:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001800:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8001802:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8001804:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8001806:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8001808:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800180c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001810:	f7ff faa7 	bl	8000d62 <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001814:	053a      	lsls	r2, r7, #20
 8001816:	d53c      	bpl.n	8001892 <HAL_I2C_ER_IRQHandler+0x122>
 8001818:	05f3      	lsls	r3, r6, #23
 800181a:	d53a      	bpl.n	8001892 <HAL_I2C_ER_IRQHandler+0x122>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
    error |= HAL_I2C_ERROR_OVR;
 8001822:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001826:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 8001828:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800182a:	431d      	orrs	r5, r3
 800182c:	6425      	str	r5, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 800182e:	4620      	mov	r0, r4
}
 8001830:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8001834:	f7ff bad6 	b.w	8000de4 <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001838:	2a21      	cmp	r2, #33	; 0x21
 800183a:	d117      	bne.n	800186c <HAL_I2C_ER_IRQHandler+0xfc>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800183c:	4916      	ldr	r1, [pc, #88]	; (8001898 <HAL_I2C_ER_IRQHandler+0x128>)
 800183e:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001840:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8001842:	2220      	movs	r2, #32
 8001844:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001848:	2200      	movs	r2, #0
 800184a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001854:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001856:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800185a:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001862:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001864:	4620      	mov	r0, r4
 8001866:	f7ff fa79 	bl	8000d5c <HAL_I2C_SlaveTxCpltCallback>
 800186a:	e7d3      	b.n	8001814 <HAL_I2C_ER_IRQHandler+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800186c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001870:	615a      	str	r2, [r3, #20]
 8001872:	e7cf      	b.n	8001814 <HAL_I2C_ER_IRQHandler+0xa4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001874:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001878:	615a      	str	r2, [r3, #20]
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 800187a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800187e:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001880:	bf04      	itt	eq
 8001882:	681a      	ldreq	r2, [r3, #0]
 8001884:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
      error |= HAL_I2C_ERROR_AF;
 8001888:	f045 0504 	orr.w	r5, r5, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800188c:	bf08      	it	eq
 800188e:	601a      	streq	r2, [r3, #0]
 8001890:	e7c0      	b.n	8001814 <HAL_I2C_ER_IRQHandler+0xa4>
  if (error != HAL_I2C_ERROR_NONE)
 8001892:	2d00      	cmp	r5, #0
 8001894:	d1c8      	bne.n	8001828 <HAL_I2C_ER_IRQHandler+0xb8>
 8001896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001898:	ffff0000 	.word	0xffff0000

0800189c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800189c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018a0:	4604      	mov	r4, r0
 80018a2:	b918      	cbnz	r0, 80018ac <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80018a4:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80018a6:	b002      	add	sp, #8
 80018a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ac:	6803      	ldr	r3, [r0, #0]
 80018ae:	07dd      	lsls	r5, r3, #31
 80018b0:	d410      	bmi.n	80018d4 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b2:	6823      	ldr	r3, [r4, #0]
 80018b4:	0798      	lsls	r0, r3, #30
 80018b6:	d458      	bmi.n	800196a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b8:	6823      	ldr	r3, [r4, #0]
 80018ba:	071a      	lsls	r2, r3, #28
 80018bc:	f100 809a 	bmi.w	80019f4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c0:	6823      	ldr	r3, [r4, #0]
 80018c2:	075b      	lsls	r3, r3, #29
 80018c4:	f100 80b8 	bmi.w	8001a38 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018c8:	69a2      	ldr	r2, [r4, #24]
 80018ca:	2a00      	cmp	r2, #0
 80018cc:	f040 8119 	bne.w	8001b02 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80018d0:	2000      	movs	r0, #0
 80018d2:	e7e8      	b.n	80018a6 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018d4:	4ba6      	ldr	r3, [pc, #664]	; (8001b70 <HAL_RCC_OscConfig+0x2d4>)
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	f002 020c 	and.w	r2, r2, #12
 80018dc:	2a04      	cmp	r2, #4
 80018de:	d007      	beq.n	80018f0 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018e6:	2a08      	cmp	r2, #8
 80018e8:	d10a      	bne.n	8001900 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	0259      	lsls	r1, r3, #9
 80018ee:	d507      	bpl.n	8001900 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f0:	4b9f      	ldr	r3, [pc, #636]	; (8001b70 <HAL_RCC_OscConfig+0x2d4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	039a      	lsls	r2, r3, #14
 80018f6:	d5dc      	bpl.n	80018b2 <HAL_RCC_OscConfig+0x16>
 80018f8:	6863      	ldr	r3, [r4, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1d9      	bne.n	80018b2 <HAL_RCC_OscConfig+0x16>
 80018fe:	e7d1      	b.n	80018a4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001900:	6863      	ldr	r3, [r4, #4]
 8001902:	4d9b      	ldr	r5, [pc, #620]	; (8001b70 <HAL_RCC_OscConfig+0x2d4>)
 8001904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001908:	d111      	bne.n	800192e <HAL_RCC_OscConfig+0x92>
 800190a:	682b      	ldr	r3, [r5, #0]
 800190c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001910:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001912:	f7fe fe63 	bl	80005dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	4d96      	ldr	r5, [pc, #600]	; (8001b70 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001918:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191a:	682b      	ldr	r3, [r5, #0]
 800191c:	039b      	lsls	r3, r3, #14
 800191e:	d4c8      	bmi.n	80018b2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001920:	f7fe fe5c 	bl	80005dc <HAL_GetTick>
 8001924:	1b80      	subs	r0, r0, r6
 8001926:	2864      	cmp	r0, #100	; 0x64
 8001928:	d9f7      	bls.n	800191a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800192a:	2003      	movs	r0, #3
 800192c:	e7bb      	b.n	80018a6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001932:	d104      	bne.n	800193e <HAL_RCC_OscConfig+0xa2>
 8001934:	682b      	ldr	r3, [r5, #0]
 8001936:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800193a:	602b      	str	r3, [r5, #0]
 800193c:	e7e5      	b.n	800190a <HAL_RCC_OscConfig+0x6e>
 800193e:	682a      	ldr	r2, [r5, #0]
 8001940:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001944:	602a      	str	r2, [r5, #0]
 8001946:	682a      	ldr	r2, [r5, #0]
 8001948:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800194c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1df      	bne.n	8001912 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001952:	f7fe fe43 	bl	80005dc <HAL_GetTick>
 8001956:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001958:	682b      	ldr	r3, [r5, #0]
 800195a:	039f      	lsls	r7, r3, #14
 800195c:	d5a9      	bpl.n	80018b2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800195e:	f7fe fe3d 	bl	80005dc <HAL_GetTick>
 8001962:	1b80      	subs	r0, r0, r6
 8001964:	2864      	cmp	r0, #100	; 0x64
 8001966:	d9f7      	bls.n	8001958 <HAL_RCC_OscConfig+0xbc>
 8001968:	e7df      	b.n	800192a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800196a:	4b81      	ldr	r3, [pc, #516]	; (8001b70 <HAL_RCC_OscConfig+0x2d4>)
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	f012 0f0c 	tst.w	r2, #12
 8001972:	d007      	beq.n	8001984 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800197a:	2a08      	cmp	r2, #8
 800197c:	d111      	bne.n	80019a2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	025e      	lsls	r6, r3, #9
 8001982:	d40e      	bmi.n	80019a2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001984:	4b7a      	ldr	r3, [pc, #488]	; (8001b70 <HAL_RCC_OscConfig+0x2d4>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	0795      	lsls	r5, r2, #30
 800198a:	d502      	bpl.n	8001992 <HAL_RCC_OscConfig+0xf6>
 800198c:	68e2      	ldr	r2, [r4, #12]
 800198e:	2a01      	cmp	r2, #1
 8001990:	d188      	bne.n	80018a4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	6921      	ldr	r1, [r4, #16]
 8001996:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800199a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800199e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a0:	e78a      	b.n	80018b8 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019a2:	68e2      	ldr	r2, [r4, #12]
 80019a4:	4b73      	ldr	r3, [pc, #460]	; (8001b74 <HAL_RCC_OscConfig+0x2d8>)
 80019a6:	b1b2      	cbz	r2, 80019d6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80019a8:	2201      	movs	r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019ac:	f7fe fe16 	bl	80005dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b0:	4d6f      	ldr	r5, [pc, #444]	; (8001b70 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80019b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b4:	682b      	ldr	r3, [r5, #0]
 80019b6:	0798      	lsls	r0, r3, #30
 80019b8:	d507      	bpl.n	80019ca <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ba:	682b      	ldr	r3, [r5, #0]
 80019bc:	6922      	ldr	r2, [r4, #16]
 80019be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019c2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80019c6:	602b      	str	r3, [r5, #0]
 80019c8:	e776      	b.n	80018b8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ca:	f7fe fe07 	bl	80005dc <HAL_GetTick>
 80019ce:	1b80      	subs	r0, r0, r6
 80019d0:	2802      	cmp	r0, #2
 80019d2:	d9ef      	bls.n	80019b4 <HAL_RCC_OscConfig+0x118>
 80019d4:	e7a9      	b.n	800192a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80019d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019d8:	f7fe fe00 	bl	80005dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019dc:	4d64      	ldr	r5, [pc, #400]	; (8001b70 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80019de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e0:	682b      	ldr	r3, [r5, #0]
 80019e2:	0799      	lsls	r1, r3, #30
 80019e4:	f57f af68 	bpl.w	80018b8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e8:	f7fe fdf8 	bl	80005dc <HAL_GetTick>
 80019ec:	1b80      	subs	r0, r0, r6
 80019ee:	2802      	cmp	r0, #2
 80019f0:	d9f6      	bls.n	80019e0 <HAL_RCC_OscConfig+0x144>
 80019f2:	e79a      	b.n	800192a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019f4:	6962      	ldr	r2, [r4, #20]
 80019f6:	4b60      	ldr	r3, [pc, #384]	; (8001b78 <HAL_RCC_OscConfig+0x2dc>)
 80019f8:	b17a      	cbz	r2, 8001a1a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80019fe:	f7fe fded 	bl	80005dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a02:	4d5b      	ldr	r5, [pc, #364]	; (8001b70 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001a04:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a06:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001a08:	079f      	lsls	r7, r3, #30
 8001a0a:	f53f af59 	bmi.w	80018c0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a0e:	f7fe fde5 	bl	80005dc <HAL_GetTick>
 8001a12:	1b80      	subs	r0, r0, r6
 8001a14:	2802      	cmp	r0, #2
 8001a16:	d9f6      	bls.n	8001a06 <HAL_RCC_OscConfig+0x16a>
 8001a18:	e787      	b.n	800192a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001a1a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a1c:	f7fe fdde 	bl	80005dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a20:	4d53      	ldr	r5, [pc, #332]	; (8001b70 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001a22:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a24:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001a26:	0798      	lsls	r0, r3, #30
 8001a28:	f57f af4a 	bpl.w	80018c0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a2c:	f7fe fdd6 	bl	80005dc <HAL_GetTick>
 8001a30:	1b80      	subs	r0, r0, r6
 8001a32:	2802      	cmp	r0, #2
 8001a34:	d9f6      	bls.n	8001a24 <HAL_RCC_OscConfig+0x188>
 8001a36:	e778      	b.n	800192a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a38:	4b4d      	ldr	r3, [pc, #308]	; (8001b70 <HAL_RCC_OscConfig+0x2d4>)
 8001a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a3c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001a40:	d128      	bne.n	8001a94 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	9201      	str	r2, [sp, #4]
 8001a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a4a:	641a      	str	r2, [r3, #64]	; 0x40
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a56:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a58:	4d48      	ldr	r5, [pc, #288]	; (8001b7c <HAL_RCC_OscConfig+0x2e0>)
 8001a5a:	682b      	ldr	r3, [r5, #0]
 8001a5c:	05d9      	lsls	r1, r3, #23
 8001a5e:	d51b      	bpl.n	8001a98 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a60:	68a3      	ldr	r3, [r4, #8]
 8001a62:	4d43      	ldr	r5, [pc, #268]	; (8001b70 <HAL_RCC_OscConfig+0x2d4>)
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d127      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x21c>
 8001a68:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001a70:	f7fe fdb4 	bl	80005dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a74:	4d3e      	ldr	r5, [pc, #248]	; (8001b70 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001a76:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a78:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a7e:	079b      	lsls	r3, r3, #30
 8001a80:	d539      	bpl.n	8001af6 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001a82:	2e00      	cmp	r6, #0
 8001a84:	f43f af20 	beq.w	80018c8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a88:	4a39      	ldr	r2, [pc, #228]	; (8001b70 <HAL_RCC_OscConfig+0x2d4>)
 8001a8a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a90:	6413      	str	r3, [r2, #64]	; 0x40
 8001a92:	e719      	b.n	80018c8 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001a94:	2600      	movs	r6, #0
 8001a96:	e7df      	b.n	8001a58 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a98:	682b      	ldr	r3, [r5, #0]
 8001a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001aa0:	f7fe fd9c 	bl	80005dc <HAL_GetTick>
 8001aa4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa6:	682b      	ldr	r3, [r5, #0]
 8001aa8:	05da      	lsls	r2, r3, #23
 8001aaa:	d4d9      	bmi.n	8001a60 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aac:	f7fe fd96 	bl	80005dc <HAL_GetTick>
 8001ab0:	1bc0      	subs	r0, r0, r7
 8001ab2:	2802      	cmp	r0, #2
 8001ab4:	d9f7      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x20a>
 8001ab6:	e738      	b.n	800192a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab8:	2b05      	cmp	r3, #5
 8001aba:	d104      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x22a>
 8001abc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001abe:	f043 0304 	orr.w	r3, r3, #4
 8001ac2:	672b      	str	r3, [r5, #112]	; 0x70
 8001ac4:	e7d0      	b.n	8001a68 <HAL_RCC_OscConfig+0x1cc>
 8001ac6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001ac8:	f022 0201 	bic.w	r2, r2, #1
 8001acc:	672a      	str	r2, [r5, #112]	; 0x70
 8001ace:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001ad0:	f022 0204 	bic.w	r2, r2, #4
 8001ad4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1ca      	bne.n	8001a70 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001ada:	f7fe fd7f 	bl	80005dc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ade:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001ae2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001ae6:	0798      	lsls	r0, r3, #30
 8001ae8:	d5cb      	bpl.n	8001a82 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aea:	f7fe fd77 	bl	80005dc <HAL_GetTick>
 8001aee:	1bc0      	subs	r0, r0, r7
 8001af0:	4540      	cmp	r0, r8
 8001af2:	d9f7      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x248>
 8001af4:	e719      	b.n	800192a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af6:	f7fe fd71 	bl	80005dc <HAL_GetTick>
 8001afa:	1bc0      	subs	r0, r0, r7
 8001afc:	4540      	cmp	r0, r8
 8001afe:	d9bd      	bls.n	8001a7c <HAL_RCC_OscConfig+0x1e0>
 8001b00:	e713      	b.n	800192a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b02:	4d1b      	ldr	r5, [pc, #108]	; (8001b70 <HAL_RCC_OscConfig+0x2d4>)
 8001b04:	68ab      	ldr	r3, [r5, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	f43f aeca 	beq.w	80018a4 <HAL_RCC_OscConfig+0x8>
 8001b10:	4e1b      	ldr	r6, [pc, #108]	; (8001b80 <HAL_RCC_OscConfig+0x2e4>)
 8001b12:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b14:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001b16:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b18:	d134      	bne.n	8001b84 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001b1a:	f7fe fd5f 	bl	80005dc <HAL_GetTick>
 8001b1e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b20:	682b      	ldr	r3, [r5, #0]
 8001b22:	0199      	lsls	r1, r3, #6
 8001b24:	d41e      	bmi.n	8001b64 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b26:	6a22      	ldr	r2, [r4, #32]
 8001b28:	69e3      	ldr	r3, [r4, #28]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b2e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3a:	4c0d      	ldr	r4, [pc, #52]	; (8001b70 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b3c:	0852      	lsrs	r2, r2, #1
 8001b3e:	3a01      	subs	r2, #1
 8001b40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b44:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b46:	2301      	movs	r3, #1
 8001b48:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001b4a:	f7fe fd47 	bl	80005dc <HAL_GetTick>
 8001b4e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b50:	6823      	ldr	r3, [r4, #0]
 8001b52:	019a      	lsls	r2, r3, #6
 8001b54:	f53f aebc 	bmi.w	80018d0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b58:	f7fe fd40 	bl	80005dc <HAL_GetTick>
 8001b5c:	1b40      	subs	r0, r0, r5
 8001b5e:	2802      	cmp	r0, #2
 8001b60:	d9f6      	bls.n	8001b50 <HAL_RCC_OscConfig+0x2b4>
 8001b62:	e6e2      	b.n	800192a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b64:	f7fe fd3a 	bl	80005dc <HAL_GetTick>
 8001b68:	1bc0      	subs	r0, r0, r7
 8001b6a:	2802      	cmp	r0, #2
 8001b6c:	d9d8      	bls.n	8001b20 <HAL_RCC_OscConfig+0x284>
 8001b6e:	e6dc      	b.n	800192a <HAL_RCC_OscConfig+0x8e>
 8001b70:	40023800 	.word	0x40023800
 8001b74:	42470000 	.word	0x42470000
 8001b78:	42470e80 	.word	0x42470e80
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001b84:	f7fe fd2a 	bl	80005dc <HAL_GetTick>
 8001b88:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8a:	682b      	ldr	r3, [r5, #0]
 8001b8c:	019b      	lsls	r3, r3, #6
 8001b8e:	f57f ae9f 	bpl.w	80018d0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b92:	f7fe fd23 	bl	80005dc <HAL_GetTick>
 8001b96:	1b00      	subs	r0, r0, r4
 8001b98:	2802      	cmp	r0, #2
 8001b9a:	d9f6      	bls.n	8001b8a <HAL_RCC_OscConfig+0x2ee>
 8001b9c:	e6c5      	b.n	800192a <HAL_RCC_OscConfig+0x8e>
 8001b9e:	bf00      	nop

08001ba0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ba0:	4913      	ldr	r1, [pc, #76]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001ba2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ba4:	688b      	ldr	r3, [r1, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d003      	beq.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x16>
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d003      	beq.n	8001bba <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bb2:	4810      	ldr	r0, [pc, #64]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001bb4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001bb6:	4810      	ldr	r0, [pc, #64]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x58>)
 8001bb8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bba:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bbc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bbe:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bc0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc4:	bf14      	ite	ne
 8001bc6:	480c      	ldrne	r0, [pc, #48]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc8:	480a      	ldreq	r0, [pc, #40]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bca:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001bce:	bf18      	it	ne
 8001bd0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bd2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd6:	fba1 0100 	umull	r0, r1, r1, r0
 8001bda:	f7fe fb51 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bde:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x50>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001be6:	3301      	adds	r3, #1
 8001be8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001bea:	fbb0 f0f3 	udiv	r0, r0, r3
 8001bee:	bd08      	pop	{r3, pc}
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	00f42400 	.word	0x00f42400
 8001bf8:	007a1200 	.word	0x007a1200

08001bfc <HAL_RCC_ClockConfig>:
{
 8001bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c00:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001c02:	4604      	mov	r4, r0
 8001c04:	b910      	cbnz	r0, 8001c0c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001c06:	2001      	movs	r0, #1
 8001c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c0c:	4b44      	ldr	r3, [pc, #272]	; (8001d20 <HAL_RCC_ClockConfig+0x124>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	f002 020f 	and.w	r2, r2, #15
 8001c14:	428a      	cmp	r2, r1
 8001c16:	d328      	bcc.n	8001c6a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c18:	6821      	ldr	r1, [r4, #0]
 8001c1a:	078f      	lsls	r7, r1, #30
 8001c1c:	d42d      	bmi.n	8001c7a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1e:	07c8      	lsls	r0, r1, #31
 8001c20:	d440      	bmi.n	8001ca4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c22:	4b3f      	ldr	r3, [pc, #252]	; (8001d20 <HAL_RCC_ClockConfig+0x124>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	f002 020f 	and.w	r2, r2, #15
 8001c2a:	4295      	cmp	r5, r2
 8001c2c:	d366      	bcc.n	8001cfc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c2e:	6822      	ldr	r2, [r4, #0]
 8001c30:	0751      	lsls	r1, r2, #29
 8001c32:	d46c      	bmi.n	8001d0e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c34:	0713      	lsls	r3, r2, #28
 8001c36:	d507      	bpl.n	8001c48 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c38:	4a3a      	ldr	r2, [pc, #232]	; (8001d24 <HAL_RCC_ClockConfig+0x128>)
 8001c3a:	6921      	ldr	r1, [r4, #16]
 8001c3c:	6893      	ldr	r3, [r2, #8]
 8001c3e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001c42:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c46:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c48:	f7ff ffaa 	bl	8001ba0 <HAL_RCC_GetSysClockFreq>
 8001c4c:	4b35      	ldr	r3, [pc, #212]	; (8001d24 <HAL_RCC_ClockConfig+0x128>)
 8001c4e:	4a36      	ldr	r2, [pc, #216]	; (8001d28 <HAL_RCC_ClockConfig+0x12c>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c56:	5cd3      	ldrb	r3, [r2, r3]
 8001c58:	40d8      	lsrs	r0, r3
 8001c5a:	4b34      	ldr	r3, [pc, #208]	; (8001d2c <HAL_RCC_ClockConfig+0x130>)
 8001c5c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f002 fa3a 	bl	80040d8 <HAL_InitTick>
  return HAL_OK;
 8001c64:	2000      	movs	r0, #0
 8001c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	b2ca      	uxtb	r2, r1
 8001c6c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	4299      	cmp	r1, r3
 8001c76:	d1c6      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xa>
 8001c78:	e7ce      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1c>
 8001c7a:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c80:	bf1e      	ittt	ne
 8001c82:	689a      	ldrne	r2, [r3, #8]
 8001c84:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001c88:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c8a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c8c:	bf42      	ittt	mi
 8001c8e:	689a      	ldrmi	r2, [r3, #8]
 8001c90:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001c94:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	68a0      	ldr	r0, [r4, #8]
 8001c9a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c9e:	4302      	orrs	r2, r0
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	e7bc      	b.n	8001c1e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca4:	6862      	ldr	r2, [r4, #4]
 8001ca6:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <HAL_RCC_ClockConfig+0x128>)
 8001ca8:	2a01      	cmp	r2, #1
 8001caa:	d11d      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb2:	d0a8      	beq.n	8001c06 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cb4:	4e1b      	ldr	r6, [pc, #108]	; (8001d24 <HAL_RCC_ClockConfig+0x128>)
 8001cb6:	68b3      	ldr	r3, [r6, #8]
 8001cb8:	f023 0303 	bic.w	r3, r3, #3
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001cc0:	f7fe fc8c 	bl	80005dc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001cc8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cca:	68b3      	ldr	r3, [r6, #8]
 8001ccc:	6862      	ldr	r2, [r4, #4]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001cd6:	d0a4      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd8:	f7fe fc80 	bl	80005dc <HAL_GetTick>
 8001cdc:	1bc0      	subs	r0, r0, r7
 8001cde:	4540      	cmp	r0, r8
 8001ce0:	d9f3      	bls.n	8001cca <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001ce2:	2003      	movs	r0, #3
}
 8001ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ce8:	1e91      	subs	r1, r2, #2
 8001cea:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cec:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cee:	d802      	bhi.n	8001cf6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001cf4:	e7dd      	b.n	8001cb2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf6:	f013 0f02 	tst.w	r3, #2
 8001cfa:	e7da      	b.n	8001cb2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfc:	b2ea      	uxtb	r2, r5
 8001cfe:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	429d      	cmp	r5, r3
 8001d08:	f47f af7d 	bne.w	8001c06 <HAL_RCC_ClockConfig+0xa>
 8001d0c:	e78f      	b.n	8001c2e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d0e:	4905      	ldr	r1, [pc, #20]	; (8001d24 <HAL_RCC_ClockConfig+0x128>)
 8001d10:	68e0      	ldr	r0, [r4, #12]
 8001d12:	688b      	ldr	r3, [r1, #8]
 8001d14:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001d18:	4303      	orrs	r3, r0
 8001d1a:	608b      	str	r3, [r1, #8]
 8001d1c:	e78a      	b.n	8001c34 <HAL_RCC_ClockConfig+0x38>
 8001d1e:	bf00      	nop
 8001d20:	40023c00 	.word	0x40023c00
 8001d24:	40023800 	.word	0x40023800
 8001d28:	08005874 	.word	0x08005874
 8001d2c:	20000008 	.word	0x20000008

08001d30 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d30:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001d32:	4a05      	ldr	r2, [pc, #20]	; (8001d48 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001d3a:	5cd3      	ldrb	r3, [r2, r3]
 8001d3c:	4a03      	ldr	r2, [pc, #12]	; (8001d4c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001d3e:	6810      	ldr	r0, [r2, #0]
}
 8001d40:	40d8      	lsrs	r0, r3
 8001d42:	4770      	bx	lr
 8001d44:	40023800 	.word	0x40023800
 8001d48:	08005884 	.word	0x08005884
 8001d4c:	20000008 	.word	0x20000008

08001d50 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d50:	230f      	movs	r3, #15
 8001d52:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_RCC_GetClockConfig+0x34>)
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	f002 0203 	and.w	r2, r2, #3
 8001d5c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001d64:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001d6c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	08db      	lsrs	r3, r3, #3
 8001d72:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001d76:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d78:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <HAL_RCC_GetClockConfig+0x38>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	600b      	str	r3, [r1, #0]
 8001d82:	4770      	bx	lr
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40023c00 	.word	0x40023c00

08001d8c <HAL_TIM_Base_MspInit>:
 8001d8c:	4770      	bx	lr

08001d8e <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d8e:	6803      	ldr	r3, [r0, #0]
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d9e:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8001da0:	bf1e      	ittt	ne
 8001da2:	681a      	ldrne	r2, [r3, #0]
 8001da4:	f042 0201 	orrne.w	r2, r2, #1
 8001da8:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8001daa:	2000      	movs	r0, #0
 8001dac:	4770      	bx	lr

08001dae <HAL_TIM_OC_DelayElapsedCallback>:
 8001dae:	4770      	bx	lr

08001db0 <HAL_TIM_IC_CaptureCallback>:
 8001db0:	4770      	bx	lr

08001db2 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001db2:	4770      	bx	lr

08001db4 <HAL_TIM_TriggerCallback>:
 8001db4:	4770      	bx	lr

08001db6 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001db6:	6803      	ldr	r3, [r0, #0]
 8001db8:	691a      	ldr	r2, [r3, #16]
 8001dba:	0791      	lsls	r1, r2, #30
{
 8001dbc:	b510      	push	{r4, lr}
 8001dbe:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dc0:	d50e      	bpl.n	8001de0 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	0792      	lsls	r2, r2, #30
 8001dc6:	d50b      	bpl.n	8001de0 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dc8:	f06f 0202 	mvn.w	r2, #2
 8001dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dce:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dd0:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dd2:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dd4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dd6:	d077      	beq.n	8001ec8 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dd8:	f7ff ffea 	bl	8001db0 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001de0:	6823      	ldr	r3, [r4, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	0750      	lsls	r0, r2, #29
 8001de6:	d510      	bpl.n	8001e0a <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	0751      	lsls	r1, r2, #29
 8001dec:	d50d      	bpl.n	8001e0a <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dee:	f06f 0204 	mvn.w	r2, #4
 8001df2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001df4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001df6:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001df8:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dfc:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfe:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e00:	d068      	beq.n	8001ed4 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e02:	f7ff ffd5 	bl	8001db0 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e06:	2300      	movs	r3, #0
 8001e08:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e0a:	6823      	ldr	r3, [r4, #0]
 8001e0c:	691a      	ldr	r2, [r3, #16]
 8001e0e:	0712      	lsls	r2, r2, #28
 8001e10:	d50f      	bpl.n	8001e32 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	0710      	lsls	r0, r2, #28
 8001e16:	d50c      	bpl.n	8001e32 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e18:	f06f 0208 	mvn.w	r2, #8
 8001e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e1e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e20:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e22:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e24:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e26:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e28:	d05a      	beq.n	8001ee0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e2a:	f7ff ffc1 	bl	8001db0 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e32:	6823      	ldr	r3, [r4, #0]
 8001e34:	691a      	ldr	r2, [r3, #16]
 8001e36:	06d2      	lsls	r2, r2, #27
 8001e38:	d510      	bpl.n	8001e5c <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	06d0      	lsls	r0, r2, #27
 8001e3e:	d50d      	bpl.n	8001e5c <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e40:	f06f 0210 	mvn.w	r2, #16
 8001e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e46:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e48:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e4a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e4e:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e50:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e52:	d04b      	beq.n	8001eec <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e54:	f7ff ffac 	bl	8001db0 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	07d1      	lsls	r1, r2, #31
 8001e62:	d508      	bpl.n	8001e76 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	07d2      	lsls	r2, r2, #31
 8001e68:	d505      	bpl.n	8001e76 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e6a:	f06f 0201 	mvn.w	r2, #1
 8001e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e70:	4620      	mov	r0, r4
 8001e72:	f001 ff89 	bl	8003d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e76:	6823      	ldr	r3, [r4, #0]
 8001e78:	691a      	ldr	r2, [r3, #16]
 8001e7a:	0610      	lsls	r0, r2, #24
 8001e7c:	d508      	bpl.n	8001e90 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	0611      	lsls	r1, r2, #24
 8001e82:	d505      	bpl.n	8001e90 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f000 f8b7 	bl	8001ffe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	691a      	ldr	r2, [r3, #16]
 8001e94:	0652      	lsls	r2, r2, #25
 8001e96:	d508      	bpl.n	8001eaa <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	0650      	lsls	r0, r2, #25
 8001e9c:	d505      	bpl.n	8001eaa <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	f7ff ff85 	bl	8001db4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	691a      	ldr	r2, [r3, #16]
 8001eae:	0691      	lsls	r1, r2, #26
 8001eb0:	d522      	bpl.n	8001ef8 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	0692      	lsls	r2, r2, #26
 8001eb6:	d51f      	bpl.n	8001ef8 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eb8:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ebc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ebe:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001ec4:	f000 b89a 	b.w	8001ffc <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec8:	f7ff ff71 	bl	8001dae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f7ff ff70 	bl	8001db2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ed2:	e783      	b.n	8001ddc <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed4:	f7ff ff6b 	bl	8001dae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed8:	4620      	mov	r0, r4
 8001eda:	f7ff ff6a 	bl	8001db2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ede:	e792      	b.n	8001e06 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee0:	f7ff ff65 	bl	8001dae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f7ff ff64 	bl	8001db2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001eea:	e7a0      	b.n	8001e2e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eec:	f7ff ff5f 	bl	8001dae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	f7ff ff5e 	bl	8001db2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ef6:	e7af      	b.n	8001e58 <HAL_TIM_IRQHandler+0xa2>
 8001ef8:	bd10      	pop	{r4, pc}
	...

08001efc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001efc:	4a30      	ldr	r2, [pc, #192]	; (8001fc0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001efe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f00:	4290      	cmp	r0, r2
 8001f02:	d012      	beq.n	8001f2a <TIM_Base_SetConfig+0x2e>
 8001f04:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f08:	d00f      	beq.n	8001f2a <TIM_Base_SetConfig+0x2e>
 8001f0a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001f0e:	4290      	cmp	r0, r2
 8001f10:	d00b      	beq.n	8001f2a <TIM_Base_SetConfig+0x2e>
 8001f12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f16:	4290      	cmp	r0, r2
 8001f18:	d007      	beq.n	8001f2a <TIM_Base_SetConfig+0x2e>
 8001f1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f1e:	4290      	cmp	r0, r2
 8001f20:	d003      	beq.n	8001f2a <TIM_Base_SetConfig+0x2e>
 8001f22:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001f26:	4290      	cmp	r0, r2
 8001f28:	d119      	bne.n	8001f5e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001f2a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001f30:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f32:	4a23      	ldr	r2, [pc, #140]	; (8001fc0 <TIM_Base_SetConfig+0xc4>)
 8001f34:	4290      	cmp	r0, r2
 8001f36:	d029      	beq.n	8001f8c <TIM_Base_SetConfig+0x90>
 8001f38:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f3c:	d026      	beq.n	8001f8c <TIM_Base_SetConfig+0x90>
 8001f3e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001f42:	4290      	cmp	r0, r2
 8001f44:	d022      	beq.n	8001f8c <TIM_Base_SetConfig+0x90>
 8001f46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f4a:	4290      	cmp	r0, r2
 8001f4c:	d01e      	beq.n	8001f8c <TIM_Base_SetConfig+0x90>
 8001f4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f52:	4290      	cmp	r0, r2
 8001f54:	d01a      	beq.n	8001f8c <TIM_Base_SetConfig+0x90>
 8001f56:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001f5a:	4290      	cmp	r0, r2
 8001f5c:	d016      	beq.n	8001f8c <TIM_Base_SetConfig+0x90>
 8001f5e:	4a19      	ldr	r2, [pc, #100]	; (8001fc4 <TIM_Base_SetConfig+0xc8>)
 8001f60:	4290      	cmp	r0, r2
 8001f62:	d013      	beq.n	8001f8c <TIM_Base_SetConfig+0x90>
 8001f64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d00f      	beq.n	8001f8c <TIM_Base_SetConfig+0x90>
 8001f6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f70:	4290      	cmp	r0, r2
 8001f72:	d00b      	beq.n	8001f8c <TIM_Base_SetConfig+0x90>
 8001f74:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001f78:	4290      	cmp	r0, r2
 8001f7a:	d007      	beq.n	8001f8c <TIM_Base_SetConfig+0x90>
 8001f7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f80:	4290      	cmp	r0, r2
 8001f82:	d003      	beq.n	8001f8c <TIM_Base_SetConfig+0x90>
 8001f84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f88:	4290      	cmp	r0, r2
 8001f8a:	d103      	bne.n	8001f94 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f8c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f92:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f94:	694a      	ldr	r2, [r1, #20]
 8001f96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f9a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001f9c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f9e:	688b      	ldr	r3, [r1, #8]
 8001fa0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fa2:	680b      	ldr	r3, [r1, #0]
 8001fa4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <TIM_Base_SetConfig+0xc4>)
 8001fa8:	4298      	cmp	r0, r3
 8001faa:	d003      	beq.n	8001fb4 <TIM_Base_SetConfig+0xb8>
 8001fac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fb0:	4298      	cmp	r0, r3
 8001fb2:	d101      	bne.n	8001fb8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fb4:	690b      	ldr	r3, [r1, #16]
 8001fb6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	6143      	str	r3, [r0, #20]
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40010000 	.word	0x40010000
 8001fc4:	40014000 	.word	0x40014000

08001fc8 <HAL_TIM_Base_Init>:
{
 8001fc8:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001fca:	4604      	mov	r4, r0
 8001fcc:	b1a0      	cbz	r0, 8001ff8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001fce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001fd2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fd6:	b91b      	cbnz	r3, 8001fe0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001fd8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001fdc:	f7ff fed6 	bl	8001d8c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fe6:	6820      	ldr	r0, [r4, #0]
 8001fe8:	1d21      	adds	r1, r4, #4
 8001fea:	f7ff ff87 	bl	8001efc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ff8:	2001      	movs	r0, #1
}
 8001ffa:	bd10      	pop	{r4, pc}

08001ffc <HAL_TIMEx_CommutCallback>:
 8001ffc:	4770      	bx	lr

08001ffe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ffe:	4770      	bx	lr

08002000 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002000:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8002004:	b113      	cbz	r3, 800200c <osKernelInitialize+0xc>
    stat = osErrorISR;
 8002006:	f06f 0005 	mvn.w	r0, #5
 800200a:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800200c:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f8      	bne.n	8002006 <osKernelInitialize+0x6>
 8002014:	4b07      	ldr	r3, [pc, #28]	; (8002034 <osKernelInitialize+0x34>)
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	2802      	cmp	r0, #2
 800201a:	d106      	bne.n	800202a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800201c:	f3ef 8311 	mrs	r3, BASEPRI
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f0      	bne.n	8002006 <osKernelInitialize+0x6>
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8002028:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 800202a:	2800      	cmp	r0, #0
 800202c:	d1fa      	bne.n	8002024 <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 800202e:	2201      	movs	r2, #1
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	4770      	bx	lr
 8002034:	200008e0 	.word	0x200008e0

08002038 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002038:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800203a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800203e:	b113      	cbz	r3, 8002046 <osKernelStart+0xe>
    stat = osErrorISR;
 8002040:	f06f 0005 	mvn.w	r0, #5
 8002044:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002046:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 800204a:	2c00      	cmp	r4, #0
 800204c:	d1f8      	bne.n	8002040 <osKernelStart+0x8>
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <osKernelStart+0x3c>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	2a02      	cmp	r2, #2
 8002054:	d106      	bne.n	8002064 <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002056:	f3ef 8311 	mrs	r3, BASEPRI
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
      KernelState = osKernelRunning;
      vTaskStartScheduler();
      stat = osOK;
    } else {
      stat = osError;
 800205e:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8002062:	bd10      	pop	{r4, pc}
    if (KernelState == osKernelReady) {
 8002064:	2a01      	cmp	r2, #1
 8002066:	d1fa      	bne.n	800205e <osKernelStart+0x26>
      KernelState = osKernelRunning;
 8002068:	2202      	movs	r2, #2
 800206a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800206c:	f001 f83a 	bl	80030e4 <vTaskStartScheduler>
      stat = osOK;
 8002070:	4620      	mov	r0, r4
 8002072:	bd10      	pop	{r4, pc}
 8002074:	200008e0 	.word	0x200008e0

08002078 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800207a:	b087      	sub	sp, #28
 800207c:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800207e:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002080:	460b      	mov	r3, r1
  hTask = NULL;
 8002082:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002084:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8002088:	bb72      	cbnz	r2, 80020e8 <osThreadNew+0x70>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800208a:	f3ef 8210 	mrs	r2, PRIMASK
 800208e:	bb5a      	cbnz	r2, 80020e8 <osThreadNew+0x70>
 8002090:	4a29      	ldr	r2, [pc, #164]	; (8002138 <osThreadNew+0xc0>)
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	2a02      	cmp	r2, #2
 8002096:	d102      	bne.n	800209e <osThreadNew+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002098:	f3ef 8211 	mrs	r2, BASEPRI
 800209c:	bb22      	cbnz	r2, 80020e8 <osThreadNew+0x70>
 800209e:	b318      	cbz	r0, 80020e8 <osThreadNew+0x70>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 80020a0:	2200      	movs	r2, #0
 80020a2:	f88d 2013 	strb.w	r2, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 80020a6:	2c00      	cmp	r4, #0
 80020a8:	d03d      	beq.n	8002126 <osThreadNew+0xae>
      if (attr->name != NULL) {
 80020aa:	6821      	ldr	r1, [r4, #0]
 80020ac:	b909      	cbnz	r1, 80020b2 <osThreadNew+0x3a>
    name  = &empty;
 80020ae:	f10d 0113 	add.w	r1, sp, #19
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80020b2:	69a5      	ldr	r5, [r4, #24]
 80020b4:	2d00      	cmp	r5, #0
 80020b6:	bf08      	it	eq
 80020b8:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80020ba:	1e6a      	subs	r2, r5, #1
 80020bc:	2a37      	cmp	r2, #55	; 0x37
 80020be:	462f      	mov	r7, r5
 80020c0:	d837      	bhi.n	8002132 <osThreadNew+0xba>
 80020c2:	6862      	ldr	r2, [r4, #4]
 80020c4:	07d2      	lsls	r2, r2, #31
 80020c6:	d434      	bmi.n	8002132 <osThreadNew+0xba>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80020c8:	6966      	ldr	r6, [r4, #20]
 80020ca:	b186      	cbz	r6, 80020ee <osThreadNew+0x76>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80020cc:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80020ce:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80020d2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80020d6:	f1be 0f00 	cmp.w	lr, #0
 80020da:	d00b      	beq.n	80020f4 <osThreadNew+0x7c>
 80020dc:	f1bc 0f53 	cmp.w	ip, #83	; 0x53
 80020e0:	d902      	bls.n	80020e8 <osThreadNew+0x70>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80020e2:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80020e4:	b104      	cbz	r4, 80020e8 <osThreadNew+0x70>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80020e6:	b9b6      	cbnz	r6, 8002116 <osThreadNew+0x9e>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80020e8:	9805      	ldr	r0, [sp, #20]
}
 80020ea:	b007      	add	sp, #28
 80020ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 80020ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020f2:	e7ec      	b.n	80020ce <osThreadNew+0x56>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80020f4:	f1bc 0f00 	cmp.w	ip, #0
 80020f8:	d1f6      	bne.n	80020e8 <osThreadNew+0x70>
      if (mem == 0) {
 80020fa:	6924      	ldr	r4, [r4, #16]
 80020fc:	2c00      	cmp	r4, #0
 80020fe:	d1f3      	bne.n	80020e8 <osThreadNew+0x70>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002100:	ac05      	add	r4, sp, #20
 8002102:	9401      	str	r4, [sp, #4]
 8002104:	9700      	str	r7, [sp, #0]
 8002106:	b292      	uxth	r2, r2
 8002108:	f000 ffbf 	bl	800308a <xTaskCreate>
 800210c:	2801      	cmp	r0, #1
          hTask = NULL;
 800210e:	bf1c      	itt	ne
 8002110:	2300      	movne	r3, #0
 8002112:	9305      	strne	r3, [sp, #20]
 8002114:	e7e8      	b.n	80020e8 <osThreadNew+0x70>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002116:	f8cd e008 	str.w	lr, [sp, #8]
 800211a:	9401      	str	r4, [sp, #4]
 800211c:	9500      	str	r5, [sp, #0]
 800211e:	f000 ff7d 	bl	800301c <xTaskCreateStatic>
 8002122:	9005      	str	r0, [sp, #20]
 8002124:	e7e0      	b.n	80020e8 <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 8002126:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 8002128:	f44f 7200 	mov.w	r2, #512	; 0x200
    name  = &empty;
 800212c:	f10d 0113 	add.w	r1, sp, #19
 8002130:	e7e6      	b.n	8002100 <osThreadNew+0x88>
        return (NULL);
 8002132:	2000      	movs	r0, #0
 8002134:	e7d9      	b.n	80020ea <osThreadNew+0x72>
 8002136:	bf00      	nop
 8002138:	200008e0 	.word	0x200008e0

0800213c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800213c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800213e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8002142:	b113      	cbz	r3, 800214a <osDelay+0xe>
    stat = osErrorISR;
 8002144:	f06f 0005 	mvn.w	r0, #5
 8002148:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800214a:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f8      	bne.n	8002144 <osDelay+0x8>
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <osDelay+0x30>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d103      	bne.n	8002162 <osDelay+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800215a:	f3ef 8311 	mrs	r3, BASEPRI
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <osDelay+0x8>
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8002162:	b110      	cbz	r0, 800216a <osDelay+0x2e>
      vTaskDelay(ticks);
 8002164:	f001 f914 	bl	8003390 <vTaskDelay>
    stat = osOK;
 8002168:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 800216a:	bd08      	pop	{r3, pc}
 800216c:	200008e0 	.word	0x200008e0

08002170 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <vApplicationGetIdleTaskMemory+0x10>)
 8002172:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002174:	4b03      	ldr	r3, [pc, #12]	; (8002184 <vApplicationGetIdleTaskMemory+0x14>)
 8002176:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002178:	f44f 7300 	mov.w	r3, #512	; 0x200
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	4770      	bx	lr
 8002180:	2000088c 	.word	0x2000088c
 8002184:	2000008c 	.word	0x2000008c

08002188 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002188:	4b03      	ldr	r3, [pc, #12]	; (8002198 <vApplicationGetTimerTaskMemory+0x10>)
 800218a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800218c:	4b03      	ldr	r3, [pc, #12]	; (800219c <vApplicationGetTimerTaskMemory+0x14>)
 800218e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	4770      	bx	lr
 8002198:	200018e4 	.word	0x200018e4
 800219c:	200008e4 	.word	0x200008e4

080021a0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021a0:	f100 0308 	add.w	r3, r0, #8
 80021a4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021a6:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021aa:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021ac:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021ae:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021b0:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021b2:	6003      	str	r3, [r0, #0]
 80021b4:	4770      	bx	lr

080021b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	6103      	str	r3, [r0, #16]
 80021ba:	4770      	bx	lr

080021bc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80021bc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80021be:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80021c8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80021ca:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80021cc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80021ce:	3301      	adds	r3, #1
 80021d0:	6003      	str	r3, [r0, #0]
 80021d2:	4770      	bx	lr

080021d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021d4:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021d6:	1c53      	adds	r3, r2, #1
{
 80021d8:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80021da:	d10a      	bne.n	80021f2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021dc:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021e2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80021e4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80021e6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80021e8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80021ea:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80021ec:	3301      	adds	r3, #1
 80021ee:	6003      	str	r3, [r0, #0]
 80021f0:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021f2:	f100 0308 	add.w	r3, r0, #8
 80021f6:	685c      	ldr	r4, [r3, #4]
 80021f8:	6825      	ldr	r5, [r4, #0]
 80021fa:	42aa      	cmp	r2, r5
 80021fc:	d3ef      	bcc.n	80021de <vListInsert+0xa>
 80021fe:	4623      	mov	r3, r4
 8002200:	e7f9      	b.n	80021f6 <vListInsert+0x22>

08002202 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002202:	6841      	ldr	r1, [r0, #4]
 8002204:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002206:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002208:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800220a:	6882      	ldr	r2, [r0, #8]
 800220c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800220e:	6859      	ldr	r1, [r3, #4]
 8002210:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002212:	bf08      	it	eq
 8002214:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002216:	2200      	movs	r2, #0
 8002218:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	3a01      	subs	r2, #1
 800221e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002220:	6818      	ldr	r0, [r3, #0]
}
 8002222:	4770      	bx	lr

08002224 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002224:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800222a:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <prvTaskExitError+0x3c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	3301      	adds	r3, #1
 8002230:	d008      	beq.n	8002244 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002236:	f383 8811 	msr	BASEPRI, r3
 800223a:	f3bf 8f6f 	isb	sy
 800223e:	f3bf 8f4f 	dsb	sy
 8002242:	e7fe      	b.n	8002242 <prvTaskExitError+0x1e>
 8002244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002248:	f383 8811 	msr	BASEPRI, r3
 800224c:	f3bf 8f6f 	isb	sy
 8002250:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002254:	9b01      	ldr	r3, [sp, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0fc      	beq.n	8002254 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800225a:	b002      	add	sp, #8
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000004 	.word	0x20000004

08002264 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002264:	4808      	ldr	r0, [pc, #32]	; (8002288 <prvPortStartFirstTask+0x24>)
 8002266:	6800      	ldr	r0, [r0, #0]
 8002268:	6800      	ldr	r0, [r0, #0]
 800226a:	f380 8808 	msr	MSP, r0
 800226e:	f04f 0000 	mov.w	r0, #0
 8002272:	f380 8814 	msr	CONTROL, r0
 8002276:	b662      	cpsie	i
 8002278:	b661      	cpsie	f
 800227a:	f3bf 8f4f 	dsb	sy
 800227e:	f3bf 8f6f 	isb	sy
 8002282:	df00      	svc	0
 8002284:	bf00      	nop
 8002286:	0000      	.short	0x0000
 8002288:	e000ed08 	.word	0xe000ed08

0800228c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800228c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800229c <vPortEnableVFP+0x10>
 8002290:	6801      	ldr	r1, [r0, #0]
 8002292:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002296:	6001      	str	r1, [r0, #0]
 8002298:	4770      	bx	lr
 800229a:	0000      	.short	0x0000
 800229c:	e000ed88 	.word	0xe000ed88

080022a0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80022a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022a4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80022a8:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <pxPortInitialiseStack+0x28>)
 80022aa:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80022ae:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80022b2:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80022b6:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80022ba:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80022be:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80022c2:	3844      	subs	r0, #68	; 0x44
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	08002225 	.word	0x08002225
 80022cc:	00000000 	.word	0x00000000

080022d0 <SVC_Handler>:
	__asm volatile (
 80022d0:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <pxCurrentTCBConst2>)
 80022d2:	6819      	ldr	r1, [r3, #0]
 80022d4:	6808      	ldr	r0, [r1, #0]
 80022d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022da:	f380 8809 	msr	PSP, r0
 80022de:	f3bf 8f6f 	isb	sy
 80022e2:	f04f 0000 	mov.w	r0, #0
 80022e6:	f380 8811 	msr	BASEPRI, r0
 80022ea:	4770      	bx	lr
 80022ec:	f3af 8000 	nop.w

080022f0 <pxCurrentTCBConst2>:
 80022f0:	20005558 	.word	0x20005558

080022f4 <vPortEnterCritical>:
 80022f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f8:	f383 8811 	msr	BASEPRI, r3
 80022fc:	f3bf 8f6f 	isb	sy
 8002300:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002304:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <vPortEnterCritical+0x3c>)
 8002306:	6813      	ldr	r3, [r2, #0]
 8002308:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800230a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800230c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800230e:	d10d      	bne.n	800232c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <vPortEnterCritical+0x40>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002318:	d008      	beq.n	800232c <vPortEnterCritical+0x38>
 800231a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231e:	f383 8811 	msr	BASEPRI, r3
 8002322:	f3bf 8f6f 	isb	sy
 8002326:	f3bf 8f4f 	dsb	sy
 800232a:	e7fe      	b.n	800232a <vPortEnterCritical+0x36>
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20000004 	.word	0x20000004
 8002334:	e000ed04 	.word	0xe000ed04

08002338 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002338:	4a08      	ldr	r2, [pc, #32]	; (800235c <vPortExitCritical+0x24>)
 800233a:	6813      	ldr	r3, [r2, #0]
 800233c:	b943      	cbnz	r3, 8002350 <vPortExitCritical+0x18>
 800233e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002342:	f383 8811 	msr	BASEPRI, r3
 8002346:	f3bf 8f6f 	isb	sy
 800234a:	f3bf 8f4f 	dsb	sy
 800234e:	e7fe      	b.n	800234e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002350:	3b01      	subs	r3, #1
 8002352:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002354:	b90b      	cbnz	r3, 800235a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002356:	f383 8811 	msr	BASEPRI, r3
 800235a:	4770      	bx	lr
 800235c:	20000004 	.word	0x20000004

08002360 <PendSV_Handler>:
	__asm volatile
 8002360:	f3ef 8009 	mrs	r0, PSP
 8002364:	f3bf 8f6f 	isb	sy
 8002368:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <pxCurrentTCBConst>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	f01e 0f10 	tst.w	lr, #16
 8002370:	bf08      	it	eq
 8002372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800237a:	6010      	str	r0, [r2, #0]
 800237c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002380:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002384:	f380 8811 	msr	BASEPRI, r0
 8002388:	f3bf 8f4f 	dsb	sy
 800238c:	f3bf 8f6f 	isb	sy
 8002390:	f001 f822 	bl	80033d8 <vTaskSwitchContext>
 8002394:	f04f 0000 	mov.w	r0, #0
 8002398:	f380 8811 	msr	BASEPRI, r0
 800239c:	bc09      	pop	{r0, r3}
 800239e:	6819      	ldr	r1, [r3, #0]
 80023a0:	6808      	ldr	r0, [r1, #0]
 80023a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023a6:	f01e 0f10 	tst.w	lr, #16
 80023aa:	bf08      	it	eq
 80023ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80023b0:	f380 8809 	msr	PSP, r0
 80023b4:	f3bf 8f6f 	isb	sy
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	f3af 8000 	nop.w

080023c0 <pxCurrentTCBConst>:
 80023c0:	20005558 	.word	0x20005558

080023c4 <SysTick_Handler>:
{
 80023c4:	b508      	push	{r3, lr}
	__asm volatile
 80023c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ca:	f383 8811 	msr	BASEPRI, r3
 80023ce:	f3bf 8f6f 	isb	sy
 80023d2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80023d6:	f000 fed7 	bl	8003188 <xTaskIncrementTick>
 80023da:	b118      	cbz	r0, 80023e4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80023dc:	4b03      	ldr	r3, [pc, #12]	; (80023ec <SysTick_Handler+0x28>)
 80023de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023e2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80023e4:	2300      	movs	r3, #0
 80023e6:	f383 8811 	msr	BASEPRI, r3
 80023ea:	bd08      	pop	{r3, pc}
 80023ec:	e000ed04 	.word	0xe000ed04

080023f0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80023f0:	4a08      	ldr	r2, [pc, #32]	; (8002414 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80023f2:	4909      	ldr	r1, [pc, #36]	; (8002418 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80023f8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <vPortSetupTimerInterrupt+0x2c>)
 80023fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	fbb3 f3f1 	udiv	r3, r3, r1
 8002406:	4906      	ldr	r1, [pc, #24]	; (8002420 <vPortSetupTimerInterrupt+0x30>)
 8002408:	3b01      	subs	r3, #1
 800240a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800240c:	2307      	movs	r3, #7
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000e010 	.word	0xe000e010
 8002418:	e000e018 	.word	0xe000e018
 800241c:	20000008 	.word	0x20000008
 8002420:	e000e014 	.word	0xe000e014

08002424 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002424:	4b39      	ldr	r3, [pc, #228]	; (800250c <xPortStartScheduler+0xe8>)
 8002426:	4a3a      	ldr	r2, [pc, #232]	; (8002510 <xPortStartScheduler+0xec>)
{
 8002428:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800242a:	6819      	ldr	r1, [r3, #0]
 800242c:	4291      	cmp	r1, r2
 800242e:	d108      	bne.n	8002442 <xPortStartScheduler+0x1e>
	__asm volatile
 8002430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	e7fe      	b.n	8002440 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b33      	ldr	r3, [pc, #204]	; (8002514 <xPortStartScheduler+0xf0>)
 8002446:	429a      	cmp	r2, r3
 8002448:	d108      	bne.n	800245c <xPortStartScheduler+0x38>
 800244a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244e:	f383 8811 	msr	BASEPRI, r3
 8002452:	f3bf 8f6f 	isb	sy
 8002456:	f3bf 8f4f 	dsb	sy
 800245a:	e7fe      	b.n	800245a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800245c:	4b2e      	ldr	r3, [pc, #184]	; (8002518 <xPortStartScheduler+0xf4>)
 800245e:	781a      	ldrb	r2, [r3, #0]
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002464:	22ff      	movs	r2, #255	; 0xff
 8002466:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002468:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800246a:	4a2c      	ldr	r2, [pc, #176]	; (800251c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800246c:	b2db      	uxtb	r3, r3
 800246e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002472:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002476:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800247a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800247c:	4b28      	ldr	r3, [pc, #160]	; (8002520 <xPortStartScheduler+0xfc>)
 800247e:	2207      	movs	r2, #7
 8002480:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002482:	2100      	movs	r1, #0
 8002484:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002488:	0600      	lsls	r0, r0, #24
 800248a:	f102 34ff 	add.w	r4, r2, #4294967295
 800248e:	d40d      	bmi.n	80024ac <xPortStartScheduler+0x88>
 8002490:	b101      	cbz	r1, 8002494 <xPortStartScheduler+0x70>
 8002492:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	2a03      	cmp	r2, #3
 8002498:	d011      	beq.n	80024be <xPortStartScheduler+0x9a>
 800249a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249e:	f383 8811 	msr	BASEPRI, r3
 80024a2:	f3bf 8f6f 	isb	sy
 80024a6:	f3bf 8f4f 	dsb	sy
 80024aa:	e7fe      	b.n	80024aa <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80024ac:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80024b0:	0052      	lsls	r2, r2, #1
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	f88d 2003 	strb.w	r2, [sp, #3]
 80024b8:	2101      	movs	r1, #1
 80024ba:	4622      	mov	r2, r4
 80024bc:	e7e2      	b.n	8002484 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80024be:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80024c0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80024c4:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80024c6:	9b01      	ldr	r3, [sp, #4]
 80024c8:	4a13      	ldr	r2, [pc, #76]	; (8002518 <xPortStartScheduler+0xf4>)
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80024ce:	4b15      	ldr	r3, [pc, #84]	; (8002524 <xPortStartScheduler+0x100>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80024d6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80024de:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80024e0:	f7ff ff86 	bl	80023f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80024e4:	4b10      	ldr	r3, [pc, #64]	; (8002528 <xPortStartScheduler+0x104>)
 80024e6:	2400      	movs	r4, #0
 80024e8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80024ea:	f7ff fecf 	bl	800228c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80024ee:	4a0f      	ldr	r2, [pc, #60]	; (800252c <xPortStartScheduler+0x108>)
 80024f0:	6813      	ldr	r3, [r2, #0]
 80024f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80024f6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80024f8:	f7ff feb4 	bl	8002264 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80024fc:	f000 ff6c 	bl	80033d8 <vTaskSwitchContext>
	prvTaskExitError();
 8002500:	f7ff fe90 	bl	8002224 <prvTaskExitError>
}
 8002504:	4620      	mov	r0, r4
 8002506:	b002      	add	sp, #8
 8002508:	bd10      	pop	{r4, pc}
 800250a:	bf00      	nop
 800250c:	e000ed00 	.word	0xe000ed00
 8002510:	410fc271 	.word	0x410fc271
 8002514:	410fc270 	.word	0x410fc270
 8002518:	e000e400 	.word	0xe000e400
 800251c:	20001938 	.word	0x20001938
 8002520:	2000193c 	.word	0x2000193c
 8002524:	e000ed20 	.word	0xe000ed20
 8002528:	20000004 	.word	0x20000004
 800252c:	e000ef34 	.word	0xe000ef34

08002530 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002530:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002534:	2b0f      	cmp	r3, #15
 8002536:	d90e      	bls.n	8002556 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002538:	4a10      	ldr	r2, [pc, #64]	; (800257c <vPortValidateInterruptPriority+0x4c>)
 800253a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800253c:	4a10      	ldr	r2, [pc, #64]	; (8002580 <vPortValidateInterruptPriority+0x50>)
 800253e:	7812      	ldrb	r2, [r2, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d908      	bls.n	8002556 <vPortValidateInterruptPriority+0x26>
 8002544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002548:	f383 8811 	msr	BASEPRI, r3
 800254c:	f3bf 8f6f 	isb	sy
 8002550:	f3bf 8f4f 	dsb	sy
 8002554:	e7fe      	b.n	8002554 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002556:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <vPortValidateInterruptPriority+0x54>)
 8002558:	4a0b      	ldr	r2, [pc, #44]	; (8002588 <vPortValidateInterruptPriority+0x58>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002562:	4293      	cmp	r3, r2
 8002564:	d908      	bls.n	8002578 <vPortValidateInterruptPriority+0x48>
 8002566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256a:	f383 8811 	msr	BASEPRI, r3
 800256e:	f3bf 8f6f 	isb	sy
 8002572:	f3bf 8f4f 	dsb	sy
 8002576:	e7fe      	b.n	8002576 <vPortValidateInterruptPriority+0x46>
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	e000e3f0 	.word	0xe000e3f0
 8002580:	20001938 	.word	0x20001938
 8002584:	e000ed0c 	.word	0xe000ed0c
 8002588:	2000193c 	.word	0x2000193c

0800258c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800258c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800258e:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <prvInsertBlockIntoFreeList+0x40>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	4282      	cmp	r2, r0
 8002594:	d318      	bcc.n	80025c8 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002596:	685c      	ldr	r4, [r3, #4]
 8002598:	1919      	adds	r1, r3, r4
 800259a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800259c:	bf01      	itttt	eq
 800259e:	6841      	ldreq	r1, [r0, #4]
 80025a0:	4618      	moveq	r0, r3
 80025a2:	1909      	addeq	r1, r1, r4
 80025a4:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80025a6:	6844      	ldr	r4, [r0, #4]
 80025a8:	1901      	adds	r1, r0, r4
 80025aa:	428a      	cmp	r2, r1
 80025ac:	d107      	bne.n	80025be <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80025ae:	4908      	ldr	r1, [pc, #32]	; (80025d0 <prvInsertBlockIntoFreeList+0x44>)
 80025b0:	6809      	ldr	r1, [r1, #0]
 80025b2:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80025b4:	bf1f      	itttt	ne
 80025b6:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80025b8:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80025ba:	1909      	addne	r1, r1, r4
 80025bc:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80025be:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80025c0:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80025c2:	bf18      	it	ne
 80025c4:	6018      	strne	r0, [r3, #0]
 80025c6:	bd10      	pop	{r4, pc}
 80025c8:	4613      	mov	r3, r2
 80025ca:	e7e1      	b.n	8002590 <prvInsertBlockIntoFreeList+0x4>
 80025cc:	20005550 	.word	0x20005550
 80025d0:	20001940 	.word	0x20001940

080025d4 <pvPortMalloc>:
{
 80025d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025d8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80025da:	f000 fdc7 	bl	800316c <vTaskSuspendAll>
		if( pxEnd == NULL )
 80025de:	493e      	ldr	r1, [pc, #248]	; (80026d8 <pvPortMalloc+0x104>)
 80025e0:	4d3e      	ldr	r5, [pc, #248]	; (80026dc <pvPortMalloc+0x108>)
 80025e2:	680b      	ldr	r3, [r1, #0]
 80025e4:	bb0b      	cbnz	r3, 800262a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80025e6:	4a3e      	ldr	r2, [pc, #248]	; (80026e0 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80025e8:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80025ea:	bf1f      	itttt	ne
 80025ec:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80025ee:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80025f2:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 80025f6:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80025f8:	bf14      	ite	ne
 80025fa:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80025fc:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002600:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002602:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002604:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002608:	4e36      	ldr	r6, [pc, #216]	; (80026e4 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 800260a:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800260c:	2000      	movs	r0, #0
 800260e:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002610:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8002612:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002614:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002616:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002618:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800261a:	4b33      	ldr	r3, [pc, #204]	; (80026e8 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800261c:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800261e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002620:	4b32      	ldr	r3, [pc, #200]	; (80026ec <pvPortMalloc+0x118>)
 8002622:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002624:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002628:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800262a:	682f      	ldr	r7, [r5, #0]
 800262c:	4227      	tst	r7, r4
 800262e:	d116      	bne.n	800265e <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8002630:	2c00      	cmp	r4, #0
 8002632:	d041      	beq.n	80026b8 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8002634:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002638:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800263a:	bf1c      	itt	ne
 800263c:	f023 0307 	bicne.w	r3, r3, #7
 8002640:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002642:	b163      	cbz	r3, 800265e <pvPortMalloc+0x8a>
 8002644:	4a29      	ldr	r2, [pc, #164]	; (80026ec <pvPortMalloc+0x118>)
 8002646:	6816      	ldr	r6, [r2, #0]
 8002648:	42b3      	cmp	r3, r6
 800264a:	4690      	mov	r8, r2
 800264c:	d807      	bhi.n	800265e <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800264e:	4a25      	ldr	r2, [pc, #148]	; (80026e4 <pvPortMalloc+0x110>)
 8002650:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002652:	6868      	ldr	r0, [r5, #4]
 8002654:	4283      	cmp	r3, r0
 8002656:	d804      	bhi.n	8002662 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002658:	6809      	ldr	r1, [r1, #0]
 800265a:	428d      	cmp	r5, r1
 800265c:	d107      	bne.n	800266e <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800265e:	2400      	movs	r4, #0
 8002660:	e02a      	b.n	80026b8 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002662:	682c      	ldr	r4, [r5, #0]
 8002664:	2c00      	cmp	r4, #0
 8002666:	d0f7      	beq.n	8002658 <pvPortMalloc+0x84>
 8002668:	462a      	mov	r2, r5
 800266a:	4625      	mov	r5, r4
 800266c:	e7f1      	b.n	8002652 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800266e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002670:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002672:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002674:	1ac2      	subs	r2, r0, r3
 8002676:	2a10      	cmp	r2, #16
 8002678:	d90f      	bls.n	800269a <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800267a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800267c:	0741      	lsls	r1, r0, #29
 800267e:	d008      	beq.n	8002692 <pvPortMalloc+0xbe>
 8002680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002684:	f383 8811 	msr	BASEPRI, r3
 8002688:	f3bf 8f6f 	isb	sy
 800268c:	f3bf 8f4f 	dsb	sy
 8002690:	e7fe      	b.n	8002690 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002692:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002694:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002696:	f7ff ff79 	bl	800258c <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800269a:	4913      	ldr	r1, [pc, #76]	; (80026e8 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800269c:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800269e:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80026a0:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80026a2:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80026a4:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 80026a6:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80026aa:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80026ae:	bf38      	it	cc
 80026b0:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80026b2:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80026b4:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80026b6:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80026b8:	f000 fdf6 	bl	80032a8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80026bc:	0763      	lsls	r3, r4, #29
 80026be:	d008      	beq.n	80026d2 <pvPortMalloc+0xfe>
 80026c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c4:	f383 8811 	msr	BASEPRI, r3
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	e7fe      	b.n	80026d0 <pvPortMalloc+0xfc>
}
 80026d2:	4620      	mov	r0, r4
 80026d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026d8:	20001940 	.word	0x20001940
 80026dc:	20005544 	.word	0x20005544
 80026e0:	20001944 	.word	0x20001944
 80026e4:	20005550 	.word	0x20005550
 80026e8:	2000554c 	.word	0x2000554c
 80026ec:	20005548 	.word	0x20005548

080026f0 <vPortFree>:
{
 80026f0:	b510      	push	{r4, lr}
	if( pv != NULL )
 80026f2:	4604      	mov	r4, r0
 80026f4:	b370      	cbz	r0, 8002754 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80026f6:	4a18      	ldr	r2, [pc, #96]	; (8002758 <vPortFree+0x68>)
 80026f8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	4213      	tst	r3, r2
 8002700:	d108      	bne.n	8002714 <vPortFree+0x24>
 8002702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002706:	f383 8811 	msr	BASEPRI, r3
 800270a:	f3bf 8f6f 	isb	sy
 800270e:	f3bf 8f4f 	dsb	sy
 8002712:	e7fe      	b.n	8002712 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002714:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002718:	b141      	cbz	r1, 800272c <vPortFree+0x3c>
 800271a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271e:	f383 8811 	msr	BASEPRI, r3
 8002722:	f3bf 8f6f 	isb	sy
 8002726:	f3bf 8f4f 	dsb	sy
 800272a:	e7fe      	b.n	800272a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800272c:	ea23 0302 	bic.w	r3, r3, r2
 8002730:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002734:	f000 fd1a 	bl	800316c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002738:	4a08      	ldr	r2, [pc, #32]	; (800275c <vPortFree+0x6c>)
 800273a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800273e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002740:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002744:	440b      	add	r3, r1
 8002746:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002748:	f7ff ff20 	bl	800258c <prvInsertBlockIntoFreeList>
}
 800274c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002750:	f000 bdaa 	b.w	80032a8 <xTaskResumeAll>
 8002754:	bd10      	pop	{r4, pc}
 8002756:	bf00      	nop
 8002758:	20005544 	.word	0x20005544
 800275c:	20005548 	.word	0x20005548

08002760 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002760:	b510      	push	{r4, lr}
 8002762:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002764:	f7ff fdc6 	bl	80022f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002768:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800276a:	f7ff fde5 	bl	8002338 <vPortExitCritical>

	return xReturn;
}
 800276e:	fab4 f084 	clz	r0, r4
 8002772:	0940      	lsrs	r0, r0, #5
 8002774:	bd10      	pop	{r4, pc}

08002776 <prvCopyDataToQueue>:
{
 8002776:	b570      	push	{r4, r5, r6, lr}
 8002778:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800277a:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800277c:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 800277e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002780:	b942      	cbnz	r2, 8002794 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002782:	6805      	ldr	r5, [r0, #0]
 8002784:	b99d      	cbnz	r5, 80027ae <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002786:	6840      	ldr	r0, [r0, #4]
 8002788:	f000 ff38 	bl	80035fc <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800278c:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800278e:	3601      	adds	r6, #1
 8002790:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8002792:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002794:	b96d      	cbnz	r5, 80027b2 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002796:	6880      	ldr	r0, [r0, #8]
 8002798:	f001 fdbc 	bl	8004314 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800279c:	68a3      	ldr	r3, [r4, #8]
 800279e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80027a0:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027a2:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80027a4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d301      	bcc.n	80027ae <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80027aa:	6823      	ldr	r3, [r4, #0]
 80027ac:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80027ae:	2000      	movs	r0, #0
 80027b0:	e7ed      	b.n	800278e <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027b2:	68c0      	ldr	r0, [r0, #12]
 80027b4:	f001 fdae 	bl	8004314 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80027b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80027ba:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027bc:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80027be:	425b      	negs	r3, r3
 80027c0:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027c2:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80027c4:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80027c6:	bf3e      	ittt	cc
 80027c8:	6862      	ldrcc	r2, [r4, #4]
 80027ca:	189b      	addcc	r3, r3, r2
 80027cc:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80027ce:	2d02      	cmp	r5, #2
 80027d0:	d1ed      	bne.n	80027ae <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027d2:	b10e      	cbz	r6, 80027d8 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80027d4:	3e01      	subs	r6, #1
 80027d6:	e7ea      	b.n	80027ae <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80027d8:	4630      	mov	r0, r6
 80027da:	e7d8      	b.n	800278e <prvCopyDataToQueue+0x18>

080027dc <prvCopyDataFromQueue>:
{
 80027dc:	4603      	mov	r3, r0
 80027de:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80027e2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027e4:	b162      	cbz	r2, 8002800 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80027e6:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80027e8:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80027ea:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80027ec:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80027ee:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80027f0:	bf24      	itt	cs
 80027f2:	6819      	ldrcs	r1, [r3, #0]
 80027f4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80027f6:	68d9      	ldr	r1, [r3, #12]
}
 80027f8:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80027fc:	f001 bd8a 	b.w	8004314 <memcpy>
}
 8002800:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002804:	4770      	bx	lr

08002806 <prvUnlockQueue>:
{
 8002806:	b570      	push	{r4, r5, r6, lr}
 8002808:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800280a:	f7ff fd73 	bl	80022f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800280e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002812:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8002816:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002818:	2d00      	cmp	r5, #0
 800281a:	dc14      	bgt.n	8002846 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800281c:	23ff      	movs	r3, #255	; 0xff
 800281e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002822:	f7ff fd89 	bl	8002338 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002826:	f7ff fd65 	bl	80022f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800282a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800282e:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8002832:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002834:	2d00      	cmp	r5, #0
 8002836:	dc12      	bgt.n	800285e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8002838:	23ff      	movs	r3, #255	; 0xff
 800283a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800283e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8002842:	f7ff bd79 	b.w	8002338 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002846:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0e7      	beq.n	800281c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800284c:	4630      	mov	r0, r6
 800284e:	f000 fe37 	bl	80034c0 <xTaskRemoveFromEventList>
 8002852:	b108      	cbz	r0, 8002858 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8002854:	f000 febc 	bl	80035d0 <vTaskMissedYield>
 8002858:	3d01      	subs	r5, #1
 800285a:	b26d      	sxtb	r5, r5
 800285c:	e7dc      	b.n	8002818 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800285e:	6923      	ldr	r3, [r4, #16]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0e9      	beq.n	8002838 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002864:	4630      	mov	r0, r6
 8002866:	f000 fe2b 	bl	80034c0 <xTaskRemoveFromEventList>
 800286a:	b108      	cbz	r0, 8002870 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800286c:	f000 feb0 	bl	80035d0 <vTaskMissedYield>
 8002870:	3d01      	subs	r5, #1
 8002872:	b26d      	sxtb	r5, r5
 8002874:	e7de      	b.n	8002834 <prvUnlockQueue+0x2e>
	...

08002878 <xQueueGenericReset>:
{
 8002878:	b538      	push	{r3, r4, r5, lr}
 800287a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800287c:	4604      	mov	r4, r0
 800287e:	b940      	cbnz	r0, 8002892 <xQueueGenericReset+0x1a>
 8002880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002884:	f383 8811 	msr	BASEPRI, r3
 8002888:	f3bf 8f6f 	isb	sy
 800288c:	f3bf 8f4f 	dsb	sy
 8002890:	e7fe      	b.n	8002890 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8002892:	f7ff fd2f 	bl	80022f4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002896:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002898:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800289a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800289c:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800289e:	4343      	muls	r3, r0
 80028a0:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80028a2:	1a1b      	subs	r3, r3, r0
 80028a4:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80028a6:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80028a8:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028aa:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80028ac:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028ae:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80028b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80028b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80028b8:	b995      	cbnz	r5, 80028e0 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028ba:	6923      	ldr	r3, [r4, #16]
 80028bc:	b163      	cbz	r3, 80028d8 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028be:	f104 0010 	add.w	r0, r4, #16
 80028c2:	f000 fdfd 	bl	80034c0 <xTaskRemoveFromEventList>
 80028c6:	b138      	cbz	r0, 80028d8 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 80028c8:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <xQueueGenericReset+0x7c>)
 80028ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80028d8:	f7ff fd2e 	bl	8002338 <vPortExitCritical>
}
 80028dc:	2001      	movs	r0, #1
 80028de:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028e0:	f104 0010 	add.w	r0, r4, #16
 80028e4:	f7ff fc5c 	bl	80021a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80028ec:	f7ff fc58 	bl	80021a0 <vListInitialise>
 80028f0:	e7f2      	b.n	80028d8 <xQueueGenericReset+0x60>
 80028f2:	bf00      	nop
 80028f4:	e000ed04 	.word	0xe000ed04

080028f8 <xQueueGenericCreateStatic>:
	{
 80028f8:	b513      	push	{r0, r1, r4, lr}
 80028fa:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028fc:	b940      	cbnz	r0, 8002910 <xQueueGenericCreateStatic+0x18>
 80028fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002902:	f383 8811 	msr	BASEPRI, r3
 8002906:	f3bf 8f6f 	isb	sy
 800290a:	f3bf 8f4f 	dsb	sy
 800290e:	e7fe      	b.n	800290e <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8002910:	b943      	cbnz	r3, 8002924 <xQueueGenericCreateStatic+0x2c>
 8002912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002916:	f383 8811 	msr	BASEPRI, r3
 800291a:	f3bf 8f6f 	isb	sy
 800291e:	f3bf 8f4f 	dsb	sy
 8002922:	e7fe      	b.n	8002922 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002924:	b14a      	cbz	r2, 800293a <xQueueGenericCreateStatic+0x42>
 8002926:	b9d9      	cbnz	r1, 8002960 <xQueueGenericCreateStatic+0x68>
 8002928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292c:	f383 8811 	msr	BASEPRI, r3
 8002930:	f3bf 8f6f 	isb	sy
 8002934:	f3bf 8f4f 	dsb	sy
 8002938:	e7fe      	b.n	8002938 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800293a:	b189      	cbz	r1, 8002960 <xQueueGenericCreateStatic+0x68>
 800293c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002940:	f383 8811 	msr	BASEPRI, r3
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	e7fe      	b.n	800294c <xQueueGenericCreateStatic+0x54>
 800294e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002952:	f383 8811 	msr	BASEPRI, r3
 8002956:	f3bf 8f6f 	isb	sy
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	e7fe      	b.n	800295e <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002960:	2348      	movs	r3, #72	; 0x48
 8002962:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002964:	9b01      	ldr	r3, [sp, #4]
 8002966:	2b48      	cmp	r3, #72	; 0x48
 8002968:	d1f1      	bne.n	800294e <xQueueGenericCreateStatic+0x56>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800296a:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800296c:	2900      	cmp	r1, #0
 800296e:	bf08      	it	eq
 8002970:	4622      	moveq	r2, r4
	pxNewQueue->uxLength = uxQueueLength;
 8002972:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002974:	6421      	str	r1, [r4, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002976:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800297a:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800297c:	4619      	mov	r1, r3
 800297e:	4620      	mov	r0, r4
 8002980:	f7ff ff7a 	bl	8002878 <xQueueGenericReset>
	}
 8002984:	4620      	mov	r0, r4
 8002986:	b002      	add	sp, #8
 8002988:	bd10      	pop	{r4, pc}
	...

0800298c <xQueueGenericSend>:
{
 800298c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002990:	4689      	mov	r9, r1
 8002992:	9201      	str	r2, [sp, #4]
 8002994:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002996:	4604      	mov	r4, r0
 8002998:	b940      	cbnz	r0, 80029ac <xQueueGenericSend+0x20>
 800299a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299e:	f383 8811 	msr	BASEPRI, r3
 80029a2:	f3bf 8f6f 	isb	sy
 80029a6:	f3bf 8f4f 	dsb	sy
 80029aa:	e7fe      	b.n	80029aa <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029ac:	2900      	cmp	r1, #0
 80029ae:	f040 8088 	bne.w	8002ac2 <xQueueGenericSend+0x136>
 80029b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 8084 	beq.w	8002ac2 <xQueueGenericSend+0x136>
 80029ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029be:	f383 8811 	msr	BASEPRI, r3
 80029c2:	f3bf 8f6f 	isb	sy
 80029c6:	f3bf 8f4f 	dsb	sy
 80029ca:	e7fe      	b.n	80029ca <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029cc:	9e01      	ldr	r6, [sp, #4]
 80029ce:	2e00      	cmp	r6, #0
 80029d0:	f000 8082 	beq.w	8002ad8 <xQueueGenericSend+0x14c>
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	e7fe      	b.n	80029e4 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 80029e6:	9d01      	ldr	r5, [sp, #4]
 80029e8:	b91d      	cbnz	r5, 80029f2 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 80029ea:	f7ff fca5 	bl	8002338 <vPortExitCritical>
			return errQUEUE_FULL;
 80029ee:	2000      	movs	r0, #0
 80029f0:	e058      	b.n	8002aa4 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 80029f2:	b916      	cbnz	r6, 80029fa <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029f4:	a802      	add	r0, sp, #8
 80029f6:	f000 fda3 	bl	8003540 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80029fa:	f7ff fc9d 	bl	8002338 <vPortExitCritical>
		vTaskSuspendAll();
 80029fe:	f000 fbb5 	bl	800316c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a02:	f7ff fc77 	bl	80022f4 <vPortEnterCritical>
 8002a06:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002a0a:	2bff      	cmp	r3, #255	; 0xff
 8002a0c:	bf08      	it	eq
 8002a0e:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8002a12:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002a16:	2bff      	cmp	r3, #255	; 0xff
 8002a18:	bf08      	it	eq
 8002a1a:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8002a1e:	f7ff fc8b 	bl	8002338 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a22:	a901      	add	r1, sp, #4
 8002a24:	a802      	add	r0, sp, #8
 8002a26:	f000 fd97 	bl	8003558 <xTaskCheckForTimeOut>
 8002a2a:	2800      	cmp	r0, #0
 8002a2c:	d143      	bne.n	8002ab6 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a2e:	f7ff fc61 	bl	80022f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a32:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002a34:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002a36:	f7ff fc7f 	bl	8002338 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a3a:	42ae      	cmp	r6, r5
 8002a3c:	d135      	bne.n	8002aaa <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a3e:	9901      	ldr	r1, [sp, #4]
 8002a40:	f104 0010 	add.w	r0, r4, #16
 8002a44:	f000 fd04 	bl	8003450 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a48:	4620      	mov	r0, r4
 8002a4a:	f7ff fedc 	bl	8002806 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a4e:	f000 fc2b 	bl	80032a8 <xTaskResumeAll>
 8002a52:	b938      	cbnz	r0, 8002a64 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8002a54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002a58:	f8ca 3000 	str.w	r3, [sl]
 8002a5c:	f3bf 8f4f 	dsb	sy
 8002a60:	f3bf 8f6f 	isb	sy
 8002a64:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002a66:	f7ff fc45 	bl	80022f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a6a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002a6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d301      	bcc.n	8002a76 <xQueueGenericSend+0xea>
 8002a72:	2f02      	cmp	r7, #2
 8002a74:	d1b7      	bne.n	80029e6 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a76:	463a      	mov	r2, r7
 8002a78:	4649      	mov	r1, r9
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	f7ff fe7b 	bl	8002776 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a82:	b11b      	cbz	r3, 8002a8c <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a84:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002a88:	f000 fd1a 	bl	80034c0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8002a8c:	b138      	cbz	r0, 8002a9e <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8002a8e:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <xQueueGenericSend+0x168>)
 8002a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	f3bf 8f4f 	dsb	sy
 8002a9a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002a9e:	f7ff fc4b 	bl	8002338 <vPortExitCritical>
				return pdPASS;
 8002aa2:	2001      	movs	r0, #1
}
 8002aa4:	b004      	add	sp, #16
 8002aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f7ff feab 	bl	8002806 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ab0:	f000 fbfa 	bl	80032a8 <xTaskResumeAll>
 8002ab4:	e7d6      	b.n	8002a64 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	f7ff fea5 	bl	8002806 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002abc:	f000 fbf4 	bl	80032a8 <xTaskResumeAll>
 8002ac0:	e795      	b.n	80029ee <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ac2:	2f02      	cmp	r7, #2
 8002ac4:	d102      	bne.n	8002acc <xQueueGenericSend+0x140>
 8002ac6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d10a      	bne.n	8002ae2 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002acc:	f000 fd86 	bl	80035dc <xTaskGetSchedulerState>
 8002ad0:	2800      	cmp	r0, #0
 8002ad2:	f43f af7b 	beq.w	80029cc <xQueueGenericSend+0x40>
 8002ad6:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002ad8:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8002adc:	f8df a014 	ldr.w	sl, [pc, #20]	; 8002af4 <xQueueGenericSend+0x168>
 8002ae0:	e7c1      	b.n	8002a66 <xQueueGenericSend+0xda>
 8002ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae6:	f383 8811 	msr	BASEPRI, r3
 8002aea:	f3bf 8f6f 	isb	sy
 8002aee:	f3bf 8f4f 	dsb	sy
 8002af2:	e7fe      	b.n	8002af2 <xQueueGenericSend+0x166>
 8002af4:	e000ed04 	.word	0xe000ed04

08002af8 <xQueueGenericSendFromISR>:
{
 8002af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002afc:	4688      	mov	r8, r1
 8002afe:	4691      	mov	r9, r2
 8002b00:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002b02:	4604      	mov	r4, r0
 8002b04:	b940      	cbnz	r0, 8002b18 <xQueueGenericSendFromISR+0x20>
 8002b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0a:	f383 8811 	msr	BASEPRI, r3
 8002b0e:	f3bf 8f6f 	isb	sy
 8002b12:	f3bf 8f4f 	dsb	sy
 8002b16:	e7fe      	b.n	8002b16 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b18:	bb09      	cbnz	r1, 8002b5e <xQueueGenericSendFromISR+0x66>
 8002b1a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002b1c:	b1fb      	cbz	r3, 8002b5e <xQueueGenericSendFromISR+0x66>
 8002b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b22:	f383 8811 	msr	BASEPRI, r3
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	f3bf 8f4f 	dsb	sy
 8002b2e:	e7fe      	b.n	8002b2e <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b30:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002b34:	f000 fcc4 	bl	80034c0 <xTaskRemoveFromEventList>
 8002b38:	2800      	cmp	r0, #0
 8002b3a:	d034      	beq.n	8002ba6 <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 8002b3c:	f1b9 0f00 	cmp.w	r9, #0
 8002b40:	d031      	beq.n	8002ba6 <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002b42:	2001      	movs	r0, #1
 8002b44:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8002b48:	f386 8811 	msr	BASEPRI, r6
}
 8002b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b50:	3501      	adds	r5, #1
 8002b52:	b26d      	sxtb	r5, r5
 8002b54:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8002b58:	e025      	b.n	8002ba6 <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	e7f4      	b.n	8002b48 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b5e:	2f02      	cmp	r7, #2
 8002b60:	d102      	bne.n	8002b68 <xQueueGenericSendFromISR+0x70>
 8002b62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d120      	bne.n	8002baa <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b68:	f7ff fce2 	bl	8002530 <vPortValidateInterruptPriority>
	__asm volatile
 8002b6c:	f3ef 8611 	mrs	r6, BASEPRI
 8002b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b74:	f383 8811 	msr	BASEPRI, r3
 8002b78:	f3bf 8f6f 	isb	sy
 8002b7c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b80:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002b82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d301      	bcc.n	8002b8c <xQueueGenericSendFromISR+0x94>
 8002b88:	2f02      	cmp	r7, #2
 8002b8a:	d1e6      	bne.n	8002b5a <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b8c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b90:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b92:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b94:	4641      	mov	r1, r8
 8002b96:	4620      	mov	r0, r4
 8002b98:	f7ff fded 	bl	8002776 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002b9c:	1c6b      	adds	r3, r5, #1
 8002b9e:	d1d7      	bne.n	8002b50 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1c4      	bne.n	8002b30 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	e7ce      	b.n	8002b48 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 8002baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bae:	f383 8811 	msr	BASEPRI, r3
 8002bb2:	f3bf 8f6f 	isb	sy
 8002bb6:	f3bf 8f4f 	dsb	sy
 8002bba:	e7fe      	b.n	8002bba <xQueueGenericSendFromISR+0xc2>

08002bbc <xQueueReceive>:
{
 8002bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002bc0:	b085      	sub	sp, #20
 8002bc2:	4688      	mov	r8, r1
 8002bc4:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002bc6:	4604      	mov	r4, r0
 8002bc8:	b940      	cbnz	r0, 8002bdc <xQueueReceive+0x20>
 8002bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bce:	f383 8811 	msr	BASEPRI, r3
 8002bd2:	f3bf 8f6f 	isb	sy
 8002bd6:	f3bf 8f4f 	dsb	sy
 8002bda:	e7fe      	b.n	8002bda <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bdc:	2900      	cmp	r1, #0
 8002bde:	f040 8086 	bne.w	8002cee <xQueueReceive+0x132>
 8002be2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 8082 	beq.w	8002cee <xQueueReceive+0x132>
 8002bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bee:	f383 8811 	msr	BASEPRI, r3
 8002bf2:	f3bf 8f6f 	isb	sy
 8002bf6:	f3bf 8f4f 	dsb	sy
 8002bfa:	e7fe      	b.n	8002bfa <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bfc:	9e01      	ldr	r6, [sp, #4]
 8002bfe:	2e00      	cmp	r6, #0
 8002c00:	d07a      	beq.n	8002cf8 <xQueueReceive+0x13c>
 8002c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c06:	f383 8811 	msr	BASEPRI, r3
 8002c0a:	f3bf 8f6f 	isb	sy
 8002c0e:	f3bf 8f4f 	dsb	sy
 8002c12:	e7fe      	b.n	8002c12 <xQueueReceive+0x56>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c14:	9d01      	ldr	r5, [sp, #4]
 8002c16:	b91d      	cbnz	r5, 8002c20 <xQueueReceive+0x64>
					taskEXIT_CRITICAL();
 8002c18:	f7ff fb8e 	bl	8002338 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	e052      	b.n	8002cc6 <xQueueReceive+0x10a>
				else if( xEntryTimeSet == pdFALSE )
 8002c20:	b916      	cbnz	r6, 8002c28 <xQueueReceive+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c22:	a802      	add	r0, sp, #8
 8002c24:	f000 fc8c 	bl	8003540 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002c28:	f7ff fb86 	bl	8002338 <vPortExitCritical>
		vTaskSuspendAll();
 8002c2c:	f000 fa9e 	bl	800316c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c30:	f7ff fb60 	bl	80022f4 <vPortEnterCritical>
 8002c34:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002c38:	2bff      	cmp	r3, #255	; 0xff
 8002c3a:	bf08      	it	eq
 8002c3c:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8002c40:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002c44:	2bff      	cmp	r3, #255	; 0xff
 8002c46:	bf08      	it	eq
 8002c48:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8002c4c:	f7ff fb74 	bl	8002338 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c50:	a901      	add	r1, sp, #4
 8002c52:	a802      	add	r0, sp, #8
 8002c54:	f000 fc80 	bl	8003558 <xTaskCheckForTimeOut>
 8002c58:	2800      	cmp	r0, #0
 8002c5a:	d13d      	bne.n	8002cd8 <xQueueReceive+0x11c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	f7ff fd7f 	bl	8002760 <prvIsQueueEmpty>
 8002c62:	b398      	cbz	r0, 8002ccc <xQueueReceive+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c64:	9901      	ldr	r1, [sp, #4]
 8002c66:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c6a:	f000 fbf1 	bl	8003450 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c6e:	4620      	mov	r0, r4
 8002c70:	f7ff fdc9 	bl	8002806 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c74:	f000 fb18 	bl	80032a8 <xTaskResumeAll>
 8002c78:	b938      	cbnz	r0, 8002c8a <xQueueReceive+0xce>
					portYIELD_WITHIN_API();
 8002c7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c7e:	f8c9 3000 	str.w	r3, [r9]
 8002c82:	f3bf 8f4f 	dsb	sy
 8002c86:	f3bf 8f6f 	isb	sy
 8002c8a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002c8c:	f7ff fb32 	bl	80022f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c90:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c92:	2d00      	cmp	r5, #0
 8002c94:	d0be      	beq.n	8002c14 <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c96:	4641      	mov	r1, r8
 8002c98:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c9a:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c9c:	f7ff fd9e 	bl	80027dc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ca0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ca2:	6923      	ldr	r3, [r4, #16]
 8002ca4:	b163      	cbz	r3, 8002cc0 <xQueueReceive+0x104>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ca6:	f104 0010 	add.w	r0, r4, #16
 8002caa:	f000 fc09 	bl	80034c0 <xTaskRemoveFromEventList>
 8002cae:	b138      	cbz	r0, 8002cc0 <xQueueReceive+0x104>
						queueYIELD_IF_USING_PREEMPTION();
 8002cb0:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <xQueueReceive+0x144>)
 8002cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002cc0:	f7ff fb3a 	bl	8002338 <vPortExitCritical>
				return pdPASS;
 8002cc4:	2001      	movs	r0, #1
}
 8002cc6:	b005      	add	sp, #20
 8002cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8002ccc:	4620      	mov	r0, r4
 8002cce:	f7ff fd9a 	bl	8002806 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cd2:	f000 fae9 	bl	80032a8 <xTaskResumeAll>
 8002cd6:	e7d8      	b.n	8002c8a <xQueueReceive+0xce>
			prvUnlockQueue( pxQueue );
 8002cd8:	4620      	mov	r0, r4
 8002cda:	f7ff fd94 	bl	8002806 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cde:	f000 fae3 	bl	80032a8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	f7ff fd3c 	bl	8002760 <prvIsQueueEmpty>
 8002ce8:	2800      	cmp	r0, #0
 8002cea:	d0ce      	beq.n	8002c8a <xQueueReceive+0xce>
 8002cec:	e796      	b.n	8002c1c <xQueueReceive+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cee:	f000 fc75 	bl	80035dc <xTaskGetSchedulerState>
 8002cf2:	2800      	cmp	r0, #0
 8002cf4:	d082      	beq.n	8002bfc <xQueueReceive+0x40>
 8002cf6:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002cf8:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8002cfa:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8002d00 <xQueueReceive+0x144>
 8002cfe:	e7c5      	b.n	8002c8c <xQueueReceive+0xd0>
 8002d00:	e000ed04 	.word	0xe000ed04

08002d04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002d04:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002d06:	4a07      	ldr	r2, [pc, #28]	; (8002d24 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d08:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002d0a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8002d0e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8002d12:	b91d      	cbnz	r5, 8002d1c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002d14:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002d18:	6060      	str	r0, [r4, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002d1a:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d1f3      	bne.n	8002d0a <vQueueAddToRegistry+0x6>
 8002d22:	bd30      	pop	{r4, r5, pc}
 8002d24:	20005b60 	.word	0x20005b60

08002d28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d28:	b570      	push	{r4, r5, r6, lr}
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	460d      	mov	r5, r1
 8002d2e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002d30:	f7ff fae0 	bl	80022f4 <vPortEnterCritical>
 8002d34:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002d38:	2bff      	cmp	r3, #255	; 0xff
 8002d3a:	bf04      	itt	eq
 8002d3c:	2300      	moveq	r3, #0
 8002d3e:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8002d42:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002d46:	2bff      	cmp	r3, #255	; 0xff
 8002d48:	bf04      	itt	eq
 8002d4a:	2300      	moveq	r3, #0
 8002d4c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8002d50:	f7ff faf2 	bl	8002338 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d56:	b92b      	cbnz	r3, 8002d64 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d58:	4632      	mov	r2, r6
 8002d5a:	4629      	mov	r1, r5
 8002d5c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002d60:	f000 fb90 	bl	8003484 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002d64:	4620      	mov	r0, r4
	}
 8002d66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8002d6a:	f7ff bd4c 	b.w	8002806 <prvUnlockQueue>
	...

08002d70 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d74:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002d76:	f7ff fabd 	bl	80022f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002d7a:	4b2d      	ldr	r3, [pc, #180]	; (8002e30 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8002d7c:	4c2d      	ldr	r4, [pc, #180]	; (8002e34 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	4f2d      	ldr	r7, [pc, #180]	; (8002e38 <prvAddNewTaskToReadyList+0xc8>)
 8002d82:	3201      	adds	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002d86:	6825      	ldr	r5, [r4, #0]
 8002d88:	2d00      	cmp	r5, #0
 8002d8a:	d146      	bne.n	8002e1a <prvAddNewTaskToReadyList+0xaa>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002d8c:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d11d      	bne.n	8002dd0 <prvAddNewTaskToReadyList+0x60>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002d94:	1978      	adds	r0, r7, r5
 8002d96:	3514      	adds	r5, #20
 8002d98:	f7ff fa02 	bl	80021a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d9c:	f5b5 6f8c 	cmp.w	r5, #1120	; 0x460
 8002da0:	d1f8      	bne.n	8002d94 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002da2:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8002e64 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8002da6:	4d25      	ldr	r5, [pc, #148]	; (8002e3c <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8002da8:	4640      	mov	r0, r8
 8002daa:	f7ff f9f9 	bl	80021a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002dae:	4628      	mov	r0, r5
 8002db0:	f7ff f9f6 	bl	80021a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002db4:	4822      	ldr	r0, [pc, #136]	; (8002e40 <prvAddNewTaskToReadyList+0xd0>)
 8002db6:	f7ff f9f3 	bl	80021a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002dba:	4822      	ldr	r0, [pc, #136]	; (8002e44 <prvAddNewTaskToReadyList+0xd4>)
 8002dbc:	f7ff f9f0 	bl	80021a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002dc0:	4821      	ldr	r0, [pc, #132]	; (8002e48 <prvAddNewTaskToReadyList+0xd8>)
 8002dc2:	f7ff f9ed 	bl	80021a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002dc6:	4b21      	ldr	r3, [pc, #132]	; (8002e4c <prvAddNewTaskToReadyList+0xdc>)
 8002dc8:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002dcc:	4b20      	ldr	r3, [pc, #128]	; (8002e50 <prvAddNewTaskToReadyList+0xe0>)
 8002dce:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002dd0:	4a20      	ldr	r2, [pc, #128]	; (8002e54 <prvAddNewTaskToReadyList+0xe4>)
 8002dd2:	6813      	ldr	r3, [r2, #0]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002dd8:	4a1f      	ldr	r2, [pc, #124]	; (8002e58 <prvAddNewTaskToReadyList+0xe8>)
 8002dda:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002ddc:	6811      	ldr	r1, [r2, #0]
 8002dde:	2014      	movs	r0, #20
 8002de0:	428b      	cmp	r3, r1
 8002de2:	fb00 7003 	mla	r0, r0, r3, r7
 8002de6:	f106 0104 	add.w	r1, r6, #4
 8002dea:	bf88      	it	hi
 8002dec:	6013      	strhi	r3, [r2, #0]
 8002dee:	f7ff f9e5 	bl	80021bc <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002df2:	f7ff faa1 	bl	8002338 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002df6:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <prvAddNewTaskToReadyList+0xec>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	b163      	cbz	r3, 8002e16 <prvAddNewTaskToReadyList+0xa6>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e00:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d207      	bcs.n	8002e16 <prvAddNewTaskToReadyList+0xa6>
			taskYIELD_IF_USING_PREEMPTION();
 8002e06:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <prvAddNewTaskToReadyList+0xf0>)
 8002e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	f3bf 8f6f 	isb	sy
 8002e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8002e1a:	4b10      	ldr	r3, [pc, #64]	; (8002e5c <prvAddNewTaskToReadyList+0xec>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1d6      	bne.n	8002dd0 <prvAddNewTaskToReadyList+0x60>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e22:	6823      	ldr	r3, [r4, #0]
 8002e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e26:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002e28:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002e2a:	bf98      	it	ls
 8002e2c:	6026      	strls	r6, [r4, #0]
 8002e2e:	e7cf      	b.n	8002dd0 <prvAddNewTaskToReadyList+0x60>
 8002e30:	200059c4 	.word	0x200059c4
 8002e34:	20005558 	.word	0x20005558
 8002e38:	20005564 	.word	0x20005564
 8002e3c:	200059f0 	.word	0x200059f0
 8002e40:	20005a0c 	.word	0x20005a0c
 8002e44:	20005a38 	.word	0x20005a38
 8002e48:	20005a24 	.word	0x20005a24
 8002e4c:	2000555c 	.word	0x2000555c
 8002e50:	20005560 	.word	0x20005560
 8002e54:	200059d4 	.word	0x200059d4
 8002e58:	200059d8 	.word	0x200059d8
 8002e5c:	20005a20 	.word	0x20005a20
 8002e60:	e000ed04 	.word	0xe000ed04
 8002e64:	200059dc 	.word	0x200059dc

08002e68 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e68:	4a06      	ldr	r2, [pc, #24]	; (8002e84 <prvResetNextTaskUnblockTime+0x1c>)
 8002e6a:	6813      	ldr	r3, [r2, #0]
 8002e6c:	6819      	ldr	r1, [r3, #0]
 8002e6e:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <prvResetNextTaskUnblockTime+0x20>)
 8002e70:	b919      	cbnz	r1, 8002e7a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002e72:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002e7e:	68d2      	ldr	r2, [r2, #12]
 8002e80:	6852      	ldr	r2, [r2, #4]
 8002e82:	e7f8      	b.n	8002e76 <prvResetNextTaskUnblockTime+0xe>
 8002e84:	2000555c 	.word	0x2000555c
 8002e88:	20005a04 	.word	0x20005a04

08002e8c <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002e92:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002e96:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8002e98:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002e9c:	3a01      	subs	r2, #1
 8002e9e:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002ea2:	469a      	mov	sl, r3
 8002ea4:	4681      	mov	r9, r0
 8002ea6:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002ea8:	f026 0607 	bic.w	r6, r6, #7
 8002eac:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8002eb0:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002eb2:	7858      	ldrb	r0, [r3, #1]
 8002eb4:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002eb8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8002ebc:	b108      	cbz	r0, 8002ec2 <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ebe:	428b      	cmp	r3, r1
 8002ec0:	d1f7      	bne.n	8002eb2 <prvInitialiseNewTask.isra.2+0x26>
 8002ec2:	9d08      	ldr	r5, [sp, #32]
 8002ec4:	2d37      	cmp	r5, #55	; 0x37
 8002ec6:	bf28      	it	cs
 8002ec8:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002eca:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 8002ecc:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002ece:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ed0:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ed2:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002ed6:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ed8:	f7ff f96d 	bl	80021b6 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002edc:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ee0:	f104 0018 	add.w	r0, r4, #24
 8002ee4:	f7ff f967 	bl	80021b6 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002ee8:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002eea:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eec:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002eee:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ef0:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	4649      	mov	r1, r9
 8002ef8:	4630      	mov	r0, r6
 8002efa:	f7ff f9d1 	bl	80022a0 <pxPortInitialiseStack>
 8002efe:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002f00:	f1b8 0f00 	cmp.w	r8, #0
 8002f04:	d001      	beq.n	8002f0a <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f06:	f8c8 4000 	str.w	r4, [r8]
 8002f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002f0e <prvDeleteTCB>:
	{
 8002f0e:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002f10:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8002f14:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002f16:	b93b      	cbnz	r3, 8002f28 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8002f18:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002f1a:	f7ff fbe9 	bl	80026f0 <vPortFree>
				vPortFree( pxTCB );
 8002f1e:	4620      	mov	r0, r4
	}
 8002f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8002f24:	f7ff bbe4 	b.w	80026f0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d0f9      	beq.n	8002f20 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d008      	beq.n	8002f42 <prvDeleteTCB+0x34>
 8002f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f34:	f383 8811 	msr	BASEPRI, r3
 8002f38:	f3bf 8f6f 	isb	sy
 8002f3c:	f3bf 8f4f 	dsb	sy
 8002f40:	e7fe      	b.n	8002f40 <prvDeleteTCB+0x32>
 8002f42:	bd10      	pop	{r4, pc}

08002f44 <prvIdleTask>:
{
 8002f44:	b580      	push	{r7, lr}
				taskYIELD();
 8002f46:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8002fa4 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002f4a:	4f12      	ldr	r7, [pc, #72]	; (8002f94 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f4c:	4c12      	ldr	r4, [pc, #72]	; (8002f98 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8002f4e:	4d13      	ldr	r5, [pc, #76]	; (8002f9c <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f50:	6823      	ldr	r3, [r4, #0]
 8002f52:	b963      	cbnz	r3, 8002f6e <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f54:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <prvIdleTask+0x5c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d9f8      	bls.n	8002f4e <prvIdleTask+0xa>
				taskYIELD();
 8002f5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002f60:	f8c8 3000 	str.w	r3, [r8]
 8002f64:	f3bf 8f4f 	dsb	sy
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	e7ee      	b.n	8002f4c <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8002f6e:	f7ff f9c1 	bl	80022f4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f76:	1d30      	adds	r0, r6, #4
 8002f78:	f7ff f943 	bl	8002202 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002f7c:	682b      	ldr	r3, [r5, #0]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	3b01      	subs	r3, #1
 8002f86:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8002f88:	f7ff f9d6 	bl	8002338 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8002f8c:	4630      	mov	r0, r6
 8002f8e:	f7ff ffbe 	bl	8002f0e <prvDeleteTCB>
 8002f92:	e7dd      	b.n	8002f50 <prvIdleTask+0xc>
 8002f94:	20005a38 	.word	0x20005a38
 8002f98:	200059c8 	.word	0x200059c8
 8002f9c:	200059c4 	.word	0x200059c4
 8002fa0:	20005564 	.word	0x20005564
 8002fa4:	e000ed04 	.word	0xe000ed04

08002fa8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002faa:	4b16      	ldr	r3, [pc, #88]	; (8003004 <prvAddCurrentTaskToDelayedList+0x5c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fac:	4d16      	ldr	r5, [pc, #88]	; (8003008 <prvAddCurrentTaskToDelayedList+0x60>)
const TickType_t xConstTickCount = xTickCount;
 8002fae:	681e      	ldr	r6, [r3, #0]
{
 8002fb0:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fb2:	6828      	ldr	r0, [r5, #0]
 8002fb4:	3004      	adds	r0, #4
{
 8002fb6:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fb8:	f7ff f923 	bl	8002202 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002fbc:	1c63      	adds	r3, r4, #1
 8002fbe:	462b      	mov	r3, r5
 8002fc0:	d107      	bne.n	8002fd2 <prvAddCurrentTaskToDelayedList+0x2a>
 8002fc2:	b137      	cbz	r7, 8002fd2 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fc4:	6829      	ldr	r1, [r5, #0]
 8002fc6:	4811      	ldr	r0, [pc, #68]	; (800300c <prvAddCurrentTaskToDelayedList+0x64>)
 8002fc8:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002fca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fce:	f7ff b8f5 	b.w	80021bc <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002fd2:	4434      	add	r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002fd4:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8002fd6:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002fd8:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002fda:	d907      	bls.n	8002fec <prvAddCurrentTaskToDelayedList+0x44>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fdc:	4a0c      	ldr	r2, [pc, #48]	; (8003010 <prvAddCurrentTaskToDelayedList+0x68>)
 8002fde:	6810      	ldr	r0, [r2, #0]
 8002fe0:	6819      	ldr	r1, [r3, #0]
}
 8002fe2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fe6:	3104      	adds	r1, #4
 8002fe8:	f7ff b8f4 	b.w	80021d4 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fec:	4a09      	ldr	r2, [pc, #36]	; (8003014 <prvAddCurrentTaskToDelayedList+0x6c>)
 8002fee:	6810      	ldr	r0, [r2, #0]
 8002ff0:	6819      	ldr	r1, [r3, #0]
 8002ff2:	3104      	adds	r1, #4
 8002ff4:	f7ff f8ee 	bl	80021d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002ff8:	4b07      	ldr	r3, [pc, #28]	; (8003018 <prvAddCurrentTaskToDelayedList+0x70>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002ffe:	bf38      	it	cc
 8003000:	601c      	strcc	r4, [r3, #0]
 8003002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003004:	20005a4c 	.word	0x20005a4c
 8003008:	20005558 	.word	0x20005558
 800300c:	20005a24 	.word	0x20005a24
 8003010:	20005560 	.word	0x20005560
 8003014:	2000555c 	.word	0x2000555c
 8003018:	20005a04 	.word	0x20005a04

0800301c <xTaskCreateStatic>:
	{
 800301c:	b570      	push	{r4, r5, r6, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003022:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8003024:	b945      	cbnz	r5, 8003038 <xTaskCreateStatic+0x1c>
 8003026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302a:	f383 8811 	msr	BASEPRI, r3
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	e7fe      	b.n	8003036 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8003038:	b944      	cbnz	r4, 800304c <xTaskCreateStatic+0x30>
 800303a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303e:	f383 8811 	msr	BASEPRI, r3
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	e7fe      	b.n	800304a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800304c:	2654      	movs	r6, #84	; 0x54
 800304e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003050:	9e04      	ldr	r6, [sp, #16]
 8003052:	2e54      	cmp	r6, #84	; 0x54
 8003054:	d008      	beq.n	8003068 <xTaskCreateStatic+0x4c>
 8003056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305a:	f383 8811 	msr	BASEPRI, r3
 800305e:	f3bf 8f6f 	isb	sy
 8003062:	f3bf 8f4f 	dsb	sy
 8003066:	e7fe      	b.n	8003066 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003068:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800306a:	2502      	movs	r5, #2
 800306c:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003070:	ad05      	add	r5, sp, #20
 8003072:	9501      	str	r5, [sp, #4]
 8003074:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003076:	9402      	str	r4, [sp, #8]
 8003078:	9500      	str	r5, [sp, #0]
 800307a:	f7ff ff07 	bl	8002e8c <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800307e:	4620      	mov	r0, r4
 8003080:	f7ff fe76 	bl	8002d70 <prvAddNewTaskToReadyList>
	}
 8003084:	9805      	ldr	r0, [sp, #20]
 8003086:	b006      	add	sp, #24
 8003088:	bd70      	pop	{r4, r5, r6, pc}

0800308a <xTaskCreate>:
	{
 800308a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800308e:	4607      	mov	r7, r0
 8003090:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003092:	0090      	lsls	r0, r2, #2
	{
 8003094:	4688      	mov	r8, r1
 8003096:	4616      	mov	r6, r2
 8003098:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800309a:	f7ff fa9b 	bl	80025d4 <pvPortMalloc>
			if( pxStack != NULL )
 800309e:	4605      	mov	r5, r0
 80030a0:	b1e8      	cbz	r0, 80030de <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80030a2:	2054      	movs	r0, #84	; 0x54
 80030a4:	f7ff fa96 	bl	80025d4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80030a8:	4604      	mov	r4, r0
 80030aa:	b1a8      	cbz	r0, 80030d8 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80030ac:	2300      	movs	r3, #0
 80030ae:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 80030b4:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030b6:	9301      	str	r3, [sp, #4]
 80030b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80030ba:	9002      	str	r0, [sp, #8]
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	4632      	mov	r2, r6
 80030c0:	464b      	mov	r3, r9
 80030c2:	4641      	mov	r1, r8
 80030c4:	4638      	mov	r0, r7
 80030c6:	f7ff fee1 	bl	8002e8c <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030ca:	4620      	mov	r0, r4
 80030cc:	f7ff fe50 	bl	8002d70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80030d0:	2001      	movs	r0, #1
	}
 80030d2:	b005      	add	sp, #20
 80030d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80030d8:	4628      	mov	r0, r5
 80030da:	f7ff fb09 	bl	80026f0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030de:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80030e2:	e7f6      	b.n	80030d2 <xTaskCreate+0x48>

080030e4 <vTaskStartScheduler>:
{
 80030e4:	b510      	push	{r4, lr}
 80030e6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80030e8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80030ea:	aa07      	add	r2, sp, #28
 80030ec:	a906      	add	r1, sp, #24
 80030ee:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80030f0:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80030f2:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80030f4:	f7ff f83c 	bl	8002170 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80030f8:	9b05      	ldr	r3, [sp, #20]
 80030fa:	9302      	str	r3, [sp, #8]
 80030fc:	9b06      	ldr	r3, [sp, #24]
 80030fe:	9301      	str	r3, [sp, #4]
 8003100:	9400      	str	r4, [sp, #0]
 8003102:	4623      	mov	r3, r4
 8003104:	9a07      	ldr	r2, [sp, #28]
 8003106:	4914      	ldr	r1, [pc, #80]	; (8003158 <vTaskStartScheduler+0x74>)
 8003108:	4814      	ldr	r0, [pc, #80]	; (800315c <vTaskStartScheduler+0x78>)
 800310a:	f7ff ff87 	bl	800301c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800310e:	b9a0      	cbnz	r0, 800313a <vTaskStartScheduler+0x56>
}
 8003110:	b008      	add	sp, #32
 8003112:	bd10      	pop	{r4, pc}
 8003114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003118:	f383 8811 	msr	BASEPRI, r3
 800311c:	f3bf 8f6f 	isb	sy
 8003120:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003124:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <vTaskStartScheduler+0x7c>)
 8003126:	f04f 32ff 	mov.w	r2, #4294967295
 800312a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800312c:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <vTaskStartScheduler+0x80>)
 800312e:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003130:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <vTaskStartScheduler+0x84>)
 8003132:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003134:	f7ff f976 	bl	8002424 <xPortStartScheduler>
 8003138:	e7ea      	b.n	8003110 <vTaskStartScheduler+0x2c>
			xReturn = xTimerCreateTimerTask();
 800313a:	f000 faf3 	bl	8003724 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800313e:	2801      	cmp	r0, #1
 8003140:	d0e8      	beq.n	8003114 <vTaskStartScheduler+0x30>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003142:	3001      	adds	r0, #1
 8003144:	d1e4      	bne.n	8003110 <vTaskStartScheduler+0x2c>
 8003146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314a:	f383 8811 	msr	BASEPRI, r3
 800314e:	f3bf 8f6f 	isb	sy
 8003152:	f3bf 8f4f 	dsb	sy
 8003156:	e7fe      	b.n	8003156 <vTaskStartScheduler+0x72>
 8003158:	080052a0 	.word	0x080052a0
 800315c:	08002f45 	.word	0x08002f45
 8003160:	20005a04 	.word	0x20005a04
 8003164:	20005a20 	.word	0x20005a20
 8003168:	20005a4c 	.word	0x20005a4c

0800316c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800316c:	4a02      	ldr	r2, [pc, #8]	; (8003178 <vTaskSuspendAll+0xc>)
 800316e:	6813      	ldr	r3, [r2, #0]
 8003170:	3301      	adds	r3, #1
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	200059d0 	.word	0x200059d0

0800317c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800317c:	4b01      	ldr	r3, [pc, #4]	; (8003184 <xTaskGetTickCount+0x8>)
 800317e:	6818      	ldr	r0, [r3, #0]
}
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	20005a4c 	.word	0x20005a4c

08003188 <xTaskIncrementTick>:
{
 8003188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800318c:	4b3b      	ldr	r3, [pc, #236]	; (800327c <xTaskIncrementTick+0xf4>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d151      	bne.n	8003238 <xTaskIncrementTick+0xb0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003194:	4b3a      	ldr	r3, [pc, #232]	; (8003280 <xTaskIncrementTick+0xf8>)
 8003196:	681c      	ldr	r4, [r3, #0]
 8003198:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800319a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800319c:	b9bc      	cbnz	r4, 80031ce <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800319e:	4b39      	ldr	r3, [pc, #228]	; (8003284 <xTaskIncrementTick+0xfc>)
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	b142      	cbz	r2, 80031b8 <xTaskIncrementTick+0x30>
 80031a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031aa:	f383 8811 	msr	BASEPRI, r3
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	f3bf 8f4f 	dsb	sy
 80031b6:	e7fe      	b.n	80031b6 <xTaskIncrementTick+0x2e>
 80031b8:	4a33      	ldr	r2, [pc, #204]	; (8003288 <xTaskIncrementTick+0x100>)
 80031ba:	6819      	ldr	r1, [r3, #0]
 80031bc:	6810      	ldr	r0, [r2, #0]
 80031be:	6018      	str	r0, [r3, #0]
 80031c0:	6011      	str	r1, [r2, #0]
 80031c2:	4a32      	ldr	r2, [pc, #200]	; (800328c <xTaskIncrementTick+0x104>)
 80031c4:	6813      	ldr	r3, [r2, #0]
 80031c6:	3301      	adds	r3, #1
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	f7ff fe4d 	bl	8002e68 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031ce:	4d30      	ldr	r5, [pc, #192]	; (8003290 <xTaskIncrementTick+0x108>)
 80031d0:	4f30      	ldr	r7, [pc, #192]	; (8003294 <xTaskIncrementTick+0x10c>)
 80031d2:	682b      	ldr	r3, [r5, #0]
 80031d4:	429c      	cmp	r4, r3
 80031d6:	f04f 0b00 	mov.w	fp, #0
 80031da:	d33c      	bcc.n	8003256 <xTaskIncrementTick+0xce>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031dc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003284 <xTaskIncrementTick+0xfc>
					prvAddTaskToReadyList( pxTCB );
 80031e0:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80032a4 <xTaskIncrementTick+0x11c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031e4:	f8d8 2000 	ldr.w	r2, [r8]
 80031e8:	6812      	ldr	r2, [r2, #0]
 80031ea:	bb62      	cbnz	r2, 8003246 <xTaskIncrementTick+0xbe>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031ec:	f04f 32ff 	mov.w	r2, #4294967295
 80031f0:	602a      	str	r2, [r5, #0]
					break;
 80031f2:	e030      	b.n	8003256 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031f4:	f106 0a04 	add.w	sl, r6, #4
 80031f8:	4650      	mov	r0, sl
 80031fa:	f7ff f802 	bl	8002202 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031fe:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003200:	b119      	cbz	r1, 800320a <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003202:	f106 0018 	add.w	r0, r6, #24
 8003206:	f7fe fffc 	bl	8002202 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800320a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800320c:	f8d9 1000 	ldr.w	r1, [r9]
 8003210:	4b21      	ldr	r3, [pc, #132]	; (8003298 <xTaskIncrementTick+0x110>)
 8003212:	4288      	cmp	r0, r1
 8003214:	f04f 0214 	mov.w	r2, #20
 8003218:	bf88      	it	hi
 800321a:	f8c9 0000 	strhi.w	r0, [r9]
 800321e:	4651      	mov	r1, sl
 8003220:	fb02 3000 	mla	r0, r2, r0, r3
 8003224:	f7fe ffca 	bl	80021bc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003228:	6838      	ldr	r0, [r7, #0]
 800322a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800322c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800322e:	4291      	cmp	r1, r2
 8003230:	bf28      	it	cs
 8003232:	f04f 0b01 	movcs.w	fp, #1
 8003236:	e7d5      	b.n	80031e4 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8003238:	4a18      	ldr	r2, [pc, #96]	; (800329c <xTaskIncrementTick+0x114>)
 800323a:	6813      	ldr	r3, [r2, #0]
 800323c:	3301      	adds	r3, #1
 800323e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003240:	f04f 0b00 	mov.w	fp, #0
 8003244:	e011      	b.n	800326a <xTaskIncrementTick+0xe2>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003246:	f8d8 2000 	ldr.w	r2, [r8]
 800324a:	68d2      	ldr	r2, [r2, #12]
 800324c:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800324e:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003250:	428c      	cmp	r4, r1
 8003252:	d2cf      	bcs.n	80031f4 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8003254:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <xTaskIncrementTick+0x110>)
 800325a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800325c:	2214      	movs	r2, #20
 800325e:	434a      	muls	r2, r1
 8003260:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8003262:	2a02      	cmp	r2, #2
 8003264:	bf28      	it	cs
 8003266:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800326a:	4a0d      	ldr	r2, [pc, #52]	; (80032a0 <xTaskIncrementTick+0x118>)
 800326c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800326e:	2a00      	cmp	r2, #0
 8003270:	bf18      	it	ne
 8003272:	f04f 0b01 	movne.w	fp, #1
}
 8003276:	4658      	mov	r0, fp
 8003278:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800327c:	200059d0 	.word	0x200059d0
 8003280:	20005a4c 	.word	0x20005a4c
 8003284:	2000555c 	.word	0x2000555c
 8003288:	20005560 	.word	0x20005560
 800328c:	20005a08 	.word	0x20005a08
 8003290:	20005a04 	.word	0x20005a04
 8003294:	20005558 	.word	0x20005558
 8003298:	20005564 	.word	0x20005564
 800329c:	200059cc 	.word	0x200059cc
 80032a0:	20005a50 	.word	0x20005a50
 80032a4:	200059d8 	.word	0x200059d8

080032a8 <xTaskResumeAll>:
{
 80032a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 80032ac:	4c2f      	ldr	r4, [pc, #188]	; (800336c <xTaskResumeAll+0xc4>)
 80032ae:	6823      	ldr	r3, [r4, #0]
 80032b0:	b943      	cbnz	r3, 80032c4 <xTaskResumeAll+0x1c>
 80032b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	e7fe      	b.n	80032c2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80032c4:	f7ff f816 	bl	80022f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80032c8:	6823      	ldr	r3, [r4, #0]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032ce:	6824      	ldr	r4, [r4, #0]
 80032d0:	b12c      	cbz	r4, 80032de <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80032d2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80032d4:	f7ff f830 	bl	8002338 <vPortExitCritical>
}
 80032d8:	4620      	mov	r0, r4
 80032da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032de:	4b24      	ldr	r3, [pc, #144]	; (8003370 <xTaskResumeAll+0xc8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f5      	beq.n	80032d2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032e6:	4e23      	ldr	r6, [pc, #140]	; (8003374 <xTaskResumeAll+0xcc>)
					prvAddTaskToReadyList( pxTCB );
 80032e8:	4f23      	ldr	r7, [pc, #140]	; (8003378 <xTaskResumeAll+0xd0>)
 80032ea:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800338c <xTaskResumeAll+0xe4>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032ee:	6833      	ldr	r3, [r6, #0]
 80032f0:	b9e3      	cbnz	r3, 800332c <xTaskResumeAll+0x84>
				if( pxTCB != NULL )
 80032f2:	b10c      	cbz	r4, 80032f8 <xTaskResumeAll+0x50>
					prvResetNextTaskUnblockTime();
 80032f4:	f7ff fdb8 	bl	8002e68 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80032f8:	4d20      	ldr	r5, [pc, #128]	; (800337c <xTaskResumeAll+0xd4>)
 80032fa:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80032fc:	b144      	cbz	r4, 8003310 <xTaskResumeAll+0x68>
								xYieldPending = pdTRUE;
 80032fe:	4e20      	ldr	r6, [pc, #128]	; (8003380 <xTaskResumeAll+0xd8>)
 8003300:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003302:	f7ff ff41 	bl	8003188 <xTaskIncrementTick>
 8003306:	b100      	cbz	r0, 800330a <xTaskResumeAll+0x62>
								xYieldPending = pdTRUE;
 8003308:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800330a:	3c01      	subs	r4, #1
 800330c:	d1f9      	bne.n	8003302 <xTaskResumeAll+0x5a>
						uxPendedTicks = 0;
 800330e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003310:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <xTaskResumeAll+0xd8>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0dc      	beq.n	80032d2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8003318:	4b1a      	ldr	r3, [pc, #104]	; (8003384 <xTaskResumeAll+0xdc>)
 800331a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003328:	2401      	movs	r4, #1
 800332a:	e7d3      	b.n	80032d4 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800332c:	68f3      	ldr	r3, [r6, #12]
 800332e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003330:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003332:	f104 0018 	add.w	r0, r4, #24
 8003336:	f7fe ff64 	bl	8002202 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800333a:	4628      	mov	r0, r5
 800333c:	f7fe ff61 	bl	8002202 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003340:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	2014      	movs	r0, #20
 8003346:	4293      	cmp	r3, r2
 8003348:	fb00 8003 	mla	r0, r0, r3, r8
 800334c:	4629      	mov	r1, r5
 800334e:	bf88      	it	hi
 8003350:	603b      	strhi	r3, [r7, #0]
 8003352:	f7fe ff33 	bl	80021bc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003356:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <xTaskResumeAll+0xe0>)
 8003358:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8003360:	bf22      	ittt	cs
 8003362:	4b07      	ldrcs	r3, [pc, #28]	; (8003380 <xTaskResumeAll+0xd8>)
 8003364:	2201      	movcs	r2, #1
 8003366:	601a      	strcs	r2, [r3, #0]
 8003368:	e7c1      	b.n	80032ee <xTaskResumeAll+0x46>
 800336a:	bf00      	nop
 800336c:	200059d0 	.word	0x200059d0
 8003370:	200059c4 	.word	0x200059c4
 8003374:	20005a0c 	.word	0x20005a0c
 8003378:	200059d8 	.word	0x200059d8
 800337c:	200059cc 	.word	0x200059cc
 8003380:	20005a50 	.word	0x20005a50
 8003384:	e000ed04 	.word	0xe000ed04
 8003388:	20005558 	.word	0x20005558
 800338c:	20005564 	.word	0x20005564

08003390 <vTaskDelay>:
	{
 8003390:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003392:	b940      	cbnz	r0, 80033a6 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003394:	4b0e      	ldr	r3, [pc, #56]	; (80033d0 <vTaskDelay+0x40>)
 8003396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	f3bf 8f4f 	dsb	sy
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <vTaskDelay+0x44>)
 80033a8:	6819      	ldr	r1, [r3, #0]
 80033aa:	b141      	cbz	r1, 80033be <vTaskDelay+0x2e>
 80033ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	e7fe      	b.n	80033bc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80033be:	f7ff fed5 	bl	800316c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80033c2:	f7ff fdf1 	bl	8002fa8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80033c6:	f7ff ff6f 	bl	80032a8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80033ca:	2800      	cmp	r0, #0
 80033cc:	d0e2      	beq.n	8003394 <vTaskDelay+0x4>
 80033ce:	bd08      	pop	{r3, pc}
 80033d0:	e000ed04 	.word	0xe000ed04
 80033d4:	200059d0 	.word	0x200059d0

080033d8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033d8:	4b18      	ldr	r3, [pc, #96]	; (800343c <vTaskSwitchContext+0x64>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4b18      	ldr	r3, [pc, #96]	; (8003440 <vTaskSwitchContext+0x68>)
{
 80033de:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033e0:	b112      	cbz	r2, 80033e8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80033e2:	2201      	movs	r2, #1
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80033e8:	4d16      	ldr	r5, [pc, #88]	; (8003444 <vTaskSwitchContext+0x6c>)
		xYieldPending = pdFALSE;
 80033ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80033ec:	4a16      	ldr	r2, [pc, #88]	; (8003448 <vTaskSwitchContext+0x70>)
 80033ee:	682b      	ldr	r3, [r5, #0]
 80033f0:	2714      	movs	r7, #20
 80033f2:	4616      	mov	r6, r2
 80033f4:	fb07 f103 	mul.w	r1, r7, r3
 80033f8:	1850      	adds	r0, r2, r1
 80033fa:	5854      	ldr	r4, [r2, r1]
 80033fc:	b18c      	cbz	r4, 8003422 <vTaskSwitchContext+0x4a>
 80033fe:	6844      	ldr	r4, [r0, #4]
 8003400:	3108      	adds	r1, #8
 8003402:	6864      	ldr	r4, [r4, #4]
 8003404:	6044      	str	r4, [r0, #4]
 8003406:	440a      	add	r2, r1
 8003408:	4294      	cmp	r4, r2
 800340a:	bf04      	itt	eq
 800340c:	6862      	ldreq	r2, [r4, #4]
 800340e:	6042      	streq	r2, [r0, #4]
 8003410:	2214      	movs	r2, #20
 8003412:	fb02 6203 	mla	r2, r2, r3, r6
 8003416:	6852      	ldr	r2, [r2, #4]
 8003418:	68d1      	ldr	r1, [r2, #12]
 800341a:	4a0c      	ldr	r2, [pc, #48]	; (800344c <vTaskSwitchContext+0x74>)
 800341c:	6011      	str	r1, [r2, #0]
 800341e:	602b      	str	r3, [r5, #0]
 8003420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003422:	b943      	cbnz	r3, 8003436 <vTaskSwitchContext+0x5e>
 8003424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	e7fe      	b.n	8003434 <vTaskSwitchContext+0x5c>
 8003436:	3b01      	subs	r3, #1
 8003438:	e7dc      	b.n	80033f4 <vTaskSwitchContext+0x1c>
 800343a:	bf00      	nop
 800343c:	200059d0 	.word	0x200059d0
 8003440:	20005a50 	.word	0x20005a50
 8003444:	200059d8 	.word	0x200059d8
 8003448:	20005564 	.word	0x20005564
 800344c:	20005558 	.word	0x20005558

08003450 <vTaskPlaceOnEventList>:
{
 8003450:	b510      	push	{r4, lr}
 8003452:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8003454:	b940      	cbnz	r0, 8003468 <vTaskPlaceOnEventList+0x18>
 8003456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345a:	f383 8811 	msr	BASEPRI, r3
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	e7fe      	b.n	8003466 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003468:	4b05      	ldr	r3, [pc, #20]	; (8003480 <vTaskPlaceOnEventList+0x30>)
 800346a:	6819      	ldr	r1, [r3, #0]
 800346c:	3118      	adds	r1, #24
 800346e:	f7fe feb1 	bl	80021d4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003472:	4620      	mov	r0, r4
 8003474:	2101      	movs	r1, #1
}
 8003476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800347a:	f7ff bd95 	b.w	8002fa8 <prvAddCurrentTaskToDelayedList>
 800347e:	bf00      	nop
 8003480:	20005558 	.word	0x20005558

08003484 <vTaskPlaceOnEventListRestricted>:
	{
 8003484:	b538      	push	{r3, r4, r5, lr}
 8003486:	460d      	mov	r5, r1
 8003488:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800348a:	b940      	cbnz	r0, 800349e <vTaskPlaceOnEventListRestricted+0x1a>
 800348c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003490:	f383 8811 	msr	BASEPRI, r3
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	e7fe      	b.n	800349c <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800349e:	4b07      	ldr	r3, [pc, #28]	; (80034bc <vTaskPlaceOnEventListRestricted+0x38>)
 80034a0:	6819      	ldr	r1, [r3, #0]
 80034a2:	3118      	adds	r1, #24
 80034a4:	f7fe fe8a 	bl	80021bc <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80034a8:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80034aa:	4621      	mov	r1, r4
 80034ac:	bf0c      	ite	eq
 80034ae:	4628      	moveq	r0, r5
 80034b0:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80034b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80034b8:	f7ff bd76 	b.w	8002fa8 <prvAddCurrentTaskToDelayedList>
 80034bc:	20005558 	.word	0x20005558

080034c0 <xTaskRemoveFromEventList>:
{
 80034c0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80034c2:	68c3      	ldr	r3, [r0, #12]
 80034c4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80034c6:	b944      	cbnz	r4, 80034da <xTaskRemoveFromEventList+0x1a>
 80034c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	e7fe      	b.n	80034d8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034da:	f104 0518 	add.w	r5, r4, #24
 80034de:	4628      	mov	r0, r5
 80034e0:	f7fe fe8f 	bl	8002202 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034e4:	4b10      	ldr	r3, [pc, #64]	; (8003528 <xTaskRemoveFromEventList+0x68>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	b9db      	cbnz	r3, 8003522 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034ea:	1d25      	adds	r5, r4, #4
 80034ec:	4628      	mov	r0, r5
 80034ee:	f7fe fe88 	bl	8002202 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80034f2:	4a0e      	ldr	r2, [pc, #56]	; (800352c <xTaskRemoveFromEventList+0x6c>)
 80034f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80034f6:	6811      	ldr	r1, [r2, #0]
 80034f8:	428b      	cmp	r3, r1
 80034fa:	bf88      	it	hi
 80034fc:	6013      	strhi	r3, [r2, #0]
 80034fe:	4a0c      	ldr	r2, [pc, #48]	; (8003530 <xTaskRemoveFromEventList+0x70>)
 8003500:	2014      	movs	r0, #20
 8003502:	4629      	mov	r1, r5
 8003504:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003508:	f7fe fe58 	bl	80021bc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800350c:	4b09      	ldr	r3, [pc, #36]	; (8003534 <xTaskRemoveFromEventList+0x74>)
 800350e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8003516:	bf83      	ittte	hi
 8003518:	4b07      	ldrhi	r3, [pc, #28]	; (8003538 <xTaskRemoveFromEventList+0x78>)
 800351a:	2001      	movhi	r0, #1
 800351c:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 800351e:	2000      	movls	r0, #0
}
 8003520:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003522:	4629      	mov	r1, r5
 8003524:	4805      	ldr	r0, [pc, #20]	; (800353c <xTaskRemoveFromEventList+0x7c>)
 8003526:	e7ef      	b.n	8003508 <xTaskRemoveFromEventList+0x48>
 8003528:	200059d0 	.word	0x200059d0
 800352c:	200059d8 	.word	0x200059d8
 8003530:	20005564 	.word	0x20005564
 8003534:	20005558 	.word	0x20005558
 8003538:	20005a50 	.word	0x20005a50
 800353c:	20005a0c 	.word	0x20005a0c

08003540 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003540:	4b03      	ldr	r3, [pc, #12]	; (8003550 <vTaskInternalSetTimeOutState+0x10>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003546:	4b03      	ldr	r3, [pc, #12]	; (8003554 <vTaskInternalSetTimeOutState+0x14>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6043      	str	r3, [r0, #4]
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	20005a08 	.word	0x20005a08
 8003554:	20005a4c 	.word	0x20005a4c

08003558 <xTaskCheckForTimeOut>:
{
 8003558:	b570      	push	{r4, r5, r6, lr}
 800355a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800355c:	4605      	mov	r5, r0
 800355e:	b940      	cbnz	r0, 8003572 <xTaskCheckForTimeOut+0x1a>
 8003560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	e7fe      	b.n	8003570 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8003572:	b941      	cbnz	r1, 8003586 <xTaskCheckForTimeOut+0x2e>
 8003574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003578:	f383 8811 	msr	BASEPRI, r3
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	e7fe      	b.n	8003584 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8003586:	f7fe feb5 	bl	80022f4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800358a:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800358c:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 800358e:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003590:	6823      	ldr	r3, [r4, #0]
 8003592:	1c58      	adds	r0, r3, #1
 8003594:	d00e      	beq.n	80035b4 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003596:	480d      	ldr	r0, [pc, #52]	; (80035cc <xTaskCheckForTimeOut+0x74>)
 8003598:	682e      	ldr	r6, [r5, #0]
 800359a:	6800      	ldr	r0, [r0, #0]
 800359c:	4286      	cmp	r6, r0
 800359e:	d001      	beq.n	80035a4 <xTaskCheckForTimeOut+0x4c>
 80035a0:	428a      	cmp	r2, r1
 80035a2:	d20e      	bcs.n	80035c2 <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035a4:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d209      	bcs.n	80035be <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80035ae:	4628      	mov	r0, r5
 80035b0:	f7ff ffc6 	bl	8003540 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80035b4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80035b6:	f7fe febf 	bl	8002338 <vPortExitCritical>
}
 80035ba:	4620      	mov	r0, r4
 80035bc:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80035c2:	2401      	movs	r4, #1
 80035c4:	e7f7      	b.n	80035b6 <xTaskCheckForTimeOut+0x5e>
 80035c6:	bf00      	nop
 80035c8:	20005a4c 	.word	0x20005a4c
 80035cc:	20005a08 	.word	0x20005a08

080035d0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80035d0:	4b01      	ldr	r3, [pc, #4]	; (80035d8 <vTaskMissedYield+0x8>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	4770      	bx	lr
 80035d8:	20005a50 	.word	0x20005a50

080035dc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80035dc:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <xTaskGetSchedulerState+0x18>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	b133      	cbz	r3, 80035f0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035e2:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <xTaskGetSchedulerState+0x1c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80035e8:	bf0c      	ite	eq
 80035ea:	2002      	moveq	r0, #2
 80035ec:	2000      	movne	r0, #0
 80035ee:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80035f0:	2001      	movs	r0, #1
	}
 80035f2:	4770      	bx	lr
 80035f4:	20005a20 	.word	0x20005a20
 80035f8:	200059d0 	.word	0x200059d0

080035fc <xTaskPriorityDisinherit>:
	{
 80035fc:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 80035fe:	4604      	mov	r4, r0
 8003600:	b908      	cbnz	r0, 8003606 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8003602:	2000      	movs	r0, #0
 8003604:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8003606:	4b1b      	ldr	r3, [pc, #108]	; (8003674 <xTaskPriorityDisinherit+0x78>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4298      	cmp	r0, r3
 800360c:	d008      	beq.n	8003620 <xTaskPriorityDisinherit+0x24>
 800360e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	e7fe      	b.n	800361e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003620:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003622:	b943      	cbnz	r3, 8003636 <xTaskPriorityDisinherit+0x3a>
 8003624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	e7fe      	b.n	8003634 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003636:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003638:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800363a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800363c:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800363e:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003640:	d0df      	beq.n	8003602 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1dd      	bne.n	8003602 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003646:	1d05      	adds	r5, r0, #4
 8003648:	4628      	mov	r0, r5
 800364a:	f7fe fdda 	bl	8002202 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800364e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003650:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003652:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003656:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003658:	4a07      	ldr	r2, [pc, #28]	; (8003678 <xTaskPriorityDisinherit+0x7c>)
 800365a:	6811      	ldr	r1, [r2, #0]
 800365c:	428b      	cmp	r3, r1
 800365e:	bf88      	it	hi
 8003660:	6013      	strhi	r3, [r2, #0]
 8003662:	4a06      	ldr	r2, [pc, #24]	; (800367c <xTaskPriorityDisinherit+0x80>)
 8003664:	2014      	movs	r0, #20
 8003666:	fb00 2003 	mla	r0, r0, r3, r2
 800366a:	4629      	mov	r1, r5
 800366c:	f7fe fda6 	bl	80021bc <vListInsertEnd>
					xReturn = pdTRUE;
 8003670:	2001      	movs	r0, #1
	}
 8003672:	bd38      	pop	{r3, r4, r5, pc}
 8003674:	20005558 	.word	0x20005558
 8003678:	200059d8 	.word	0x200059d8
 800367c:	20005564 	.word	0x20005564

08003680 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8003682:	4c11      	ldr	r4, [pc, #68]	; (80036c8 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8003684:	f7fe fe36 	bl	80022f4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8003688:	6825      	ldr	r5, [r4, #0]
 800368a:	b9bd      	cbnz	r5, 80036bc <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800368c:	4f0f      	ldr	r7, [pc, #60]	; (80036cc <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800368e:	4e10      	ldr	r6, [pc, #64]	; (80036d0 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8003690:	4638      	mov	r0, r7
 8003692:	f7fe fd85 	bl	80021a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003696:	4630      	mov	r0, r6
 8003698:	f7fe fd82 	bl	80021a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800369c:	4b0d      	ldr	r3, [pc, #52]	; (80036d4 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800369e:	4a0e      	ldr	r2, [pc, #56]	; (80036d8 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 80036a0:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80036a2:	4b0e      	ldr	r3, [pc, #56]	; (80036dc <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80036a4:	210c      	movs	r1, #12
			pxOverflowTimerList = &xActiveTimerList2;
 80036a6:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80036a8:	200a      	movs	r0, #10
 80036aa:	9500      	str	r5, [sp, #0]
 80036ac:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <prvCheckForValidListAndQueue+0x60>)
 80036ae:	f7ff f923 	bl	80028f8 <xQueueGenericCreateStatic>
 80036b2:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80036b4:	b110      	cbz	r0, 80036bc <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80036b6:	490b      	ldr	r1, [pc, #44]	; (80036e4 <prvCheckForValidListAndQueue+0x64>)
 80036b8:	f7ff fb24 	bl	8002d04 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80036bc:	b003      	add	sp, #12
 80036be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80036c2:	f7fe be39 	b.w	8002338 <vPortExitCritical>
 80036c6:	bf00      	nop
 80036c8:	20005b48 	.word	0x20005b48
 80036cc:	20005ad4 	.word	0x20005ad4
 80036d0:	20005ae8 	.word	0x20005ae8
 80036d4:	20005a54 	.word	0x20005a54
 80036d8:	20005a5c 	.word	0x20005a5c
 80036dc:	20005a58 	.word	0x20005a58
 80036e0:	20005b00 	.word	0x20005b00
 80036e4:	080052a5 	.word	0x080052a5

080036e8 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 80036e8:	4291      	cmp	r1, r2
{
 80036ea:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80036ec:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80036ee:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80036f0:	d80a      	bhi.n	8003708 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036f2:	1ad2      	subs	r2, r2, r3
 80036f4:	6983      	ldr	r3, [r0, #24]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d20d      	bcs.n	8003716 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80036fa:	4b08      	ldr	r3, [pc, #32]	; (800371c <prvInsertTimerInActiveList+0x34>)
 80036fc:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	f7fe fd68 	bl	80021d4 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8003704:	2000      	movs	r0, #0
 8003706:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003708:	429a      	cmp	r2, r3
 800370a:	d201      	bcs.n	8003710 <prvInsertTimerInActiveList+0x28>
 800370c:	4299      	cmp	r1, r3
 800370e:	d202      	bcs.n	8003716 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003710:	1d01      	adds	r1, r0, #4
 8003712:	4b03      	ldr	r3, [pc, #12]	; (8003720 <prvInsertTimerInActiveList+0x38>)
 8003714:	e7f3      	b.n	80036fe <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8003716:	2001      	movs	r0, #1
}
 8003718:	bd08      	pop	{r3, pc}
 800371a:	bf00      	nop
 800371c:	20005a58 	.word	0x20005a58
 8003720:	20005a54 	.word	0x20005a54

08003724 <xTimerCreateTimerTask>:
{
 8003724:	b510      	push	{r4, lr}
 8003726:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8003728:	f7ff ffaa 	bl	8003680 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800372c:	4b13      	ldr	r3, [pc, #76]	; (800377c <xTimerCreateTimerTask+0x58>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	b943      	cbnz	r3, 8003744 <xTimerCreateTimerTask+0x20>
 8003732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003736:	f383 8811 	msr	BASEPRI, r3
 800373a:	f3bf 8f6f 	isb	sy
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	e7fe      	b.n	8003742 <xTimerCreateTimerTask+0x1e>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003744:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003746:	aa07      	add	r2, sp, #28
 8003748:	a906      	add	r1, sp, #24
 800374a:	a805      	add	r0, sp, #20
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800374c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800374e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003750:	f7fe fd1a 	bl	8002188 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003754:	9b05      	ldr	r3, [sp, #20]
 8003756:	9302      	str	r3, [sp, #8]
 8003758:	9b06      	ldr	r3, [sp, #24]
 800375a:	9301      	str	r3, [sp, #4]
 800375c:	2302      	movs	r3, #2
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	9a07      	ldr	r2, [sp, #28]
 8003762:	4907      	ldr	r1, [pc, #28]	; (8003780 <xTimerCreateTimerTask+0x5c>)
 8003764:	4807      	ldr	r0, [pc, #28]	; (8003784 <xTimerCreateTimerTask+0x60>)
 8003766:	4623      	mov	r3, r4
 8003768:	f7ff fc58 	bl	800301c <xTaskCreateStatic>
 800376c:	4b06      	ldr	r3, [pc, #24]	; (8003788 <xTimerCreateTimerTask+0x64>)
 800376e:	6018      	str	r0, [r3, #0]
	configASSERT( xReturn );
 8003770:	2800      	cmp	r0, #0
 8003772:	d0de      	beq.n	8003732 <xTimerCreateTimerTask+0xe>
}
 8003774:	2001      	movs	r0, #1
 8003776:	b008      	add	sp, #32
 8003778:	bd10      	pop	{r4, pc}
 800377a:	bf00      	nop
 800377c:	20005b48 	.word	0x20005b48
 8003780:	080052aa 	.word	0x080052aa
 8003784:	08003861 	.word	0x08003861
 8003788:	20005b4c 	.word	0x20005b4c

0800378c <xTimerGenericCommand>:
{
 800378c:	b530      	push	{r4, r5, lr}
 800378e:	4615      	mov	r5, r2
 8003790:	b085      	sub	sp, #20
 8003792:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8003794:	4603      	mov	r3, r0
 8003796:	b940      	cbnz	r0, 80037aa <xTimerGenericCommand+0x1e>
 8003798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379c:	f383 8811 	msr	BASEPRI, r3
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	e7fe      	b.n	80037a8 <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 80037aa:	4c0d      	ldr	r4, [pc, #52]	; (80037e0 <xTimerGenericCommand+0x54>)
 80037ac:	6820      	ldr	r0, [r4, #0]
 80037ae:	b180      	cbz	r0, 80037d2 <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80037b0:	2905      	cmp	r1, #5
		xMessage.xMessageID = xCommandID;
 80037b2:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80037b4:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80037b6:	9303      	str	r3, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80037b8:	dc0d      	bgt.n	80037d6 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80037ba:	f7ff ff0f 	bl	80035dc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80037be:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80037c0:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80037c2:	bf08      	it	eq
 80037c4:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80037c6:	6820      	ldr	r0, [r4, #0]
 80037c8:	bf18      	it	ne
 80037ca:	461a      	movne	r2, r3
 80037cc:	a901      	add	r1, sp, #4
 80037ce:	f7ff f8dd 	bl	800298c <xQueueGenericSend>
}
 80037d2:	b005      	add	sp, #20
 80037d4:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80037d6:	2300      	movs	r3, #0
 80037d8:	a901      	add	r1, sp, #4
 80037da:	f7ff f98d 	bl	8002af8 <xQueueGenericSendFromISR>
 80037de:	e7f8      	b.n	80037d2 <xTimerGenericCommand+0x46>
 80037e0:	20005b48 	.word	0x20005b48

080037e4 <prvSwitchTimerLists>:
{
 80037e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80037e8:	4d1b      	ldr	r5, [pc, #108]	; (8003858 <prvSwitchTimerLists+0x74>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80037ea:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80037ee:	682b      	ldr	r3, [r5, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	b932      	cbnz	r2, 8003802 <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 80037f4:	4a19      	ldr	r2, [pc, #100]	; (800385c <prvSwitchTimerLists+0x78>)
 80037f6:	6811      	ldr	r1, [r2, #0]
 80037f8:	6029      	str	r1, [r5, #0]
	pxOverflowTimerList = pxTemp;
 80037fa:	6013      	str	r3, [r2, #0]
}
 80037fc:	b002      	add	sp, #8
 80037fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003802:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003804:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003806:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003808:	1d27      	adds	r7, r4, #4
 800380a:	4638      	mov	r0, r7
 800380c:	f7fe fcf9 	bl	8002202 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003810:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003812:	4620      	mov	r0, r4
 8003814:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003816:	69e3      	ldr	r3, [r4, #28]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d1e8      	bne.n	80037ee <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800381c:	69a3      	ldr	r3, [r4, #24]
 800381e:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8003820:	429e      	cmp	r6, r3
 8003822:	d206      	bcs.n	8003832 <prvSwitchTimerLists+0x4e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003824:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003826:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003828:	4639      	mov	r1, r7
 800382a:	6828      	ldr	r0, [r5, #0]
 800382c:	f7fe fcd2 	bl	80021d4 <vListInsert>
 8003830:	e7dd      	b.n	80037ee <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003832:	2300      	movs	r3, #0
 8003834:	f8cd 8000 	str.w	r8, [sp]
 8003838:	4632      	mov	r2, r6
 800383a:	4619      	mov	r1, r3
 800383c:	4620      	mov	r0, r4
 800383e:	f7ff ffa5 	bl	800378c <xTimerGenericCommand>
				configASSERT( xResult );
 8003842:	2800      	cmp	r0, #0
 8003844:	d1d3      	bne.n	80037ee <prvSwitchTimerLists+0xa>
 8003846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384a:	f383 8811 	msr	BASEPRI, r3
 800384e:	f3bf 8f6f 	isb	sy
 8003852:	f3bf 8f4f 	dsb	sy
 8003856:	e7fe      	b.n	8003856 <prvSwitchTimerLists+0x72>
 8003858:	20005a54 	.word	0x20005a54
 800385c:	20005a58 	.word	0x20005a58

08003860 <prvTimerTask>:
{
 8003860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003864:	4d6e      	ldr	r5, [pc, #440]	; (8003a20 <prvTimerTask+0x1c0>)
					portYIELD_WITHIN_API();
 8003866:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8003a30 <prvTimerTask+0x1d0>
{
 800386a:	b089      	sub	sp, #36	; 0x24
 800386c:	462f      	mov	r7, r5
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800386e:	682b      	ldr	r3, [r5, #0]
 8003870:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8003874:	f1bb 0f00 	cmp.w	fp, #0
 8003878:	d043      	beq.n	8003902 <prvTimerTask+0xa2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f8d3 9000 	ldr.w	r9, [r3]
	vTaskSuspendAll();
 8003880:	f7ff fc74 	bl	800316c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8003884:	f7ff fc7a 	bl	800317c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003888:	4b66      	ldr	r3, [pc, #408]	; (8003a24 <prvTimerTask+0x1c4>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 800388e:	4682      	mov	sl, r0
 8003890:	461e      	mov	r6, r3
	if( xTimeNow < xLastTime )
 8003892:	d238      	bcs.n	8003906 <prvTimerTask+0xa6>
 8003894:	9303      	str	r3, [sp, #12]
		prvSwitchTimerLists();
 8003896:	f7ff ffa5 	bl	80037e4 <prvSwitchTimerLists>
 800389a:	9b03      	ldr	r3, [sp, #12]
		*pxTimerListsWereSwitched = pdTRUE;
 800389c:	2401      	movs	r4, #1
	xLastTime = xTimeNow;
 800389e:	f8c3 a000 	str.w	sl, [r3]
		if( xTimerListsWereSwitched == pdFALSE )
 80038a2:	2c00      	cmp	r4, #0
 80038a4:	f040 8082 	bne.w	80039ac <prvTimerTask+0x14c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80038a8:	f1bb 0f00 	cmp.w	fp, #0
 80038ac:	d063      	beq.n	8003976 <prvTimerTask+0x116>
 80038ae:	45d1      	cmp	r9, sl
 80038b0:	d87a      	bhi.n	80039a8 <prvTimerTask+0x148>
				( void ) xTaskResumeAll();
 80038b2:	f7ff fcf9 	bl	80032a8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038be:	f10b 0004 	add.w	r0, fp, #4
 80038c2:	f7fe fc9e 	bl	8002202 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80038c6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d11d      	bne.n	800390a <prvTimerTask+0xaa>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80038ce:	f8db 1018 	ldr.w	r1, [fp, #24]
 80038d2:	464b      	mov	r3, r9
 80038d4:	4652      	mov	r2, sl
 80038d6:	4449      	add	r1, r9
 80038d8:	4658      	mov	r0, fp
 80038da:	f7ff ff05 	bl	80036e8 <prvInsertTimerInActiveList>
 80038de:	b1a0      	cbz	r0, 800390a <prvTimerTask+0xaa>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80038e0:	9400      	str	r4, [sp, #0]
 80038e2:	4623      	mov	r3, r4
 80038e4:	464a      	mov	r2, r9
 80038e6:	4621      	mov	r1, r4
 80038e8:	4658      	mov	r0, fp
 80038ea:	f7ff ff4f 	bl	800378c <xTimerGenericCommand>
			configASSERT( xResult );
 80038ee:	b960      	cbnz	r0, 800390a <prvTimerTask+0xaa>
 80038f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	e7fe      	b.n	8003900 <prvTimerTask+0xa0>
		xNextExpireTime = ( TickType_t ) 0U;
 8003902:	46d9      	mov	r9, fp
 8003904:	e7bc      	b.n	8003880 <prvTimerTask+0x20>
		*pxTimerListsWereSwitched = pdFALSE;
 8003906:	2400      	movs	r4, #0
 8003908:	e7c9      	b.n	800389e <prvTimerTask+0x3e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800390a:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 800390e:	4658      	mov	r0, fp
 8003910:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003912:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8003a2c <prvTimerTask+0x1cc>
 8003916:	f8d9 0000 	ldr.w	r0, [r9]
 800391a:	2200      	movs	r2, #0
 800391c:	a905      	add	r1, sp, #20
 800391e:	f7ff f94d 	bl	8002bbc <xQueueReceive>
 8003922:	2800      	cmp	r0, #0
 8003924:	d0a3      	beq.n	800386e <prvTimerTask+0xe>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003926:	9b05      	ldr	r3, [sp, #20]
 8003928:	2b00      	cmp	r3, #0
 800392a:	dbf4      	blt.n	8003916 <prvTimerTask+0xb6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800392c:	9c07      	ldr	r4, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800392e:	6963      	ldr	r3, [r4, #20]
 8003930:	b113      	cbz	r3, 8003938 <prvTimerTask+0xd8>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003932:	1d20      	adds	r0, r4, #4
 8003934:	f7fe fc65 	bl	8002202 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8003938:	f7ff fc20 	bl	800317c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800393c:	6833      	ldr	r3, [r6, #0]
 800393e:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8003940:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8003942:	d201      	bcs.n	8003948 <prvTimerTask+0xe8>
		prvSwitchTimerLists();
 8003944:	f7ff ff4e 	bl	80037e4 <prvSwitchTimerLists>
 8003948:	9a05      	ldr	r2, [sp, #20]
	xLastTime = xTimeNow;
 800394a:	f8c6 b000 	str.w	fp, [r6]
 800394e:	2a09      	cmp	r2, #9
 8003950:	d8e1      	bhi.n	8003916 <prvTimerTask+0xb6>
 8003952:	2301      	movs	r3, #1
 8003954:	4093      	lsls	r3, r2
 8003956:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 800395a:	d14e      	bne.n	80039fa <prvTimerTask+0x19a>
 800395c:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 8003960:	d127      	bne.n	80039b2 <prvTimerTask+0x152>
 8003962:	069b      	lsls	r3, r3, #26
 8003964:	d5d7      	bpl.n	8003916 <prvTimerTask+0xb6>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003966:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1d3      	bne.n	8003916 <prvTimerTask+0xb6>
							vPortFree( pxTimer );
 800396e:	4620      	mov	r0, r4
 8003970:	f7fe febe 	bl	80026f0 <vPortFree>
 8003974:	e7cf      	b.n	8003916 <prvTimerTask+0xb6>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003976:	4b2c      	ldr	r3, [pc, #176]	; (8003a28 <prvTimerTask+0x1c8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	fab2 f282 	clz	r2, r2
 8003980:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003982:	4b2a      	ldr	r3, [pc, #168]	; (8003a2c <prvTimerTask+0x1cc>)
 8003984:	eba9 010a 	sub.w	r1, r9, sl
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	f7ff f9cd 	bl	8002d28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800398e:	f7ff fc8b 	bl	80032a8 <xTaskResumeAll>
 8003992:	2800      	cmp	r0, #0
 8003994:	d1bd      	bne.n	8003912 <prvTimerTask+0xb2>
					portYIELD_WITHIN_API();
 8003996:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800399a:	f8c8 3000 	str.w	r3, [r8]
 800399e:	f3bf 8f4f 	dsb	sy
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	e7b4      	b.n	8003912 <prvTimerTask+0xb2>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80039a8:	4622      	mov	r2, r4
 80039aa:	e7ea      	b.n	8003982 <prvTimerTask+0x122>
			( void ) xTaskResumeAll();
 80039ac:	f7ff fc7c 	bl	80032a8 <xTaskResumeAll>
 80039b0:	e7af      	b.n	8003912 <prvTimerTask+0xb2>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80039b2:	69a1      	ldr	r1, [r4, #24]
 80039b4:	9b06      	ldr	r3, [sp, #24]
 80039b6:	465a      	mov	r2, fp
 80039b8:	4419      	add	r1, r3
 80039ba:	4620      	mov	r0, r4
 80039bc:	f7ff fe94 	bl	80036e8 <prvInsertTimerInActiveList>
 80039c0:	2800      	cmp	r0, #0
 80039c2:	d0a8      	beq.n	8003916 <prvTimerTask+0xb6>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039c6:	4620      	mov	r0, r4
 80039c8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80039ca:	69e3      	ldr	r3, [r4, #28]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d1a2      	bne.n	8003916 <prvTimerTask+0xb6>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80039d0:	69a2      	ldr	r2, [r4, #24]
 80039d2:	9906      	ldr	r1, [sp, #24]
 80039d4:	f8cd a000 	str.w	sl, [sp]
 80039d8:	440a      	add	r2, r1
 80039da:	4653      	mov	r3, sl
 80039dc:	4651      	mov	r1, sl
 80039de:	4620      	mov	r0, r4
 80039e0:	f7ff fed4 	bl	800378c <xTimerGenericCommand>
							configASSERT( xResult );
 80039e4:	2800      	cmp	r0, #0
 80039e6:	d196      	bne.n	8003916 <prvTimerTask+0xb6>
 80039e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ec:	f383 8811 	msr	BASEPRI, r3
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	e7fe      	b.n	80039f8 <prvTimerTask+0x198>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80039fa:	9906      	ldr	r1, [sp, #24]
 80039fc:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80039fe:	b941      	cbnz	r1, 8003a12 <prvTimerTask+0x1b2>
 8003a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a04:	f383 8811 	msr	BASEPRI, r3
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	e7fe      	b.n	8003a10 <prvTimerTask+0x1b0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003a12:	465b      	mov	r3, fp
 8003a14:	465a      	mov	r2, fp
 8003a16:	4459      	add	r1, fp
 8003a18:	4620      	mov	r0, r4
 8003a1a:	f7ff fe65 	bl	80036e8 <prvInsertTimerInActiveList>
 8003a1e:	e77a      	b.n	8003916 <prvTimerTask+0xb6>
 8003a20:	20005a54 	.word	0x20005a54
 8003a24:	20005afc 	.word	0x20005afc
 8003a28:	20005a58 	.word	0x20005a58
 8003a2c:	20005b48 	.word	0x20005b48
 8003a30:	e000ed04 	.word	0xe000ed04

08003a34 <LCD_print_String_prefix>:

uint8_t LCD_print_String_prefix()
{
	uint8_t kk=0;

	tx[kk++]=LCD_CO_MORE_CONTROL_BYTE_ON
 8003a34:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <LCD_print_String_prefix+0x14>)
 8003a36:	22c0      	movs	r2, #192	; 0xc0
 8003a38:	701a      	strb	r2, [r3, #0]
			| LCD_DATA_TYPE
			| 0;//0xC0
	tx[kk++]=0; // what is it? i don't know

	tx[kk++]=LCD_CO_MORE_CONTROL_BYTE_OFF
 8003a3a:	2140      	movs	r1, #64	; 0x40
	tx[kk++]=0; // what is it? i don't know
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	705a      	strb	r2, [r3, #1]
	tx[kk++]=LCD_CO_MORE_CONTROL_BYTE_OFF
 8003a40:	7099      	strb	r1, [r3, #2]
		| LCD_DATA_TYPE //  0X40
		;
	tx[kk++]=0;// what is it? i don't know
 8003a42:	70da      	strb	r2, [r3, #3]
				| LCD_ENTRY_MODE_SET_SHIFT_DISPLAY_OFF;
	//tx[2]=LCD_CO_MORE_CONTROL_BYTE_OFF | LCD_DATA_TYPE;
	tx[5]=0;//LCD_DISPLAY_ON_OFF | LCD_DISPLAY_OFF_BIT | LCD_CURSOR_OFF_BIT | LCD_CURSOR_POSITION_OFF_BIT;//
*/
	return kk;
}
 8003a44:	2004      	movs	r0, #4
 8003a46:	4770      	bx	lr
 8003a48:	20005c68 	.word	0x20005c68

08003a4c <LCD_enable>:
{

}

void LCD_enable(void)
{
 8003a4c:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8003a4e:	4c0a      	ldr	r4, [pc, #40]	; (8003a78 <LCD_enable+0x2c>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	2102      	movs	r1, #2
 8003a54:	4620      	mov	r0, r4
 8003a56:	f7fc ff2b 	bl	80008b0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8003a5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a5e:	f7fc fdc3 	bl	80005e8 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8003a62:	4620      	mov	r0, r4
 8003a64:	2201      	movs	r2, #1
 8003a66:	2102      	movs	r1, #2
 8003a68:	f7fc ff22 	bl	80008b0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8003a6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 8003a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(500);
 8003a74:	f7fc bdb8 	b.w	80005e8 <HAL_Delay>
 8003a78:	40020400 	.word	0x40020400

08003a7c <LCD_SendCommands>:

	return;
}

void LCD_SendCommands(uint8_t *buf, uint8_t size)
{
 8003a7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a7e:	4604      	mov	r4, r0
	HAL_StatusTypeDef res;

	printf(">> ");
 8003a80:	480e      	ldr	r0, [pc, #56]	; (8003abc <LCD_SendCommands+0x40>)

	for(int jj=0; jj < size; jj++)
	{
		printf("0x%.2X ",*(buf+jj));
 8003a82:	4f0f      	ldr	r7, [pc, #60]	; (8003ac0 <LCD_SendCommands+0x44>)
{
 8003a84:	460e      	mov	r6, r1
	printf(">> ");
 8003a86:	f000 fc59 	bl	800433c <iprintf>
	for(int jj=0; jj < size; jj++)
 8003a8a:	4625      	mov	r5, r4
 8003a8c:	1b2b      	subs	r3, r5, r4
 8003a8e:	429e      	cmp	r6, r3
 8003a90:	dc0e      	bgt.n	8003ab0 <LCD_SendCommands+0x34>
	}

	printf("\n");
 8003a92:	200a      	movs	r0, #10
 8003a94:	f000 fc6a 	bl	800436c <putchar>

	HAL_I2C_Master_Transmit(pI2C_LCD, LCD_ADDR, buf, size , HAL_MAX_DELAY);
 8003a98:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9c:	4809      	ldr	r0, [pc, #36]	; (8003ac4 <LCD_SendCommands+0x48>)
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	4622      	mov	r2, r4
 8003aa2:	4633      	mov	r3, r6
 8003aa4:	217c      	movs	r1, #124	; 0x7c
 8003aa6:	6800      	ldr	r0, [r0, #0]
 8003aa8:	f7fd f888 	bl	8000bbc <HAL_I2C_Master_Transmit>
	//HAL_Delay(1);
}
 8003aac:	b003      	add	sp, #12
 8003aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("0x%.2X ",*(buf+jj));
 8003ab0:	f815 1b01 	ldrb.w	r1, [r5], #1
 8003ab4:	4638      	mov	r0, r7
 8003ab6:	f000 fc41 	bl	800433c <iprintf>
 8003aba:	e7e7      	b.n	8003a8c <LCD_SendCommands+0x10>
 8003abc:	080057b2 	.word	0x080057b2
 8003ac0:	080057b6 	.word	0x080057b6
 8003ac4:	20005d00 	.word	0x20005d00

08003ac8 <LCD_SendDates>:

void LCD_SendDates(uint8_t* buf, uint8_t size)
{
 8003ac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003aca:	4604      	mov	r4, r0
	HAL_StatusTypeDef res;
	printf("-> ");
 8003acc:	4812      	ldr	r0, [pc, #72]	; (8003b18 <LCD_SendDates+0x50>)

	for(int jj=0; jj < size; jj++)
	{
		printf("%.2X ",*(buf+jj));
 8003ace:	4f13      	ldr	r7, [pc, #76]	; (8003b1c <LCD_SendDates+0x54>)
{
 8003ad0:	460e      	mov	r6, r1
	printf("-> ");
 8003ad2:	f000 fc33 	bl	800433c <iprintf>
	for(int jj=0; jj < size; jj++)
 8003ad6:	4625      	mov	r5, r4
 8003ad8:	1b2b      	subs	r3, r5, r4
 8003ada:	429e      	cmp	r6, r3
 8003adc:	dc13      	bgt.n	8003b06 <LCD_SendDates+0x3e>
	}

	printf("\n");
 8003ade:	200a      	movs	r0, #10
 8003ae0:	f000 fc44 	bl	800436c <putchar>

	res = HAL_I2C_Master_Transmit(pI2C_LCD, LCD_ADDR, buf, size, HAL_MAX_DELAY);
 8003ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae8:	480d      	ldr	r0, [pc, #52]	; (8003b20 <LCD_SendDates+0x58>)
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	4622      	mov	r2, r4
 8003aee:	4633      	mov	r3, r6
 8003af0:	217c      	movs	r1, #124	; 0x7c
 8003af2:	6800      	ldr	r0, [r0, #0]
 8003af4:	f7fd f862 	bl	8000bbc <HAL_I2C_Master_Transmit>

	if(res!=HAL_OK)
 8003af8:	b158      	cbz	r0, 8003b12 <LCD_SendDates+0x4a>
	{
		printf(" err Transmit %s\n");
 8003afa:	480a      	ldr	r0, [pc, #40]	; (8003b24 <LCD_SendDates+0x5c>)
	}
}
 8003afc:	b003      	add	sp, #12
 8003afe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		printf(" err Transmit %s\n");
 8003b02:	f000 bc1b 	b.w	800433c <iprintf>
		printf("%.2X ",*(buf+jj));
 8003b06:	f815 1b01 	ldrb.w	r1, [r5], #1
 8003b0a:	4638      	mov	r0, r7
 8003b0c:	f000 fc16 	bl	800433c <iprintf>
 8003b10:	e7e2      	b.n	8003ad8 <LCD_SendDates+0x10>
}
 8003b12:	b003      	add	sp, #12
 8003b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b16:	bf00      	nop
 8003b18:	080057be 	.word	0x080057be
 8003b1c:	080057b8 	.word	0x080057b8
 8003b20:	20005d00 	.word	0x20005d00
 8003b24:	080057c2 	.word	0x080057c2

08003b28 <LCD_SendCommand>:


void LCD_SendCommand( uint8_t cmd)
{
 8003b28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t data[2];
	data[0]=0x80;
 8003b2a:	2380      	movs	r3, #128	; 0x80
 8003b2c:	f88d 300c 	strb.w	r3, [sp, #12]
	data[1]=cmd;
 8003b30:	f88d 000d 	strb.w	r0, [sp, #13]

	HAL_I2C_Master_Transmit(pI2C_LCD, LCD_ADDR, (uint8_t*)data, sizeof(data) , HAL_MAX_DELAY);
 8003b34:	f04f 33ff 	mov.w	r3, #4294967295
 8003b38:	4806      	ldr	r0, [pc, #24]	; (8003b54 <LCD_SendCommand+0x2c>)
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	aa03      	add	r2, sp, #12
 8003b3e:	2302      	movs	r3, #2
 8003b40:	217c      	movs	r1, #124	; 0x7c
 8003b42:	6800      	ldr	r0, [r0, #0]
 8003b44:	f7fd f83a 	bl	8000bbc <HAL_I2C_Master_Transmit>

	HAL_Delay(10);
 8003b48:	200a      	movs	r0, #10
 8003b4a:	f7fc fd4d 	bl	80005e8 <HAL_Delay>
}
 8003b4e:	b005      	add	sp, #20
 8003b50:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b54:	20005d00 	.word	0x20005d00

08003b58 <before_LCD_print>:
{
 8003b58:	b510      	push	{r4, lr}
 8003b5a:	4604      	mov	r4, r0
	tx[kk++]=LCD_CO_MORE_CONTROL_BYTE_ON | LCD_INSTRUCTION_TYPE; //0x80;
 8003b5c:	4808      	ldr	r0, [pc, #32]	; (8003b80 <before_LCD_print+0x28>)
 8003b5e:	2380      	movs	r3, #128	; 0x80
 8003b60:	7003      	strb	r3, [r0, #0]
	tx[kk++]=LCD_CO_MORE_CONTROL_BYTE_ON | LCD_INSTRUCTION_TYPE
 8003b62:	7083      	strb	r3, [r0, #2]
	tx[kk++]=0b00000000;// ?????
 8003b64:	2200      	movs	r2, #0
	tx[kk++]=0b00010000;// ?????
 8003b66:	2310      	movs	r3, #16
	LCD_SendCommands(tx,kk);
 8003b68:	2104      	movs	r1, #4
	tx[kk++]=0b00000000;// ?????
 8003b6a:	7042      	strb	r2, [r0, #1]
	tx[kk++]=0b00010000;// ?????
 8003b6c:	70c3      	strb	r3, [r0, #3]
	LCD_SendCommands(tx,kk);
 8003b6e:	f7ff ff85 	bl	8003a7c <LCD_SendCommands>
	LCD_SendCommand(0xB0+numString); // Set DDRAM address 1011 XXXX
 8003b72:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 8003b76:	b2c0      	uxtb	r0, r0
}
 8003b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LCD_SendCommand(0xB0+numString); // Set DDRAM address 1011 XXXX
 8003b7c:	f7ff bfd4 	b.w	8003b28 <LCD_SendCommand>
 8003b80:	20005c68 	.word	0x20005c68

08003b84 <LCD_print_String>:
{
 8003b84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b88:	4680      	mov	r8, r0
	before_LCD_print(numString);
 8003b8a:	4608      	mov	r0, r1
{
 8003b8c:	e88d 000c 	stmia.w	sp, {r2, r3}
	before_LCD_print(numString);
 8003b90:	f7ff ffe2 	bl	8003b58 <before_LCD_print>
	uint8_t kk=LCD_print_String_prefix();
 8003b94:	f7ff ff4e 	bl	8003a34 <LCD_print_String_prefix>
 8003b98:	4605      	mov	r5, r0
	uint8_t len=strlen(str);
 8003b9a:	4640      	mov	r0, r8
 8003b9c:	f7fc fb18 	bl	80001d0 <strlen>
 8003ba0:	f8df c078 	ldr.w	ip, [pc, #120]	; 8003c1c <LCD_print_String+0x98>
 8003ba4:	fa5f fe80 	uxtb.w	lr, r0
 8003ba8:	481b      	ldr	r0, [pc, #108]	; (8003c18 <LCD_print_String+0x94>)
 8003baa:	2400      	movs	r4, #0
 8003bac:	f04f 0906 	mov.w	r9, #6
 8003bb0:	f105 0a78 	add.w	sl, r5, #120	; 0x78
		if(ii < len )
 8003bb4:	b2e3      	uxtb	r3, r4
 8003bb6:	459e      	cmp	lr, r3
			ch=str[ii];
 8003bb8:	bf8c      	ite	hi
 8003bba:	f818 2004 	ldrbhi.w	r2, [r8, r4]
		uint8_t ch=0x00;
 8003bbe:	2200      	movls	r2, #0
 8003bc0:	fb09 f104 	mul.w	r1, r9, r4
 8003bc4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003bc8:	eb05 0b01 	add.w	fp, r5, r1
 8003bcc:	4462      	add	r2, ip
 8003bce:	ebaa 0101 	sub.w	r1, sl, r1
 8003bd2:	2300      	movs	r3, #0
			if(ll < LCD_SYMBOL_WIDTH)
 8003bd4:	2b05      	cmp	r3, #5
 8003bd6:	d01c      	beq.n	8003c12 <LCD_print_String+0x8e>
				if(reverseSymbol == LCD_REVERSE_SYMBOL_ON)
 8003bd8:	9e01      	ldr	r6, [sp, #4]
 8003bda:	2e01      	cmp	r6, #1
					b=FontTable[ch][4-ll];
 8003bdc:	bf0a      	itet	eq
 8003bde:	1ad6      	subeq	r6, r2, r3
					b=FontTable[ch][ll];
 8003be0:	5cd6      	ldrbne	r6, [r2, r3]
					b=FontTable[ch][4-ll];
 8003be2:	7936      	ldrbeq	r6, [r6, #4]
			if(reverseSymbols == LCD_REVERSE_SYMBOLS_ON)
 8003be4:	9f00      	ldr	r7, [sp, #0]
 8003be6:	2f01      	cmp	r7, #1
				tx[(LCD_SYMBOLS-1-ii)*(LCD_SYMBOL_WIDTH+LCD_SPACE)+ll+kk+offset]=b;
 8003be8:	bf0c      	ite	eq
 8003bea:	185f      	addeq	r7, r3, r1
				tx[ii*(LCD_SYMBOL_WIDTH+LCD_SPACE)+ll+kk+offset]=b;
 8003bec:	eb03 070b 	addne.w	r7, r3, fp
 8003bf0:	4407      	add	r7, r0
 8003bf2:	3301      	adds	r3, #1
		for(uint8_t ll=0; ll<6 ; ll++)
 8003bf4:	2b06      	cmp	r3, #6
				tx[ii*(LCD_SYMBOL_WIDTH+LCD_SPACE)+ll+kk+offset]=b;
 8003bf6:	707e      	strb	r6, [r7, #1]
		for(uint8_t ll=0; ll<6 ; ll++)
 8003bf8:	d1ec      	bne.n	8003bd4 <LCD_print_String+0x50>
 8003bfa:	3401      	adds	r4, #1
	for(uint8_t ii=0; ii< LCD_SYMBOLS; ii++) //
 8003bfc:	2c15      	cmp	r4, #21
 8003bfe:	d1d9      	bne.n	8003bb4 <LCD_print_String+0x30>
	LCD_SendDates(tx,128+kk);
 8003c00:	f1a5 0180 	sub.w	r1, r5, #128	; 0x80
 8003c04:	4804      	ldr	r0, [pc, #16]	; (8003c18 <LCD_print_String+0x94>)
 8003c06:	b2c9      	uxtb	r1, r1
}
 8003c08:	b003      	add	sp, #12
 8003c0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LCD_SendDates(tx,128+kk);
 8003c0e:	f7ff bf5b 	b.w	8003ac8 <LCD_SendDates>
			uint8_t b=0x00; ///space
 8003c12:	2600      	movs	r6, #0
 8003c14:	e7e6      	b.n	8003be4 <LCD_print_String+0x60>
 8003c16:	bf00      	nop
 8003c18:	20005c68 	.word	0x20005c68
 8003c1c:	080052b2 	.word	0x080052b2

08003c20 <LCD_clear>:
{
 8003c20:	b510      	push	{r4, lr}
	before_LCD_print(numString);
 8003c22:	f7ff ff99 	bl	8003b58 <before_LCD_print>
	uint8_t kk=LCD_print_String_prefix();
 8003c26:	f7ff ff05 	bl	8003a34 <LCD_print_String_prefix>
		tx[ii]=0x00;
 8003c2a:	4909      	ldr	r1, [pc, #36]	; (8003c50 <LCD_clear+0x30>)
	for(uint8_t ii=kk; ii< sizeof(tx); ii++)
 8003c2c:	2300      	movs	r3, #0
		tx[ii]=0x00;
 8003c2e:	4401      	add	r1, r0
 8003c30:	461c      	mov	r4, r3
	for(uint8_t ii=kk; ii< sizeof(tx); ii++)
 8003c32:	18c2      	adds	r2, r0, r3
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	2a95      	cmp	r2, #149	; 0x95
 8003c38:	d907      	bls.n	8003c4a <LCD_clear+0x2a>
	LCD_SendDates(tx,128+kk);
 8003c3a:	f1a0 0180 	sub.w	r1, r0, #128	; 0x80
 8003c3e:	b2c9      	uxtb	r1, r1
 8003c40:	4803      	ldr	r0, [pc, #12]	; (8003c50 <LCD_clear+0x30>)
}
 8003c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LCD_SendDates(tx,128+kk);
 8003c46:	f7ff bf3f 	b.w	8003ac8 <LCD_SendDates>
		tx[ii]=0x00;
 8003c4a:	54cc      	strb	r4, [r1, r3]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	e7f0      	b.n	8003c32 <LCD_clear+0x12>
 8003c50:	20005c68 	.word	0x20005c68

08003c54 <LCD_Init>:
{
 8003c54:	b510      	push	{r4, lr}
 8003c56:	4604      	mov	r4, r0
	LCD_enable();
 8003c58:	f7ff fef8 	bl	8003a4c <LCD_enable>
	pI2C_LCD=h;
 8003c5c:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <LCD_Init+0x44>)
	LCD_SendCommand(LCD_SET_DDRAM_ADDRESS
 8003c5e:	20e2      	movs	r0, #226	; 0xe2
	pI2C_LCD=h;
 8003c60:	601c      	str	r4, [r3, #0]
	LCD_SendCommand(LCD_SET_DDRAM_ADDRESS
 8003c62:	f7ff ff61 	bl	8003b28 <LCD_SendCommand>
	txBuf[kk++]=LCD_CO_MORE_CONTROL_BYTE_ON | LCD_INSTRUCTION_TYPE;//0x80;
 8003c66:	480d      	ldr	r0, [pc, #52]	; (8003c9c <LCD_Init+0x48>)
	txBuf[kk++]=LCD_DISPLAY_ON_OFF
 8003c68:	2208      	movs	r2, #8
 8003c6a:	7042      	strb	r2, [r0, #1]
	txBuf[kk++]=LCD_SET_CGRAM_ADDRESS
 8003c6c:	2240      	movs	r2, #64	; 0x40
 8003c6e:	70c2      	strb	r2, [r0, #3]
	txBuf[kk++]=LCD_FUNCTION_SET
 8003c70:	2222      	movs	r2, #34	; 0x22
	txBuf[kk++]=LCD_CO_MORE_CONTROL_BYTE_ON | LCD_INSTRUCTION_TYPE;//0x80;
 8003c72:	2380      	movs	r3, #128	; 0x80
	txBuf[kk++]=LCD_FUNCTION_SET
 8003c74:	7142      	strb	r2, [r0, #5]
	txBuf[kk++]=LCD_SET_DDRAM_ADDRESS
 8003c76:	22a6      	movs	r2, #166	; 0xa6
	txBuf[kk++]=LCD_CO_MORE_CONTROL_BYTE_ON | LCD_INSTRUCTION_TYPE;//0x80;
 8003c78:	7003      	strb	r3, [r0, #0]
	txBuf[kk++]=LCD_CO_MORE_CONTROL_BYTE_ON | LCD_INSTRUCTION_TYPE;//0x80;
 8003c7a:	7083      	strb	r3, [r0, #2]
	txBuf[kk++]=LCD_CO_MORE_CONTROL_BYTE_ON | LCD_INSTRUCTION_TYPE;//0x80;
 8003c7c:	7103      	strb	r3, [r0, #4]
	txBuf[kk++]=LCD_CO_MORE_CONTROL_BYTE_ON | LCD_INSTRUCTION_TYPE;//0x80;
 8003c7e:	7183      	strb	r3, [r0, #6]
	txBuf[kk++]=LCD_SET_DDRAM_ADDRESS
 8003c80:	71c2      	strb	r2, [r0, #7]
	txBuf[kk++]=LCD_CO_MORE_CONTROL_BYTE_ON | LCD_INSTRUCTION_TYPE;//0x80;
 8003c82:	7203      	strb	r3, [r0, #8]
	txBuf[kk++]=LCD_CO_MORE_CONTROL_BYTE_ON | LCD_INSTRUCTION_TYPE;//0x80;
 8003c84:	7283      	strb	r3, [r0, #10]
	txBuf[kk++]=LCD_FUNCTION_SET
 8003c86:	222f      	movs	r2, #47	; 0x2f
	txBuf[kk++]=LCD_SET_DDRAM_ADDRESS | 0b00101111; // 0x4F 0b10101111; // AF Set DDRAM address 00101111
 8003c88:	23af      	movs	r3, #175	; 0xaf
	txBuf[kk++]=LCD_FUNCTION_SET
 8003c8a:	7242      	strb	r2, [r0, #9]
	txBuf[kk++]=LCD_SET_DDRAM_ADDRESS | 0b00101111; // 0x4F 0b10101111; // AF Set DDRAM address 00101111
 8003c8c:	72c3      	strb	r3, [r0, #11]
	LCD_SendCommands(txBuf,kk);
 8003c8e:	210c      	movs	r1, #12
}
 8003c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LCD_SendCommands(txBuf,kk);
 8003c94:	f7ff bef2 	b.w	8003a7c <LCD_SendCommands>
 8003c98:	20005d00 	.word	0x20005d00
 8003c9c:	20005ba0 	.word	0x20005ba0

08003ca0 <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8003ca0:	b508      	push	{r3, lr}
	char buf[100];

	for(;;)
	{
		/* NOT USED */
		vTaskDelay(1);
 8003ca2:	2001      	movs	r0, #1
 8003ca4:	f7ff fb74 	bl	8003390 <vTaskDelay>
 8003ca8:	e7fb      	b.n	8003ca2 <StartTask02+0x2>
	...

08003cac <StartDefaultTask>:
{
 8003cac:	b508      	push	{r3, lr}
	osDelay(250);
 8003cae:	20fa      	movs	r0, #250	; 0xfa
 8003cb0:	f7fe fa44 	bl	800213c <osDelay>
	LCD_Init(&hi2c1);
 8003cb4:	482c      	ldr	r0, [pc, #176]	; (8003d68 <StartDefaultTask+0xbc>)
		if(HAL_GPIO_ReadPin(KEY2_GPIO_Port,KEY2_Pin) == SET)
 8003cb6:	4d2d      	ldr	r5, [pc, #180]	; (8003d6c <StartDefaultTask+0xc0>)
		else if(HAL_GPIO_ReadPin(KEY1_GPIO_Port,KEY1_Pin) == SET)
 8003cb8:	4e2d      	ldr	r6, [pc, #180]	; (8003d70 <StartDefaultTask+0xc4>)
	LCD_Init(&hi2c1);
 8003cba:	f7ff ffcb 	bl	8003c54 <LCD_Init>
	osDelay(250);
 8003cbe:	20fa      	movs	r0, #250	; 0xfa
 8003cc0:	f7fe fa3c 	bl	800213c <osDelay>
	printf("1 StartDefaultTask\n");
 8003cc4:	482b      	ldr	r0, [pc, #172]	; (8003d74 <StartDefaultTask+0xc8>)
 8003cc6:	f000 fbc1 	bl	800444c <puts>
		if(HAL_GPIO_ReadPin(KEY2_GPIO_Port,KEY2_Pin) == SET)
 8003cca:	2102      	movs	r1, #2
 8003ccc:	4827      	ldr	r0, [pc, #156]	; (8003d6c <StartDefaultTask+0xc0>)
 8003cce:	f7fc fde9 	bl	80008a4 <HAL_GPIO_ReadPin>
 8003cd2:	2801      	cmp	r0, #1
 8003cd4:	4604      	mov	r4, r0
 8003cd6:	d127      	bne.n	8003d28 <StartDefaultTask+0x7c>
			HAL_GPIO_WritePin(KEY2_GPIO_Port,KEY2_Pin,RESET);
 8003cd8:	2200      	movs	r2, #0
 8003cda:	2102      	movs	r1, #2
 8003cdc:	4628      	mov	r0, r5
 8003cde:	f7fc fde7 	bl	80008b0 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8003ce2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ce6:	f7fc fc7f 	bl	80005e8 <HAL_Delay>
			vTaskDelay(1);
 8003cea:	4620      	mov	r0, r4
 8003cec:	f7ff fb50 	bl	8003390 <vTaskDelay>
			LCD_print_String("123456789012345678901\n",0,LCD_REVERSE_SYMBOLS_ON,LCD_REVERSE_SYMBOL_ON);
 8003cf0:	4623      	mov	r3, r4
 8003cf2:	4622      	mov	r2, r4
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4820      	ldr	r0, [pc, #128]	; (8003d78 <StartDefaultTask+0xcc>)
 8003cf8:	f7ff ff44 	bl	8003b84 <LCD_print_String>
			LCD_print_String("Hello World 123456789\n",1,LCD_REVERSE_SYMBOLS_OFF,LCD_REVERSE_SYMBOL_OFF);
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4621      	mov	r1, r4
 8003d02:	481e      	ldr	r0, [pc, #120]	; (8003d7c <StartDefaultTask+0xd0>)
 8003d04:	f7ff ff3e 	bl	8003b84 <LCD_print_String>
			LCD_print_String("Hello World 2\n",2,LCD_REVERSE_SYMBOLS_ON,LCD_REVERSE_SYMBOL_OFF);
 8003d08:	2300      	movs	r3, #0
 8003d0a:	4622      	mov	r2, r4
 8003d0c:	2102      	movs	r1, #2
 8003d0e:	481c      	ldr	r0, [pc, #112]	; (8003d80 <StartDefaultTask+0xd4>)
 8003d10:	f7ff ff38 	bl	8003b84 <LCD_print_String>
			LCD_print_String("Hello World 3\n",3,LCD_REVERSE_SYMBOLS_OFF,LCD_REVERSE_SYMBOL_OFF);
 8003d14:	2300      	movs	r3, #0
 8003d16:	461a      	mov	r2, r3
 8003d18:	2103      	movs	r1, #3
 8003d1a:	481a      	ldr	r0, [pc, #104]	; (8003d84 <StartDefaultTask+0xd8>)
 8003d1c:	f7ff ff32 	bl	8003b84 <LCD_print_String>
		vTaskDelay(1);
 8003d20:	2001      	movs	r0, #1
 8003d22:	f7ff fb35 	bl	8003390 <vTaskDelay>
	{
 8003d26:	e7d0      	b.n	8003cca <StartDefaultTask+0x1e>
		else if(HAL_GPIO_ReadPin(KEY1_GPIO_Port,KEY1_Pin) == SET)
 8003d28:	2101      	movs	r1, #1
 8003d2a:	4811      	ldr	r0, [pc, #68]	; (8003d70 <StartDefaultTask+0xc4>)
 8003d2c:	f7fc fdba 	bl	80008a4 <HAL_GPIO_ReadPin>
 8003d30:	2801      	cmp	r0, #1
 8003d32:	4604      	mov	r4, r0
 8003d34:	d1f4      	bne.n	8003d20 <StartDefaultTask+0x74>
			HAL_GPIO_WritePin(KEY1_GPIO_Port,KEY1_Pin,RESET);
 8003d36:	4601      	mov	r1, r0
 8003d38:	2200      	movs	r2, #0
 8003d3a:	4630      	mov	r0, r6
 8003d3c:	f7fc fdb8 	bl	80008b0 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8003d40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d44:	f7fc fc50 	bl	80005e8 <HAL_Delay>
			vTaskDelay(1);
 8003d48:	4620      	mov	r0, r4
 8003d4a:	f7ff fb21 	bl	8003390 <vTaskDelay>
			LCD_clear(0);
 8003d4e:	2000      	movs	r0, #0
 8003d50:	f7ff ff66 	bl	8003c20 <LCD_clear>
			LCD_clear(1);
 8003d54:	4620      	mov	r0, r4
 8003d56:	f7ff ff63 	bl	8003c20 <LCD_clear>
			LCD_clear(2);
 8003d5a:	2002      	movs	r0, #2
 8003d5c:	f7ff ff60 	bl	8003c20 <LCD_clear>
			LCD_clear(3);
 8003d60:	2003      	movs	r0, #3
 8003d62:	f7ff ff5d 	bl	8003c20 <LCD_clear>
 8003d66:	e7db      	b.n	8003d20 <StartDefaultTask+0x74>
 8003d68:	20005d08 	.word	0x20005d08
 8003d6c:	40020800 	.word	0x40020800
 8003d70:	40020000 	.word	0x40020000
 8003d74:	080057e3 	.word	0x080057e3
 8003d78:	080057f6 	.word	0x080057f6
 8003d7c:	0800580d 	.word	0x0800580d
 8003d80:	08005824 	.word	0x08005824
 8003d84:	08005833 	.word	0x08005833

08003d88 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8003d88:	6802      	ldr	r2, [r0, #0]
 8003d8a:	4b03      	ldr	r3, [pc, #12]	; (8003d98 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d101      	bne.n	8003d94 <HAL_TIM_PeriodElapsedCallback+0xc>
		HAL_IncTick();
 8003d90:	f7fc bc18 	b.w	80005c4 <HAL_IncTick>
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	40001400 	.word	0x40001400

08003d9c <Error_Handler>:
 */
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler\r\n");
 8003d9c:	4801      	ldr	r0, [pc, #4]	; (8003da4 <Error_Handler+0x8>)
 8003d9e:	f000 bb55 	b.w	800444c <puts>
 8003da2:	bf00      	nop
 8003da4:	080057d4 	.word	0x080057d4

08003da8 <SystemClock_Config>:
{
 8003da8:	b510      	push	{r4, lr}
 8003daa:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dac:	2230      	movs	r2, #48	; 0x30
 8003dae:	2100      	movs	r1, #0
 8003db0:	a808      	add	r0, sp, #32
 8003db2:	f000 faba 	bl	800432a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003db6:	2214      	movs	r2, #20
 8003db8:	2100      	movs	r1, #0
 8003dba:	a803      	add	r0, sp, #12
 8003dbc:	f000 fab5 	bl	800432a <memset>
	__HAL_RCC_PWR_CLK_ENABLE();
 8003dc0:	4b20      	ldr	r3, [pc, #128]	; (8003e44 <SystemClock_Config+0x9c>)
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	9101      	str	r1, [sp, #4]
 8003dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dc8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	9301      	str	r3, [sp, #4]
 8003dd6:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dd8:	4b1b      	ldr	r3, [pc, #108]	; (8003e48 <SystemClock_Config+0xa0>)
 8003dda:	9102      	str	r1, [sp, #8]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dea:	9302      	str	r3, [sp, #8]
 8003dec:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003dee:	2301      	movs	r3, #1
 8003df0:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003df6:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003df8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003dfc:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003dfe:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 168;
 8003e00:	22a8      	movs	r2, #168	; 0xa8
	RCC_OscInitStruct.PLL.PLLM = 4;
 8003e02:	2304      	movs	r3, #4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e04:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e06:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8003e08:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8003e0a:	9211      	str	r2, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e0c:	9412      	str	r4, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8003e0e:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e10:	f7fd fd44 	bl	800189c <HAL_RCC_OscConfig>
 8003e14:	b108      	cbz	r0, 8003e1a <SystemClock_Config+0x72>
		Error_Handler();
 8003e16:	f7ff ffc1 	bl	8003d9c <Error_Handler>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e1a:	230f      	movs	r3, #15
 8003e1c:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003e22:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003e26:	9306      	str	r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003e28:	2105      	movs	r1, #5
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003e2e:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e30:	9404      	str	r4, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003e32:	9307      	str	r3, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003e34:	f7fd fee2 	bl	8001bfc <HAL_RCC_ClockConfig>
 8003e38:	b108      	cbz	r0, 8003e3e <SystemClock_Config+0x96>
		Error_Handler();
 8003e3a:	f7ff ffaf 	bl	8003d9c <Error_Handler>
}
 8003e3e:	b014      	add	sp, #80	; 0x50
 8003e40:	bd10      	pop	{r4, pc}
 8003e42:	bf00      	nop
 8003e44:	40023800 	.word	0x40023800
 8003e48:	40007000 	.word	0x40007000

08003e4c <main>:
{
 8003e4c:	b500      	push	{lr}
 8003e4e:	b099      	sub	sp, #100	; 0x64
	HAL_Init();
 8003e50:	f7fc fb9e 	bl	8000590 <HAL_Init>
	SystemClock_Config();
 8003e54:	f7ff ffa8 	bl	8003da8 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e58:	2214      	movs	r2, #20
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	a80f      	add	r0, sp, #60	; 0x3c
 8003e5e:	f000 fa64 	bl	800432a <memset>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003e62:	2400      	movs	r4, #0
 8003e64:	4b55      	ldr	r3, [pc, #340]	; (8003fbc <main+0x170>)
 8003e66:	9401      	str	r4, [sp, #4]
 8003e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8003e6a:	4855      	ldr	r0, [pc, #340]	; (8003fc0 <main+0x174>)
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003e6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e70:	631a      	str	r2, [r3, #48]	; 0x30
 8003e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e74:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003e78:	9201      	str	r2, [sp, #4]
 8003e7a:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003e7c:	9402      	str	r4, [sp, #8]
 8003e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e80:	f042 0204 	orr.w	r2, r2, #4
 8003e84:	631a      	str	r2, [r3, #48]	; 0x30
 8003e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e88:	f002 0204 	and.w	r2, r2, #4
 8003e8c:	9202      	str	r2, [sp, #8]
 8003e8e:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003e90:	9403      	str	r4, [sp, #12]
 8003e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e94:	f042 0201 	orr.w	r2, r2, #1
 8003e98:	631a      	str	r2, [r3, #48]	; 0x30
 8003e9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e9c:	f002 0201 	and.w	r2, r2, #1
 8003ea0:	9203      	str	r2, [sp, #12]
 8003ea2:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003ea4:	9404      	str	r4, [sp, #16]
 8003ea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea8:	f042 0202 	orr.w	r2, r2, #2
 8003eac:	631a      	str	r2, [r3, #48]	; 0x30
 8003eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eb0:	f002 0202 	and.w	r2, r2, #2
 8003eb4:	9204      	str	r2, [sp, #16]
 8003eb6:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003eb8:	9405      	str	r4, [sp, #20]
 8003eba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ebc:	f042 0208 	orr.w	r2, r2, #8
 8003ec0:	631a      	str	r2, [r3, #48]	; 0x30
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	9305      	str	r3, [sp, #20]
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8003eca:	4622      	mov	r2, r4
 8003ecc:	2101      	movs	r1, #1
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003ece:	9b05      	ldr	r3, [sp, #20]
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8003ed0:	f7fc fcee 	bl	80008b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8003ed4:	4622      	mov	r2, r4
 8003ed6:	2102      	movs	r1, #2
 8003ed8:	483a      	ldr	r0, [pc, #232]	; (8003fc4 <main+0x178>)
 8003eda:	f7fc fce9 	bl	80008b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8003ede:	4622      	mov	r2, r4
 8003ee0:	2108      	movs	r1, #8
 8003ee2:	4839      	ldr	r0, [pc, #228]	; (8003fc8 <main+0x17c>)
 8003ee4:	f7fc fce4 	bl	80008b0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = LED1_Pin;
 8003ee8:	2501      	movs	r5, #1
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8003eea:	a90f      	add	r1, sp, #60	; 0x3c
 8003eec:	4834      	ldr	r0, [pc, #208]	; (8003fc0 <main+0x174>)
	GPIO_InitStruct.Pin = LED1_Pin;
 8003eee:	950f      	str	r5, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = KEY2_Pin;
 8003ef0:	2602      	movs	r6, #2
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ef2:	9510      	str	r5, [sp, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef4:	9411      	str	r4, [sp, #68]	; 0x44
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ef6:	9412      	str	r4, [sp, #72]	; 0x48
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8003ef8:	f7fc fbf4 	bl	80006e4 <HAL_GPIO_Init>
	HAL_GPIO_Init(KEY2_GPIO_Port, &GPIO_InitStruct);
 8003efc:	a90f      	add	r1, sp, #60	; 0x3c
 8003efe:	4830      	ldr	r0, [pc, #192]	; (8003fc0 <main+0x174>)
	GPIO_InitStruct.Pin = KEY2_Pin;
 8003f00:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f02:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003f04:	9611      	str	r6, [sp, #68]	; 0x44
	HAL_GPIO_Init(KEY2_GPIO_Port, &GPIO_InitStruct);
 8003f06:	f7fc fbed 	bl	80006e4 <HAL_GPIO_Init>
	HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8003f0a:	a90f      	add	r1, sp, #60	; 0x3c
 8003f0c:	482f      	ldr	r0, [pc, #188]	; (8003fcc <main+0x180>)
	GPIO_InitStruct.Pin = KEY1_Pin;
 8003f0e:	950f      	str	r5, [sp, #60]	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f10:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003f12:	9611      	str	r6, [sp, #68]	; 0x44
	HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8003f14:	f7fc fbe6 	bl	80006e4 <HAL_GPIO_Init>
	HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 8003f18:	a90f      	add	r1, sp, #60	; 0x3c
 8003f1a:	482a      	ldr	r0, [pc, #168]	; (8003fc4 <main+0x178>)
	GPIO_InitStruct.Pin = LCD_EN_Pin;
 8003f1c:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f1e:	9510      	str	r5, [sp, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f20:	9511      	str	r5, [sp, #68]	; 0x44
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f22:	9612      	str	r6, [sp, #72]	; 0x48
	HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 8003f24:	f7fc fbde 	bl	80006e4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED2_Pin;
 8003f28:	2308      	movs	r3, #8
	HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8003f2a:	4827      	ldr	r0, [pc, #156]	; (8003fc8 <main+0x17c>)
	GPIO_InitStruct.Pin = LED2_Pin;
 8003f2c:	930f      	str	r3, [sp, #60]	; 0x3c
	HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8003f2e:	a90f      	add	r1, sp, #60	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f30:	9510      	str	r5, [sp, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f32:	9411      	str	r4, [sp, #68]	; 0x44
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f34:	9412      	str	r4, [sp, #72]	; 0x48
	HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8003f36:	f7fc fbd5 	bl	80006e4 <HAL_GPIO_Init>
	hi2c1.Instance = I2C1;
 8003f3a:	4825      	ldr	r0, [pc, #148]	; (8003fd0 <main+0x184>)
	hi2c1.Init.ClockSpeed = 100000;
 8003f3c:	4b25      	ldr	r3, [pc, #148]	; (8003fd4 <main+0x188>)
 8003f3e:	4a26      	ldr	r2, [pc, #152]	; (8003fd8 <main+0x18c>)
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f40:	6084      	str	r4, [r0, #8]
	hi2c1.Init.ClockSpeed = 100000;
 8003f42:	e880 000c 	stmia.w	r0, {r2, r3}
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	hi2c1.Init.OwnAddress1 = 0;
 8003f4a:	60c4      	str	r4, [r0, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f4c:	6103      	str	r3, [r0, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f4e:	6144      	str	r4, [r0, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003f50:	6184      	str	r4, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f52:	61c4      	str	r4, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f54:	6204      	str	r4, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003f56:	f7fc fd8d 	bl	8000a74 <HAL_I2C_Init>
 8003f5a:	b108      	cbz	r0, 8003f60 <main+0x114>
		Error_Handler();
 8003f5c:	f7ff ff1e 	bl	8003d9c <Error_Handler>
	printf("start\n");
 8003f60:	481e      	ldr	r0, [pc, #120]	; (8003fdc <main+0x190>)
 8003f62:	f000 fa73 	bl	800444c <puts>
	osKernelInitialize(); // Initialize CMSIS-RTOS
 8003f66:	f7fe f84b 	bl	8002000 <osKernelInitialize>
	const osThreadAttr_t defaultTask_attributes = {
 8003f6a:	2224      	movs	r2, #36	; 0x24
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	a806      	add	r0, sp, #24
 8003f70:	f000 f9db 	bl	800432a <memset>
 8003f74:	4b1a      	ldr	r3, [pc, #104]	; (8003fe0 <main+0x194>)
 8003f76:	9306      	str	r3, [sp, #24]
 8003f78:	2318      	movs	r3, #24
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003f7a:	eb0d 0203 	add.w	r2, sp, r3
	const osThreadAttr_t defaultTask_attributes = {
 8003f7e:	f44f 6480 	mov.w	r4, #1024	; 0x400
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003f82:	2100      	movs	r1, #0
 8003f84:	4817      	ldr	r0, [pc, #92]	; (8003fe4 <main+0x198>)
	const osThreadAttr_t defaultTask_attributes = {
 8003f86:	930c      	str	r3, [sp, #48]	; 0x30
 8003f88:	940b      	str	r4, [sp, #44]	; 0x2c
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003f8a:	f7fe f875 	bl	8002078 <osThreadNew>
 8003f8e:	4b16      	ldr	r3, [pc, #88]	; (8003fe8 <main+0x19c>)
	const osThreadAttr_t myTask02_attributes = {
 8003f90:	2224      	movs	r2, #36	; 0x24
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003f92:	6018      	str	r0, [r3, #0]
	const osThreadAttr_t myTask02_attributes = {
 8003f94:	2100      	movs	r1, #0
 8003f96:	a80f      	add	r0, sp, #60	; 0x3c
 8003f98:	f000 f9c7 	bl	800432a <memset>
 8003f9c:	4b13      	ldr	r3, [pc, #76]	; (8003fec <main+0x1a0>)
 8003f9e:	930f      	str	r3, [sp, #60]	; 0x3c
	myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8003fa0:	aa0f      	add	r2, sp, #60	; 0x3c
	const osThreadAttr_t myTask02_attributes = {
 8003fa2:	2308      	movs	r3, #8
	myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	4812      	ldr	r0, [pc, #72]	; (8003ff0 <main+0x1a4>)
	const osThreadAttr_t myTask02_attributes = {
 8003fa8:	9315      	str	r3, [sp, #84]	; 0x54
 8003faa:	9414      	str	r4, [sp, #80]	; 0x50
	myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8003fac:	f7fe f864 	bl	8002078 <osThreadNew>
 8003fb0:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <main+0x1a8>)
 8003fb2:	6018      	str	r0, [r3, #0]
	osKernelStart();
 8003fb4:	f7fe f840 	bl	8002038 <osKernelStart>
 8003fb8:	e7fe      	b.n	8003fb8 <main+0x16c>
 8003fba:	bf00      	nop
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	40020800 	.word	0x40020800
 8003fc4:	40020400 	.word	0x40020400
 8003fc8:	40020c00 	.word	0x40020c00
 8003fcc:	40020000 	.word	0x40020000
 8003fd0:	20005d08 	.word	0x20005d08
 8003fd4:	000186a0 	.word	0x000186a0
 8003fd8:	40005400 	.word	0x40005400
 8003fdc:	08005842 	.word	0x08005842
 8003fe0:	08005848 	.word	0x08005848
 8003fe4:	08003cad 	.word	0x08003cad
 8003fe8:	20005d04 	.word	0x20005d04
 8003fec:	08005854 	.word	0x08005854
 8003ff0:	08003ca1 	.word	0x08003ca1
 8003ff4:	20005d5c 	.word	0x20005d5c

08003ff8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ff8:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ffa:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <HAL_MspInit+0x40>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	9200      	str	r2, [sp, #0]
 8004000:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004002:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004006:	6459      	str	r1, [r3, #68]	; 0x44
 8004008:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800400a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800400e:	9100      	str	r1, [sp, #0]
 8004010:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004012:	9201      	str	r2, [sp, #4]
 8004014:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004016:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800401a:	6419      	str	r1, [r3, #64]	; 0x40
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004022:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004024:	210f      	movs	r1, #15
 8004026:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800402a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800402c:	f7fc fb02 	bl	8000634 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004030:	b003      	add	sp, #12
 8004032:	f85d fb04 	ldr.w	pc, [sp], #4
 8004036:	bf00      	nop
 8004038:	40023800 	.word	0x40023800

0800403c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800403c:	b530      	push	{r4, r5, lr}
 800403e:	4604      	mov	r4, r0
 8004040:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004042:	2214      	movs	r2, #20
 8004044:	2100      	movs	r1, #0
 8004046:	a803      	add	r0, sp, #12
 8004048:	f000 f96f 	bl	800432a <memset>
  if(hi2c->Instance==I2C1)
 800404c:	6822      	ldr	r2, [r4, #0]
 800404e:	4b1e      	ldr	r3, [pc, #120]	; (80040c8 <HAL_I2C_MspInit+0x8c>)
 8004050:	429a      	cmp	r2, r3
 8004052:	d136      	bne.n	80040c2 <HAL_I2C_MspInit+0x86>
  /* USER CODE BEGIN I2C1_MspInit 0 */
	  printf("1 HAL_I2C_MspInitI2C1 \n");

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004054:	4c1d      	ldr	r4, [pc, #116]	; (80040cc <HAL_I2C_MspInit+0x90>)
	  printf("1 HAL_I2C_MspInitI2C1 \n");
 8004056:	481e      	ldr	r0, [pc, #120]	; (80040d0 <HAL_I2C_MspInit+0x94>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004058:	2500      	movs	r5, #0
	  printf("1 HAL_I2C_MspInitI2C1 \n");
 800405a:	f000 f9f7 	bl	800444c <puts>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800405e:	9501      	str	r5, [sp, #4]
 8004060:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pin = SCL1_Pin|SDA1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004062:	481c      	ldr	r0, [pc, #112]	; (80040d4 <HAL_I2C_MspInit+0x98>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004064:	f043 0302 	orr.w	r3, r3, #2
 8004068:	6323      	str	r3, [r4, #48]	; 0x30
 800406a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	9301      	str	r3, [sp, #4]
 8004072:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SCL1_Pin|SDA1_Pin;
 8004074:	23c0      	movs	r3, #192	; 0xc0
 8004076:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004078:	2312      	movs	r3, #18
 800407a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800407c:	2301      	movs	r3, #1
 800407e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004080:	2303      	movs	r3, #3
 8004082:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004084:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004086:	2304      	movs	r3, #4
 8004088:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800408a:	f7fc fb2b 	bl	80006e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800408e:	9502      	str	r5, [sp, #8]
 8004090:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004092:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004096:	6423      	str	r3, [r4, #64]	; 0x40
 8004098:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800409a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800409e:	462a      	mov	r2, r5
 80040a0:	2105      	movs	r1, #5
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040a2:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80040a4:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040a6:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80040a8:	f7fc fac4 	bl	8000634 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80040ac:	201f      	movs	r0, #31
 80040ae:	f7fc faf5 	bl	800069c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80040b2:	2020      	movs	r0, #32
 80040b4:	462a      	mov	r2, r5
 80040b6:	2105      	movs	r1, #5
 80040b8:	f7fc fabc 	bl	8000634 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80040bc:	2020      	movs	r0, #32
 80040be:	f7fc faed 	bl	800069c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80040c2:	b009      	add	sp, #36	; 0x24
 80040c4:	bd30      	pop	{r4, r5, pc}
 80040c6:	bf00      	nop
 80040c8:	40005400 	.word	0x40005400
 80040cc:	40023800 	.word	0x40023800
 80040d0:	0800585d 	.word	0x0800585d
 80040d4:	40020400 	.word	0x40020400

080040d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040d8:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 80040da:	4601      	mov	r1, r0
{
 80040dc:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 80040de:	2200      	movs	r2, #0
 80040e0:	2037      	movs	r0, #55	; 0x37
 80040e2:	f7fc faa7 	bl	8000634 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 80040e6:	2037      	movs	r0, #55	; 0x37
 80040e8:	f7fc fad8 	bl	800069c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80040ec:	2500      	movs	r5, #0
 80040ee:	4b15      	ldr	r3, [pc, #84]	; (8004144 <HAL_InitTick+0x6c>)
 80040f0:	9502      	str	r5, [sp, #8]
 80040f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80040f4:	4c14      	ldr	r4, [pc, #80]	; (8004148 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM7_CLK_ENABLE();
 80040f6:	f042 0220 	orr.w	r2, r2, #32
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004104:	a901      	add	r1, sp, #4
 8004106:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM7_CLK_ENABLE();
 8004108:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800410a:	f7fd fe21 	bl	8001d50 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800410e:	f7fd fe0f 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
  htim7.Instance = TIM7;
 8004112:	4b0e      	ldr	r3, [pc, #56]	; (800414c <HAL_InitTick+0x74>)
 8004114:	6023      	str	r3, [r4, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8004116:	f240 33e7 	movw	r3, #999	; 0x3e7
 800411a:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800411c:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800411e:	4b0c      	ldr	r3, [pc, #48]	; (8004150 <HAL_InitTick+0x78>)
 8004120:	fbb0 f0f3 	udiv	r0, r0, r3
 8004124:	3801      	subs	r0, #1
  htim7.Init.Prescaler = uwPrescalerValue;
 8004126:	6060      	str	r0, [r4, #4]
  htim7.Init.ClockDivision = 0;
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8004128:	4620      	mov	r0, r4
  htim7.Init.ClockDivision = 0;
 800412a:	6125      	str	r5, [r4, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800412c:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800412e:	f7fd ff4b 	bl	8001fc8 <HAL_TIM_Base_Init>
 8004132:	b920      	cbnz	r0, 800413e <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8004134:	4620      	mov	r0, r4
 8004136:	f7fd fe2a 	bl	8001d8e <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800413a:	b009      	add	sp, #36	; 0x24
 800413c:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 800413e:	2001      	movs	r0, #1
 8004140:	e7fb      	b.n	800413a <HAL_InitTick+0x62>
 8004142:	bf00      	nop
 8004144:	40023800 	.word	0x40023800
 8004148:	20005d60 	.word	0x20005d60
 800414c:	40001400 	.word	0x40001400
 8004150:	000f4240 	.word	0x000f4240

08004154 <NMI_Handler>:
 8004154:	4770      	bx	lr

08004156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004156:	e7fe      	b.n	8004156 <HardFault_Handler>

08004158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004158:	e7fe      	b.n	8004158 <MemManage_Handler>

0800415a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800415a:	e7fe      	b.n	800415a <BusFault_Handler>

0800415c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800415c:	e7fe      	b.n	800415c <UsageFault_Handler>

0800415e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800415e:	4770      	bx	lr

08004160 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004160:	4801      	ldr	r0, [pc, #4]	; (8004168 <I2C1_EV_IRQHandler+0x8>)
 8004162:	f7fc bee1 	b.w	8000f28 <HAL_I2C_EV_IRQHandler>
 8004166:	bf00      	nop
 8004168:	20005d08 	.word	0x20005d08

0800416c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800416c:	4801      	ldr	r0, [pc, #4]	; (8004174 <I2C1_ER_IRQHandler+0x8>)
 800416e:	f7fd baff 	b.w	8001770 <HAL_I2C_ER_IRQHandler>
 8004172:	bf00      	nop
 8004174:	20005d08 	.word	0x20005d08

08004178 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004178:	4801      	ldr	r0, [pc, #4]	; (8004180 <TIM7_IRQHandler+0x8>)
 800417a:	f7fd be1c 	b.w	8001db6 <HAL_TIM_IRQHandler>
 800417e:	bf00      	nop
 8004180:	20005d60 	.word	0x20005d60

08004184 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004184:	b570      	push	{r4, r5, r6, lr}
 8004186:	460e      	mov	r6, r1
 8004188:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800418a:	460c      	mov	r4, r1
 800418c:	1ba3      	subs	r3, r4, r6
 800418e:	429d      	cmp	r5, r3
 8004190:	dc01      	bgt.n	8004196 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8004192:	4628      	mov	r0, r5
 8004194:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8004196:	f3af 8000 	nop.w
 800419a:	f804 0b01 	strb.w	r0, [r4], #1
 800419e:	e7f5      	b.n	800418c <_read+0x8>

080041a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041a0:	b510      	push	{r4, lr}

	//  > configMAX_SYSCALL_INTERRUPT_PRIORITY

	/*taskENTER_CRITICAL();
	{*/
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041a2:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80041a4:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 80041a8:	4293      	cmp	r3, r2
 80041aa:	db01      	blt.n	80041b0 <_write+0x10>
	/*}
	taskEXIT_CRITICAL();*/

	/* USER CODE END Init */
	return len;
}
 80041ac:	4610      	mov	r0, r2
 80041ae:	bd10      	pop	{r4, pc}
 80041b0:	f8d4 0e80 	ldr.w	r0, [r4, #3712]	; 0xe80
 80041b4:	07c0      	lsls	r0, r0, #31
 80041b6:	d503      	bpl.n	80041c0 <_write+0x20>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80041b8:	f8d4 0e00 	ldr.w	r0, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80041bc:	07c0      	lsls	r0, r0, #31
 80041be:	d402      	bmi.n	80041c6 <_write+0x26>
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041c0:	3301      	adds	r3, #1
 80041c2:	e7f1      	b.n	80041a8 <_write+0x8>
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 80041c4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80041c6:	6820      	ldr	r0, [r4, #0]
 80041c8:	2800      	cmp	r0, #0
 80041ca:	d0fb      	beq.n	80041c4 <_write+0x24>
				ITM_SendChar(*ptr++);
 80041cc:	5cc8      	ldrb	r0, [r1, r3]
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80041ce:	7020      	strb	r0, [r4, #0]
 80041d0:	e7f6      	b.n	80041c0 <_write+0x20>
	...

080041d4 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80041d4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80041d6:	4b0a      	ldr	r3, [pc, #40]	; (8004200 <_sbrk+0x2c>)
 80041d8:	6819      	ldr	r1, [r3, #0]
{
 80041da:	4602      	mov	r2, r0
	if (heap_end == 0)
 80041dc:	b909      	cbnz	r1, 80041e2 <_sbrk+0xe>
		heap_end = &end;
 80041de:	4909      	ldr	r1, [pc, #36]	; (8004204 <_sbrk+0x30>)
 80041e0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80041e2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80041e4:	4669      	mov	r1, sp
 80041e6:	4402      	add	r2, r0
 80041e8:	428a      	cmp	r2, r1
 80041ea:	d906      	bls.n	80041fa <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80041ec:	f000 f868 	bl	80042c0 <__errno>
 80041f0:	230c      	movs	r3, #12
 80041f2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80041f4:	f04f 30ff 	mov.w	r0, #4294967295
 80041f8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80041fa:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80041fc:	bd08      	pop	{r3, pc}
 80041fe:	bf00      	nop
 8004200:	20005b50 	.word	0x20005b50
 8004204:	20005da4 	.word	0x20005da4

08004208 <_close>:

int _close(int file)
{
	return -1;
}
 8004208:	f04f 30ff 	mov.w	r0, #4294967295
 800420c:	4770      	bx	lr

0800420e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800420e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004212:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004214:	2000      	movs	r0, #0
 8004216:	4770      	bx	lr

08004218 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004218:	2001      	movs	r0, #1
 800421a:	4770      	bx	lr

0800421c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800421c:	2000      	movs	r0, #0
 800421e:	4770      	bx	lr

08004220 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004220:	490f      	ldr	r1, [pc, #60]	; (8004260 <SystemInit+0x40>)
 8004222:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004226:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800422a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800422e:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <SystemInit+0x44>)
 8004230:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004232:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8004234:	f042 0201 	orr.w	r2, r2, #1
 8004238:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800423a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004242:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004246:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004248:	4a07      	ldr	r2, [pc, #28]	; (8004268 <SystemInit+0x48>)
 800424a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004252:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004254:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004256:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800425a:	608b      	str	r3, [r1, #8]
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	e000ed00 	.word	0xe000ed00
 8004264:	40023800 	.word	0x40023800
 8004268:	24003010 	.word	0x24003010

0800426c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800426c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004270:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004272:	e003      	b.n	800427c <LoopCopyDataInit>

08004274 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004274:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004276:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004278:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800427a:	3104      	adds	r1, #4

0800427c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800427c:	480b      	ldr	r0, [pc, #44]	; (80042ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800427e:	4b0c      	ldr	r3, [pc, #48]	; (80042b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004280:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004282:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004284:	d3f6      	bcc.n	8004274 <CopyDataInit>
  ldr  r2, =_sbss
 8004286:	4a0b      	ldr	r2, [pc, #44]	; (80042b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004288:	e002      	b.n	8004290 <LoopFillZerobss>

0800428a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800428a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800428c:	f842 3b04 	str.w	r3, [r2], #4

08004290 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004290:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004292:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004294:	d3f9      	bcc.n	800428a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004296:	f7ff ffc3 	bl	8004220 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800429a:	f000 f817 	bl	80042cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800429e:	f7ff fdd5 	bl	8003e4c <main>
  bx  lr    
 80042a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80042a4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80042a8:	08005934 	.word	0x08005934
  ldr  r0, =_sdata
 80042ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80042b0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80042b4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80042b8:	20005da4 	.word	0x20005da4

080042bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042bc:	e7fe      	b.n	80042bc <ADC_IRQHandler>
	...

080042c0 <__errno>:
 80042c0:	4b01      	ldr	r3, [pc, #4]	; (80042c8 <__errno+0x8>)
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	2000000c 	.word	0x2000000c

080042cc <__libc_init_array>:
 80042cc:	b570      	push	{r4, r5, r6, lr}
 80042ce:	4e0d      	ldr	r6, [pc, #52]	; (8004304 <__libc_init_array+0x38>)
 80042d0:	4c0d      	ldr	r4, [pc, #52]	; (8004308 <__libc_init_array+0x3c>)
 80042d2:	1ba4      	subs	r4, r4, r6
 80042d4:	10a4      	asrs	r4, r4, #2
 80042d6:	2500      	movs	r5, #0
 80042d8:	42a5      	cmp	r5, r4
 80042da:	d109      	bne.n	80042f0 <__libc_init_array+0x24>
 80042dc:	4e0b      	ldr	r6, [pc, #44]	; (800430c <__libc_init_array+0x40>)
 80042de:	4c0c      	ldr	r4, [pc, #48]	; (8004310 <__libc_init_array+0x44>)
 80042e0:	f000 ffd2 	bl	8005288 <_init>
 80042e4:	1ba4      	subs	r4, r4, r6
 80042e6:	10a4      	asrs	r4, r4, #2
 80042e8:	2500      	movs	r5, #0
 80042ea:	42a5      	cmp	r5, r4
 80042ec:	d105      	bne.n	80042fa <__libc_init_array+0x2e>
 80042ee:	bd70      	pop	{r4, r5, r6, pc}
 80042f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042f4:	4798      	blx	r3
 80042f6:	3501      	adds	r5, #1
 80042f8:	e7ee      	b.n	80042d8 <__libc_init_array+0xc>
 80042fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042fe:	4798      	blx	r3
 8004300:	3501      	adds	r5, #1
 8004302:	e7f2      	b.n	80042ea <__libc_init_array+0x1e>
 8004304:	0800592c 	.word	0x0800592c
 8004308:	0800592c 	.word	0x0800592c
 800430c:	0800592c 	.word	0x0800592c
 8004310:	08005930 	.word	0x08005930

08004314 <memcpy>:
 8004314:	b510      	push	{r4, lr}
 8004316:	1e43      	subs	r3, r0, #1
 8004318:	440a      	add	r2, r1
 800431a:	4291      	cmp	r1, r2
 800431c:	d100      	bne.n	8004320 <memcpy+0xc>
 800431e:	bd10      	pop	{r4, pc}
 8004320:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004324:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004328:	e7f7      	b.n	800431a <memcpy+0x6>

0800432a <memset>:
 800432a:	4402      	add	r2, r0
 800432c:	4603      	mov	r3, r0
 800432e:	4293      	cmp	r3, r2
 8004330:	d100      	bne.n	8004334 <memset+0xa>
 8004332:	4770      	bx	lr
 8004334:	f803 1b01 	strb.w	r1, [r3], #1
 8004338:	e7f9      	b.n	800432e <memset+0x4>
	...

0800433c <iprintf>:
 800433c:	b40f      	push	{r0, r1, r2, r3}
 800433e:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <iprintf+0x2c>)
 8004340:	b513      	push	{r0, r1, r4, lr}
 8004342:	681c      	ldr	r4, [r3, #0]
 8004344:	b124      	cbz	r4, 8004350 <iprintf+0x14>
 8004346:	69a3      	ldr	r3, [r4, #24]
 8004348:	b913      	cbnz	r3, 8004350 <iprintf+0x14>
 800434a:	4620      	mov	r0, r4
 800434c:	f000 fa38 	bl	80047c0 <__sinit>
 8004350:	ab05      	add	r3, sp, #20
 8004352:	9a04      	ldr	r2, [sp, #16]
 8004354:	68a1      	ldr	r1, [r4, #8]
 8004356:	9301      	str	r3, [sp, #4]
 8004358:	4620      	mov	r0, r4
 800435a:	f000 fbf5 	bl	8004b48 <_vfiprintf_r>
 800435e:	b002      	add	sp, #8
 8004360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004364:	b004      	add	sp, #16
 8004366:	4770      	bx	lr
 8004368:	2000000c 	.word	0x2000000c

0800436c <putchar>:
 800436c:	b538      	push	{r3, r4, r5, lr}
 800436e:	4b08      	ldr	r3, [pc, #32]	; (8004390 <putchar+0x24>)
 8004370:	681c      	ldr	r4, [r3, #0]
 8004372:	4605      	mov	r5, r0
 8004374:	b124      	cbz	r4, 8004380 <putchar+0x14>
 8004376:	69a3      	ldr	r3, [r4, #24]
 8004378:	b913      	cbnz	r3, 8004380 <putchar+0x14>
 800437a:	4620      	mov	r0, r4
 800437c:	f000 fa20 	bl	80047c0 <__sinit>
 8004380:	68a2      	ldr	r2, [r4, #8]
 8004382:	4629      	mov	r1, r5
 8004384:	4620      	mov	r0, r4
 8004386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800438a:	f000 be89 	b.w	80050a0 <_putc_r>
 800438e:	bf00      	nop
 8004390:	2000000c 	.word	0x2000000c

08004394 <_puts_r>:
 8004394:	b570      	push	{r4, r5, r6, lr}
 8004396:	460e      	mov	r6, r1
 8004398:	4605      	mov	r5, r0
 800439a:	b118      	cbz	r0, 80043a4 <_puts_r+0x10>
 800439c:	6983      	ldr	r3, [r0, #24]
 800439e:	b90b      	cbnz	r3, 80043a4 <_puts_r+0x10>
 80043a0:	f000 fa0e 	bl	80047c0 <__sinit>
 80043a4:	69ab      	ldr	r3, [r5, #24]
 80043a6:	68ac      	ldr	r4, [r5, #8]
 80043a8:	b913      	cbnz	r3, 80043b0 <_puts_r+0x1c>
 80043aa:	4628      	mov	r0, r5
 80043ac:	f000 fa08 	bl	80047c0 <__sinit>
 80043b0:	4b23      	ldr	r3, [pc, #140]	; (8004440 <_puts_r+0xac>)
 80043b2:	429c      	cmp	r4, r3
 80043b4:	d117      	bne.n	80043e6 <_puts_r+0x52>
 80043b6:	686c      	ldr	r4, [r5, #4]
 80043b8:	89a3      	ldrh	r3, [r4, #12]
 80043ba:	071b      	lsls	r3, r3, #28
 80043bc:	d51d      	bpl.n	80043fa <_puts_r+0x66>
 80043be:	6923      	ldr	r3, [r4, #16]
 80043c0:	b1db      	cbz	r3, 80043fa <_puts_r+0x66>
 80043c2:	3e01      	subs	r6, #1
 80043c4:	68a3      	ldr	r3, [r4, #8]
 80043c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80043ca:	3b01      	subs	r3, #1
 80043cc:	60a3      	str	r3, [r4, #8]
 80043ce:	b9e9      	cbnz	r1, 800440c <_puts_r+0x78>
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	da2e      	bge.n	8004432 <_puts_r+0x9e>
 80043d4:	4622      	mov	r2, r4
 80043d6:	210a      	movs	r1, #10
 80043d8:	4628      	mov	r0, r5
 80043da:	f000 f83f 	bl	800445c <__swbuf_r>
 80043de:	3001      	adds	r0, #1
 80043e0:	d011      	beq.n	8004406 <_puts_r+0x72>
 80043e2:	200a      	movs	r0, #10
 80043e4:	bd70      	pop	{r4, r5, r6, pc}
 80043e6:	4b17      	ldr	r3, [pc, #92]	; (8004444 <_puts_r+0xb0>)
 80043e8:	429c      	cmp	r4, r3
 80043ea:	d101      	bne.n	80043f0 <_puts_r+0x5c>
 80043ec:	68ac      	ldr	r4, [r5, #8]
 80043ee:	e7e3      	b.n	80043b8 <_puts_r+0x24>
 80043f0:	4b15      	ldr	r3, [pc, #84]	; (8004448 <_puts_r+0xb4>)
 80043f2:	429c      	cmp	r4, r3
 80043f4:	bf08      	it	eq
 80043f6:	68ec      	ldreq	r4, [r5, #12]
 80043f8:	e7de      	b.n	80043b8 <_puts_r+0x24>
 80043fa:	4621      	mov	r1, r4
 80043fc:	4628      	mov	r0, r5
 80043fe:	f000 f87f 	bl	8004500 <__swsetup_r>
 8004402:	2800      	cmp	r0, #0
 8004404:	d0dd      	beq.n	80043c2 <_puts_r+0x2e>
 8004406:	f04f 30ff 	mov.w	r0, #4294967295
 800440a:	bd70      	pop	{r4, r5, r6, pc}
 800440c:	2b00      	cmp	r3, #0
 800440e:	da04      	bge.n	800441a <_puts_r+0x86>
 8004410:	69a2      	ldr	r2, [r4, #24]
 8004412:	4293      	cmp	r3, r2
 8004414:	db06      	blt.n	8004424 <_puts_r+0x90>
 8004416:	290a      	cmp	r1, #10
 8004418:	d004      	beq.n	8004424 <_puts_r+0x90>
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	6022      	str	r2, [r4, #0]
 8004420:	7019      	strb	r1, [r3, #0]
 8004422:	e7cf      	b.n	80043c4 <_puts_r+0x30>
 8004424:	4622      	mov	r2, r4
 8004426:	4628      	mov	r0, r5
 8004428:	f000 f818 	bl	800445c <__swbuf_r>
 800442c:	3001      	adds	r0, #1
 800442e:	d1c9      	bne.n	80043c4 <_puts_r+0x30>
 8004430:	e7e9      	b.n	8004406 <_puts_r+0x72>
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	200a      	movs	r0, #10
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	6022      	str	r2, [r4, #0]
 800443a:	7018      	strb	r0, [r3, #0]
 800443c:	bd70      	pop	{r4, r5, r6, pc}
 800443e:	bf00      	nop
 8004440:	080058b0 	.word	0x080058b0
 8004444:	080058d0 	.word	0x080058d0
 8004448:	08005890 	.word	0x08005890

0800444c <puts>:
 800444c:	4b02      	ldr	r3, [pc, #8]	; (8004458 <puts+0xc>)
 800444e:	4601      	mov	r1, r0
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	f7ff bf9f 	b.w	8004394 <_puts_r>
 8004456:	bf00      	nop
 8004458:	2000000c 	.word	0x2000000c

0800445c <__swbuf_r>:
 800445c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445e:	460e      	mov	r6, r1
 8004460:	4614      	mov	r4, r2
 8004462:	4605      	mov	r5, r0
 8004464:	b118      	cbz	r0, 800446e <__swbuf_r+0x12>
 8004466:	6983      	ldr	r3, [r0, #24]
 8004468:	b90b      	cbnz	r3, 800446e <__swbuf_r+0x12>
 800446a:	f000 f9a9 	bl	80047c0 <__sinit>
 800446e:	4b21      	ldr	r3, [pc, #132]	; (80044f4 <__swbuf_r+0x98>)
 8004470:	429c      	cmp	r4, r3
 8004472:	d12a      	bne.n	80044ca <__swbuf_r+0x6e>
 8004474:	686c      	ldr	r4, [r5, #4]
 8004476:	69a3      	ldr	r3, [r4, #24]
 8004478:	60a3      	str	r3, [r4, #8]
 800447a:	89a3      	ldrh	r3, [r4, #12]
 800447c:	071a      	lsls	r2, r3, #28
 800447e:	d52e      	bpl.n	80044de <__swbuf_r+0x82>
 8004480:	6923      	ldr	r3, [r4, #16]
 8004482:	b363      	cbz	r3, 80044de <__swbuf_r+0x82>
 8004484:	6923      	ldr	r3, [r4, #16]
 8004486:	6820      	ldr	r0, [r4, #0]
 8004488:	1ac0      	subs	r0, r0, r3
 800448a:	6963      	ldr	r3, [r4, #20]
 800448c:	b2f6      	uxtb	r6, r6
 800448e:	4298      	cmp	r0, r3
 8004490:	4637      	mov	r7, r6
 8004492:	db04      	blt.n	800449e <__swbuf_r+0x42>
 8004494:	4621      	mov	r1, r4
 8004496:	4628      	mov	r0, r5
 8004498:	f000 f928 	bl	80046ec <_fflush_r>
 800449c:	bb28      	cbnz	r0, 80044ea <__swbuf_r+0x8e>
 800449e:	68a3      	ldr	r3, [r4, #8]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	60a3      	str	r3, [r4, #8]
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	6022      	str	r2, [r4, #0]
 80044aa:	701e      	strb	r6, [r3, #0]
 80044ac:	6963      	ldr	r3, [r4, #20]
 80044ae:	3001      	adds	r0, #1
 80044b0:	4298      	cmp	r0, r3
 80044b2:	d004      	beq.n	80044be <__swbuf_r+0x62>
 80044b4:	89a3      	ldrh	r3, [r4, #12]
 80044b6:	07db      	lsls	r3, r3, #31
 80044b8:	d519      	bpl.n	80044ee <__swbuf_r+0x92>
 80044ba:	2e0a      	cmp	r6, #10
 80044bc:	d117      	bne.n	80044ee <__swbuf_r+0x92>
 80044be:	4621      	mov	r1, r4
 80044c0:	4628      	mov	r0, r5
 80044c2:	f000 f913 	bl	80046ec <_fflush_r>
 80044c6:	b190      	cbz	r0, 80044ee <__swbuf_r+0x92>
 80044c8:	e00f      	b.n	80044ea <__swbuf_r+0x8e>
 80044ca:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <__swbuf_r+0x9c>)
 80044cc:	429c      	cmp	r4, r3
 80044ce:	d101      	bne.n	80044d4 <__swbuf_r+0x78>
 80044d0:	68ac      	ldr	r4, [r5, #8]
 80044d2:	e7d0      	b.n	8004476 <__swbuf_r+0x1a>
 80044d4:	4b09      	ldr	r3, [pc, #36]	; (80044fc <__swbuf_r+0xa0>)
 80044d6:	429c      	cmp	r4, r3
 80044d8:	bf08      	it	eq
 80044da:	68ec      	ldreq	r4, [r5, #12]
 80044dc:	e7cb      	b.n	8004476 <__swbuf_r+0x1a>
 80044de:	4621      	mov	r1, r4
 80044e0:	4628      	mov	r0, r5
 80044e2:	f000 f80d 	bl	8004500 <__swsetup_r>
 80044e6:	2800      	cmp	r0, #0
 80044e8:	d0cc      	beq.n	8004484 <__swbuf_r+0x28>
 80044ea:	f04f 37ff 	mov.w	r7, #4294967295
 80044ee:	4638      	mov	r0, r7
 80044f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044f2:	bf00      	nop
 80044f4:	080058b0 	.word	0x080058b0
 80044f8:	080058d0 	.word	0x080058d0
 80044fc:	08005890 	.word	0x08005890

08004500 <__swsetup_r>:
 8004500:	4b32      	ldr	r3, [pc, #200]	; (80045cc <__swsetup_r+0xcc>)
 8004502:	b570      	push	{r4, r5, r6, lr}
 8004504:	681d      	ldr	r5, [r3, #0]
 8004506:	4606      	mov	r6, r0
 8004508:	460c      	mov	r4, r1
 800450a:	b125      	cbz	r5, 8004516 <__swsetup_r+0x16>
 800450c:	69ab      	ldr	r3, [r5, #24]
 800450e:	b913      	cbnz	r3, 8004516 <__swsetup_r+0x16>
 8004510:	4628      	mov	r0, r5
 8004512:	f000 f955 	bl	80047c0 <__sinit>
 8004516:	4b2e      	ldr	r3, [pc, #184]	; (80045d0 <__swsetup_r+0xd0>)
 8004518:	429c      	cmp	r4, r3
 800451a:	d10f      	bne.n	800453c <__swsetup_r+0x3c>
 800451c:	686c      	ldr	r4, [r5, #4]
 800451e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004522:	b29a      	uxth	r2, r3
 8004524:	0715      	lsls	r5, r2, #28
 8004526:	d42c      	bmi.n	8004582 <__swsetup_r+0x82>
 8004528:	06d0      	lsls	r0, r2, #27
 800452a:	d411      	bmi.n	8004550 <__swsetup_r+0x50>
 800452c:	2209      	movs	r2, #9
 800452e:	6032      	str	r2, [r6, #0]
 8004530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004534:	81a3      	strh	r3, [r4, #12]
 8004536:	f04f 30ff 	mov.w	r0, #4294967295
 800453a:	bd70      	pop	{r4, r5, r6, pc}
 800453c:	4b25      	ldr	r3, [pc, #148]	; (80045d4 <__swsetup_r+0xd4>)
 800453e:	429c      	cmp	r4, r3
 8004540:	d101      	bne.n	8004546 <__swsetup_r+0x46>
 8004542:	68ac      	ldr	r4, [r5, #8]
 8004544:	e7eb      	b.n	800451e <__swsetup_r+0x1e>
 8004546:	4b24      	ldr	r3, [pc, #144]	; (80045d8 <__swsetup_r+0xd8>)
 8004548:	429c      	cmp	r4, r3
 800454a:	bf08      	it	eq
 800454c:	68ec      	ldreq	r4, [r5, #12]
 800454e:	e7e6      	b.n	800451e <__swsetup_r+0x1e>
 8004550:	0751      	lsls	r1, r2, #29
 8004552:	d512      	bpl.n	800457a <__swsetup_r+0x7a>
 8004554:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004556:	b141      	cbz	r1, 800456a <__swsetup_r+0x6a>
 8004558:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800455c:	4299      	cmp	r1, r3
 800455e:	d002      	beq.n	8004566 <__swsetup_r+0x66>
 8004560:	4630      	mov	r0, r6
 8004562:	f000 fa1b 	bl	800499c <_free_r>
 8004566:	2300      	movs	r3, #0
 8004568:	6363      	str	r3, [r4, #52]	; 0x34
 800456a:	89a3      	ldrh	r3, [r4, #12]
 800456c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004570:	81a3      	strh	r3, [r4, #12]
 8004572:	2300      	movs	r3, #0
 8004574:	6063      	str	r3, [r4, #4]
 8004576:	6923      	ldr	r3, [r4, #16]
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	89a3      	ldrh	r3, [r4, #12]
 800457c:	f043 0308 	orr.w	r3, r3, #8
 8004580:	81a3      	strh	r3, [r4, #12]
 8004582:	6923      	ldr	r3, [r4, #16]
 8004584:	b94b      	cbnz	r3, 800459a <__swsetup_r+0x9a>
 8004586:	89a3      	ldrh	r3, [r4, #12]
 8004588:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800458c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004590:	d003      	beq.n	800459a <__swsetup_r+0x9a>
 8004592:	4621      	mov	r1, r4
 8004594:	4630      	mov	r0, r6
 8004596:	f000 f9c1 	bl	800491c <__smakebuf_r>
 800459a:	89a2      	ldrh	r2, [r4, #12]
 800459c:	f012 0301 	ands.w	r3, r2, #1
 80045a0:	d00c      	beq.n	80045bc <__swsetup_r+0xbc>
 80045a2:	2300      	movs	r3, #0
 80045a4:	60a3      	str	r3, [r4, #8]
 80045a6:	6963      	ldr	r3, [r4, #20]
 80045a8:	425b      	negs	r3, r3
 80045aa:	61a3      	str	r3, [r4, #24]
 80045ac:	6923      	ldr	r3, [r4, #16]
 80045ae:	b953      	cbnz	r3, 80045c6 <__swsetup_r+0xc6>
 80045b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80045b8:	d1ba      	bne.n	8004530 <__swsetup_r+0x30>
 80045ba:	bd70      	pop	{r4, r5, r6, pc}
 80045bc:	0792      	lsls	r2, r2, #30
 80045be:	bf58      	it	pl
 80045c0:	6963      	ldrpl	r3, [r4, #20]
 80045c2:	60a3      	str	r3, [r4, #8]
 80045c4:	e7f2      	b.n	80045ac <__swsetup_r+0xac>
 80045c6:	2000      	movs	r0, #0
 80045c8:	e7f7      	b.n	80045ba <__swsetup_r+0xba>
 80045ca:	bf00      	nop
 80045cc:	2000000c 	.word	0x2000000c
 80045d0:	080058b0 	.word	0x080058b0
 80045d4:	080058d0 	.word	0x080058d0
 80045d8:	08005890 	.word	0x08005890

080045dc <__sflush_r>:
 80045dc:	898a      	ldrh	r2, [r1, #12]
 80045de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045e2:	4605      	mov	r5, r0
 80045e4:	0710      	lsls	r0, r2, #28
 80045e6:	460c      	mov	r4, r1
 80045e8:	d45a      	bmi.n	80046a0 <__sflush_r+0xc4>
 80045ea:	684b      	ldr	r3, [r1, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	dc05      	bgt.n	80045fc <__sflush_r+0x20>
 80045f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	dc02      	bgt.n	80045fc <__sflush_r+0x20>
 80045f6:	2000      	movs	r0, #0
 80045f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045fe:	2e00      	cmp	r6, #0
 8004600:	d0f9      	beq.n	80045f6 <__sflush_r+0x1a>
 8004602:	2300      	movs	r3, #0
 8004604:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004608:	682f      	ldr	r7, [r5, #0]
 800460a:	602b      	str	r3, [r5, #0]
 800460c:	d033      	beq.n	8004676 <__sflush_r+0x9a>
 800460e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004610:	89a3      	ldrh	r3, [r4, #12]
 8004612:	075a      	lsls	r2, r3, #29
 8004614:	d505      	bpl.n	8004622 <__sflush_r+0x46>
 8004616:	6863      	ldr	r3, [r4, #4]
 8004618:	1ac0      	subs	r0, r0, r3
 800461a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800461c:	b10b      	cbz	r3, 8004622 <__sflush_r+0x46>
 800461e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004620:	1ac0      	subs	r0, r0, r3
 8004622:	2300      	movs	r3, #0
 8004624:	4602      	mov	r2, r0
 8004626:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004628:	6a21      	ldr	r1, [r4, #32]
 800462a:	4628      	mov	r0, r5
 800462c:	47b0      	blx	r6
 800462e:	1c43      	adds	r3, r0, #1
 8004630:	89a3      	ldrh	r3, [r4, #12]
 8004632:	d106      	bne.n	8004642 <__sflush_r+0x66>
 8004634:	6829      	ldr	r1, [r5, #0]
 8004636:	291d      	cmp	r1, #29
 8004638:	d84b      	bhi.n	80046d2 <__sflush_r+0xf6>
 800463a:	4a2b      	ldr	r2, [pc, #172]	; (80046e8 <__sflush_r+0x10c>)
 800463c:	40ca      	lsrs	r2, r1
 800463e:	07d6      	lsls	r6, r2, #31
 8004640:	d547      	bpl.n	80046d2 <__sflush_r+0xf6>
 8004642:	2200      	movs	r2, #0
 8004644:	6062      	str	r2, [r4, #4]
 8004646:	04d9      	lsls	r1, r3, #19
 8004648:	6922      	ldr	r2, [r4, #16]
 800464a:	6022      	str	r2, [r4, #0]
 800464c:	d504      	bpl.n	8004658 <__sflush_r+0x7c>
 800464e:	1c42      	adds	r2, r0, #1
 8004650:	d101      	bne.n	8004656 <__sflush_r+0x7a>
 8004652:	682b      	ldr	r3, [r5, #0]
 8004654:	b903      	cbnz	r3, 8004658 <__sflush_r+0x7c>
 8004656:	6560      	str	r0, [r4, #84]	; 0x54
 8004658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800465a:	602f      	str	r7, [r5, #0]
 800465c:	2900      	cmp	r1, #0
 800465e:	d0ca      	beq.n	80045f6 <__sflush_r+0x1a>
 8004660:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004664:	4299      	cmp	r1, r3
 8004666:	d002      	beq.n	800466e <__sflush_r+0x92>
 8004668:	4628      	mov	r0, r5
 800466a:	f000 f997 	bl	800499c <_free_r>
 800466e:	2000      	movs	r0, #0
 8004670:	6360      	str	r0, [r4, #52]	; 0x34
 8004672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004676:	6a21      	ldr	r1, [r4, #32]
 8004678:	2301      	movs	r3, #1
 800467a:	4628      	mov	r0, r5
 800467c:	47b0      	blx	r6
 800467e:	1c41      	adds	r1, r0, #1
 8004680:	d1c6      	bne.n	8004610 <__sflush_r+0x34>
 8004682:	682b      	ldr	r3, [r5, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0c3      	beq.n	8004610 <__sflush_r+0x34>
 8004688:	2b1d      	cmp	r3, #29
 800468a:	d001      	beq.n	8004690 <__sflush_r+0xb4>
 800468c:	2b16      	cmp	r3, #22
 800468e:	d101      	bne.n	8004694 <__sflush_r+0xb8>
 8004690:	602f      	str	r7, [r5, #0]
 8004692:	e7b0      	b.n	80045f6 <__sflush_r+0x1a>
 8004694:	89a3      	ldrh	r3, [r4, #12]
 8004696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800469a:	81a3      	strh	r3, [r4, #12]
 800469c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046a0:	690f      	ldr	r7, [r1, #16]
 80046a2:	2f00      	cmp	r7, #0
 80046a4:	d0a7      	beq.n	80045f6 <__sflush_r+0x1a>
 80046a6:	0793      	lsls	r3, r2, #30
 80046a8:	680e      	ldr	r6, [r1, #0]
 80046aa:	bf08      	it	eq
 80046ac:	694b      	ldreq	r3, [r1, #20]
 80046ae:	600f      	str	r7, [r1, #0]
 80046b0:	bf18      	it	ne
 80046b2:	2300      	movne	r3, #0
 80046b4:	eba6 0807 	sub.w	r8, r6, r7
 80046b8:	608b      	str	r3, [r1, #8]
 80046ba:	f1b8 0f00 	cmp.w	r8, #0
 80046be:	dd9a      	ble.n	80045f6 <__sflush_r+0x1a>
 80046c0:	4643      	mov	r3, r8
 80046c2:	463a      	mov	r2, r7
 80046c4:	6a21      	ldr	r1, [r4, #32]
 80046c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80046c8:	4628      	mov	r0, r5
 80046ca:	47b0      	blx	r6
 80046cc:	2800      	cmp	r0, #0
 80046ce:	dc07      	bgt.n	80046e0 <__sflush_r+0x104>
 80046d0:	89a3      	ldrh	r3, [r4, #12]
 80046d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046d6:	81a3      	strh	r3, [r4, #12]
 80046d8:	f04f 30ff 	mov.w	r0, #4294967295
 80046dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046e0:	4407      	add	r7, r0
 80046e2:	eba8 0800 	sub.w	r8, r8, r0
 80046e6:	e7e8      	b.n	80046ba <__sflush_r+0xde>
 80046e8:	20400001 	.word	0x20400001

080046ec <_fflush_r>:
 80046ec:	b538      	push	{r3, r4, r5, lr}
 80046ee:	690b      	ldr	r3, [r1, #16]
 80046f0:	4605      	mov	r5, r0
 80046f2:	460c      	mov	r4, r1
 80046f4:	b1db      	cbz	r3, 800472e <_fflush_r+0x42>
 80046f6:	b118      	cbz	r0, 8004700 <_fflush_r+0x14>
 80046f8:	6983      	ldr	r3, [r0, #24]
 80046fa:	b90b      	cbnz	r3, 8004700 <_fflush_r+0x14>
 80046fc:	f000 f860 	bl	80047c0 <__sinit>
 8004700:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <_fflush_r+0x48>)
 8004702:	429c      	cmp	r4, r3
 8004704:	d109      	bne.n	800471a <_fflush_r+0x2e>
 8004706:	686c      	ldr	r4, [r5, #4]
 8004708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800470c:	b17b      	cbz	r3, 800472e <_fflush_r+0x42>
 800470e:	4621      	mov	r1, r4
 8004710:	4628      	mov	r0, r5
 8004712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004716:	f7ff bf61 	b.w	80045dc <__sflush_r>
 800471a:	4b07      	ldr	r3, [pc, #28]	; (8004738 <_fflush_r+0x4c>)
 800471c:	429c      	cmp	r4, r3
 800471e:	d101      	bne.n	8004724 <_fflush_r+0x38>
 8004720:	68ac      	ldr	r4, [r5, #8]
 8004722:	e7f1      	b.n	8004708 <_fflush_r+0x1c>
 8004724:	4b05      	ldr	r3, [pc, #20]	; (800473c <_fflush_r+0x50>)
 8004726:	429c      	cmp	r4, r3
 8004728:	bf08      	it	eq
 800472a:	68ec      	ldreq	r4, [r5, #12]
 800472c:	e7ec      	b.n	8004708 <_fflush_r+0x1c>
 800472e:	2000      	movs	r0, #0
 8004730:	bd38      	pop	{r3, r4, r5, pc}
 8004732:	bf00      	nop
 8004734:	080058b0 	.word	0x080058b0
 8004738:	080058d0 	.word	0x080058d0
 800473c:	08005890 	.word	0x08005890

08004740 <_cleanup_r>:
 8004740:	4901      	ldr	r1, [pc, #4]	; (8004748 <_cleanup_r+0x8>)
 8004742:	f000 b8a9 	b.w	8004898 <_fwalk_reent>
 8004746:	bf00      	nop
 8004748:	080046ed 	.word	0x080046ed

0800474c <std.isra.0>:
 800474c:	2300      	movs	r3, #0
 800474e:	b510      	push	{r4, lr}
 8004750:	4604      	mov	r4, r0
 8004752:	6003      	str	r3, [r0, #0]
 8004754:	6043      	str	r3, [r0, #4]
 8004756:	6083      	str	r3, [r0, #8]
 8004758:	8181      	strh	r1, [r0, #12]
 800475a:	6643      	str	r3, [r0, #100]	; 0x64
 800475c:	81c2      	strh	r2, [r0, #14]
 800475e:	6103      	str	r3, [r0, #16]
 8004760:	6143      	str	r3, [r0, #20]
 8004762:	6183      	str	r3, [r0, #24]
 8004764:	4619      	mov	r1, r3
 8004766:	2208      	movs	r2, #8
 8004768:	305c      	adds	r0, #92	; 0x5c
 800476a:	f7ff fdde 	bl	800432a <memset>
 800476e:	4b05      	ldr	r3, [pc, #20]	; (8004784 <std.isra.0+0x38>)
 8004770:	6263      	str	r3, [r4, #36]	; 0x24
 8004772:	4b05      	ldr	r3, [pc, #20]	; (8004788 <std.isra.0+0x3c>)
 8004774:	62a3      	str	r3, [r4, #40]	; 0x28
 8004776:	4b05      	ldr	r3, [pc, #20]	; (800478c <std.isra.0+0x40>)
 8004778:	62e3      	str	r3, [r4, #44]	; 0x2c
 800477a:	4b05      	ldr	r3, [pc, #20]	; (8004790 <std.isra.0+0x44>)
 800477c:	6224      	str	r4, [r4, #32]
 800477e:	6323      	str	r3, [r4, #48]	; 0x30
 8004780:	bd10      	pop	{r4, pc}
 8004782:	bf00      	nop
 8004784:	0800512d 	.word	0x0800512d
 8004788:	0800514f 	.word	0x0800514f
 800478c:	08005187 	.word	0x08005187
 8004790:	080051ab 	.word	0x080051ab

08004794 <__sfmoreglue>:
 8004794:	b570      	push	{r4, r5, r6, lr}
 8004796:	1e4a      	subs	r2, r1, #1
 8004798:	2568      	movs	r5, #104	; 0x68
 800479a:	4355      	muls	r5, r2
 800479c:	460e      	mov	r6, r1
 800479e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80047a2:	f000 f949 	bl	8004a38 <_malloc_r>
 80047a6:	4604      	mov	r4, r0
 80047a8:	b140      	cbz	r0, 80047bc <__sfmoreglue+0x28>
 80047aa:	2100      	movs	r1, #0
 80047ac:	e880 0042 	stmia.w	r0, {r1, r6}
 80047b0:	300c      	adds	r0, #12
 80047b2:	60a0      	str	r0, [r4, #8]
 80047b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80047b8:	f7ff fdb7 	bl	800432a <memset>
 80047bc:	4620      	mov	r0, r4
 80047be:	bd70      	pop	{r4, r5, r6, pc}

080047c0 <__sinit>:
 80047c0:	6983      	ldr	r3, [r0, #24]
 80047c2:	b510      	push	{r4, lr}
 80047c4:	4604      	mov	r4, r0
 80047c6:	bb33      	cbnz	r3, 8004816 <__sinit+0x56>
 80047c8:	6483      	str	r3, [r0, #72]	; 0x48
 80047ca:	64c3      	str	r3, [r0, #76]	; 0x4c
 80047cc:	6503      	str	r3, [r0, #80]	; 0x50
 80047ce:	4b12      	ldr	r3, [pc, #72]	; (8004818 <__sinit+0x58>)
 80047d0:	4a12      	ldr	r2, [pc, #72]	; (800481c <__sinit+0x5c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6282      	str	r2, [r0, #40]	; 0x28
 80047d6:	4298      	cmp	r0, r3
 80047d8:	bf04      	itt	eq
 80047da:	2301      	moveq	r3, #1
 80047dc:	6183      	streq	r3, [r0, #24]
 80047de:	f000 f81f 	bl	8004820 <__sfp>
 80047e2:	6060      	str	r0, [r4, #4]
 80047e4:	4620      	mov	r0, r4
 80047e6:	f000 f81b 	bl	8004820 <__sfp>
 80047ea:	60a0      	str	r0, [r4, #8]
 80047ec:	4620      	mov	r0, r4
 80047ee:	f000 f817 	bl	8004820 <__sfp>
 80047f2:	2200      	movs	r2, #0
 80047f4:	60e0      	str	r0, [r4, #12]
 80047f6:	2104      	movs	r1, #4
 80047f8:	6860      	ldr	r0, [r4, #4]
 80047fa:	f7ff ffa7 	bl	800474c <std.isra.0>
 80047fe:	2201      	movs	r2, #1
 8004800:	2109      	movs	r1, #9
 8004802:	68a0      	ldr	r0, [r4, #8]
 8004804:	f7ff ffa2 	bl	800474c <std.isra.0>
 8004808:	2202      	movs	r2, #2
 800480a:	2112      	movs	r1, #18
 800480c:	68e0      	ldr	r0, [r4, #12]
 800480e:	f7ff ff9d 	bl	800474c <std.isra.0>
 8004812:	2301      	movs	r3, #1
 8004814:	61a3      	str	r3, [r4, #24]
 8004816:	bd10      	pop	{r4, pc}
 8004818:	0800588c 	.word	0x0800588c
 800481c:	08004741 	.word	0x08004741

08004820 <__sfp>:
 8004820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004822:	4b1c      	ldr	r3, [pc, #112]	; (8004894 <__sfp+0x74>)
 8004824:	681e      	ldr	r6, [r3, #0]
 8004826:	69b3      	ldr	r3, [r6, #24]
 8004828:	4607      	mov	r7, r0
 800482a:	b913      	cbnz	r3, 8004832 <__sfp+0x12>
 800482c:	4630      	mov	r0, r6
 800482e:	f7ff ffc7 	bl	80047c0 <__sinit>
 8004832:	3648      	adds	r6, #72	; 0x48
 8004834:	68b4      	ldr	r4, [r6, #8]
 8004836:	6873      	ldr	r3, [r6, #4]
 8004838:	3b01      	subs	r3, #1
 800483a:	d503      	bpl.n	8004844 <__sfp+0x24>
 800483c:	6833      	ldr	r3, [r6, #0]
 800483e:	b133      	cbz	r3, 800484e <__sfp+0x2e>
 8004840:	6836      	ldr	r6, [r6, #0]
 8004842:	e7f7      	b.n	8004834 <__sfp+0x14>
 8004844:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004848:	b16d      	cbz	r5, 8004866 <__sfp+0x46>
 800484a:	3468      	adds	r4, #104	; 0x68
 800484c:	e7f4      	b.n	8004838 <__sfp+0x18>
 800484e:	2104      	movs	r1, #4
 8004850:	4638      	mov	r0, r7
 8004852:	f7ff ff9f 	bl	8004794 <__sfmoreglue>
 8004856:	6030      	str	r0, [r6, #0]
 8004858:	2800      	cmp	r0, #0
 800485a:	d1f1      	bne.n	8004840 <__sfp+0x20>
 800485c:	230c      	movs	r3, #12
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	4604      	mov	r4, r0
 8004862:	4620      	mov	r0, r4
 8004864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004866:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800486a:	81e3      	strh	r3, [r4, #14]
 800486c:	2301      	movs	r3, #1
 800486e:	81a3      	strh	r3, [r4, #12]
 8004870:	6665      	str	r5, [r4, #100]	; 0x64
 8004872:	6025      	str	r5, [r4, #0]
 8004874:	60a5      	str	r5, [r4, #8]
 8004876:	6065      	str	r5, [r4, #4]
 8004878:	6125      	str	r5, [r4, #16]
 800487a:	6165      	str	r5, [r4, #20]
 800487c:	61a5      	str	r5, [r4, #24]
 800487e:	2208      	movs	r2, #8
 8004880:	4629      	mov	r1, r5
 8004882:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004886:	f7ff fd50 	bl	800432a <memset>
 800488a:	6365      	str	r5, [r4, #52]	; 0x34
 800488c:	63a5      	str	r5, [r4, #56]	; 0x38
 800488e:	64a5      	str	r5, [r4, #72]	; 0x48
 8004890:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004892:	e7e6      	b.n	8004862 <__sfp+0x42>
 8004894:	0800588c 	.word	0x0800588c

08004898 <_fwalk_reent>:
 8004898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800489c:	4680      	mov	r8, r0
 800489e:	4689      	mov	r9, r1
 80048a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048a4:	2600      	movs	r6, #0
 80048a6:	b914      	cbnz	r4, 80048ae <_fwalk_reent+0x16>
 80048a8:	4630      	mov	r0, r6
 80048aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048ae:	68a5      	ldr	r5, [r4, #8]
 80048b0:	6867      	ldr	r7, [r4, #4]
 80048b2:	3f01      	subs	r7, #1
 80048b4:	d501      	bpl.n	80048ba <_fwalk_reent+0x22>
 80048b6:	6824      	ldr	r4, [r4, #0]
 80048b8:	e7f5      	b.n	80048a6 <_fwalk_reent+0xe>
 80048ba:	89ab      	ldrh	r3, [r5, #12]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d907      	bls.n	80048d0 <_fwalk_reent+0x38>
 80048c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048c4:	3301      	adds	r3, #1
 80048c6:	d003      	beq.n	80048d0 <_fwalk_reent+0x38>
 80048c8:	4629      	mov	r1, r5
 80048ca:	4640      	mov	r0, r8
 80048cc:	47c8      	blx	r9
 80048ce:	4306      	orrs	r6, r0
 80048d0:	3568      	adds	r5, #104	; 0x68
 80048d2:	e7ee      	b.n	80048b2 <_fwalk_reent+0x1a>

080048d4 <__swhatbuf_r>:
 80048d4:	b570      	push	{r4, r5, r6, lr}
 80048d6:	460e      	mov	r6, r1
 80048d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048dc:	2900      	cmp	r1, #0
 80048de:	b090      	sub	sp, #64	; 0x40
 80048e0:	4614      	mov	r4, r2
 80048e2:	461d      	mov	r5, r3
 80048e4:	da07      	bge.n	80048f6 <__swhatbuf_r+0x22>
 80048e6:	2300      	movs	r3, #0
 80048e8:	602b      	str	r3, [r5, #0]
 80048ea:	89b3      	ldrh	r3, [r6, #12]
 80048ec:	061a      	lsls	r2, r3, #24
 80048ee:	d410      	bmi.n	8004912 <__swhatbuf_r+0x3e>
 80048f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048f4:	e00e      	b.n	8004914 <__swhatbuf_r+0x40>
 80048f6:	aa01      	add	r2, sp, #4
 80048f8:	f000 fc7e 	bl	80051f8 <_fstat_r>
 80048fc:	2800      	cmp	r0, #0
 80048fe:	dbf2      	blt.n	80048e6 <__swhatbuf_r+0x12>
 8004900:	9a02      	ldr	r2, [sp, #8]
 8004902:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004906:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800490a:	425a      	negs	r2, r3
 800490c:	415a      	adcs	r2, r3
 800490e:	602a      	str	r2, [r5, #0]
 8004910:	e7ee      	b.n	80048f0 <__swhatbuf_r+0x1c>
 8004912:	2340      	movs	r3, #64	; 0x40
 8004914:	2000      	movs	r0, #0
 8004916:	6023      	str	r3, [r4, #0]
 8004918:	b010      	add	sp, #64	; 0x40
 800491a:	bd70      	pop	{r4, r5, r6, pc}

0800491c <__smakebuf_r>:
 800491c:	898b      	ldrh	r3, [r1, #12]
 800491e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004920:	079d      	lsls	r5, r3, #30
 8004922:	4606      	mov	r6, r0
 8004924:	460c      	mov	r4, r1
 8004926:	d507      	bpl.n	8004938 <__smakebuf_r+0x1c>
 8004928:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800492c:	6023      	str	r3, [r4, #0]
 800492e:	6123      	str	r3, [r4, #16]
 8004930:	2301      	movs	r3, #1
 8004932:	6163      	str	r3, [r4, #20]
 8004934:	b002      	add	sp, #8
 8004936:	bd70      	pop	{r4, r5, r6, pc}
 8004938:	ab01      	add	r3, sp, #4
 800493a:	466a      	mov	r2, sp
 800493c:	f7ff ffca 	bl	80048d4 <__swhatbuf_r>
 8004940:	9900      	ldr	r1, [sp, #0]
 8004942:	4605      	mov	r5, r0
 8004944:	4630      	mov	r0, r6
 8004946:	f000 f877 	bl	8004a38 <_malloc_r>
 800494a:	b948      	cbnz	r0, 8004960 <__smakebuf_r+0x44>
 800494c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004950:	059a      	lsls	r2, r3, #22
 8004952:	d4ef      	bmi.n	8004934 <__smakebuf_r+0x18>
 8004954:	f023 0303 	bic.w	r3, r3, #3
 8004958:	f043 0302 	orr.w	r3, r3, #2
 800495c:	81a3      	strh	r3, [r4, #12]
 800495e:	e7e3      	b.n	8004928 <__smakebuf_r+0xc>
 8004960:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <__smakebuf_r+0x7c>)
 8004962:	62b3      	str	r3, [r6, #40]	; 0x28
 8004964:	89a3      	ldrh	r3, [r4, #12]
 8004966:	6020      	str	r0, [r4, #0]
 8004968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800496c:	81a3      	strh	r3, [r4, #12]
 800496e:	9b00      	ldr	r3, [sp, #0]
 8004970:	6163      	str	r3, [r4, #20]
 8004972:	9b01      	ldr	r3, [sp, #4]
 8004974:	6120      	str	r0, [r4, #16]
 8004976:	b15b      	cbz	r3, 8004990 <__smakebuf_r+0x74>
 8004978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800497c:	4630      	mov	r0, r6
 800497e:	f000 fc4d 	bl	800521c <_isatty_r>
 8004982:	b128      	cbz	r0, 8004990 <__smakebuf_r+0x74>
 8004984:	89a3      	ldrh	r3, [r4, #12]
 8004986:	f023 0303 	bic.w	r3, r3, #3
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	81a3      	strh	r3, [r4, #12]
 8004990:	89a3      	ldrh	r3, [r4, #12]
 8004992:	431d      	orrs	r5, r3
 8004994:	81a5      	strh	r5, [r4, #12]
 8004996:	e7cd      	b.n	8004934 <__smakebuf_r+0x18>
 8004998:	08004741 	.word	0x08004741

0800499c <_free_r>:
 800499c:	b538      	push	{r3, r4, r5, lr}
 800499e:	4605      	mov	r5, r0
 80049a0:	2900      	cmp	r1, #0
 80049a2:	d045      	beq.n	8004a30 <_free_r+0x94>
 80049a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049a8:	1f0c      	subs	r4, r1, #4
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	bfb8      	it	lt
 80049ae:	18e4      	addlt	r4, r4, r3
 80049b0:	f000 fc56 	bl	8005260 <__malloc_lock>
 80049b4:	4a1f      	ldr	r2, [pc, #124]	; (8004a34 <_free_r+0x98>)
 80049b6:	6813      	ldr	r3, [r2, #0]
 80049b8:	4610      	mov	r0, r2
 80049ba:	b933      	cbnz	r3, 80049ca <_free_r+0x2e>
 80049bc:	6063      	str	r3, [r4, #4]
 80049be:	6014      	str	r4, [r2, #0]
 80049c0:	4628      	mov	r0, r5
 80049c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049c6:	f000 bc4c 	b.w	8005262 <__malloc_unlock>
 80049ca:	42a3      	cmp	r3, r4
 80049cc:	d90c      	bls.n	80049e8 <_free_r+0x4c>
 80049ce:	6821      	ldr	r1, [r4, #0]
 80049d0:	1862      	adds	r2, r4, r1
 80049d2:	4293      	cmp	r3, r2
 80049d4:	bf04      	itt	eq
 80049d6:	681a      	ldreq	r2, [r3, #0]
 80049d8:	685b      	ldreq	r3, [r3, #4]
 80049da:	6063      	str	r3, [r4, #4]
 80049dc:	bf04      	itt	eq
 80049de:	1852      	addeq	r2, r2, r1
 80049e0:	6022      	streq	r2, [r4, #0]
 80049e2:	6004      	str	r4, [r0, #0]
 80049e4:	e7ec      	b.n	80049c0 <_free_r+0x24>
 80049e6:	4613      	mov	r3, r2
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	b10a      	cbz	r2, 80049f0 <_free_r+0x54>
 80049ec:	42a2      	cmp	r2, r4
 80049ee:	d9fa      	bls.n	80049e6 <_free_r+0x4a>
 80049f0:	6819      	ldr	r1, [r3, #0]
 80049f2:	1858      	adds	r0, r3, r1
 80049f4:	42a0      	cmp	r0, r4
 80049f6:	d10b      	bne.n	8004a10 <_free_r+0x74>
 80049f8:	6820      	ldr	r0, [r4, #0]
 80049fa:	4401      	add	r1, r0
 80049fc:	1858      	adds	r0, r3, r1
 80049fe:	4282      	cmp	r2, r0
 8004a00:	6019      	str	r1, [r3, #0]
 8004a02:	d1dd      	bne.n	80049c0 <_free_r+0x24>
 8004a04:	6810      	ldr	r0, [r2, #0]
 8004a06:	6852      	ldr	r2, [r2, #4]
 8004a08:	605a      	str	r2, [r3, #4]
 8004a0a:	4401      	add	r1, r0
 8004a0c:	6019      	str	r1, [r3, #0]
 8004a0e:	e7d7      	b.n	80049c0 <_free_r+0x24>
 8004a10:	d902      	bls.n	8004a18 <_free_r+0x7c>
 8004a12:	230c      	movs	r3, #12
 8004a14:	602b      	str	r3, [r5, #0]
 8004a16:	e7d3      	b.n	80049c0 <_free_r+0x24>
 8004a18:	6820      	ldr	r0, [r4, #0]
 8004a1a:	1821      	adds	r1, r4, r0
 8004a1c:	428a      	cmp	r2, r1
 8004a1e:	bf04      	itt	eq
 8004a20:	6811      	ldreq	r1, [r2, #0]
 8004a22:	6852      	ldreq	r2, [r2, #4]
 8004a24:	6062      	str	r2, [r4, #4]
 8004a26:	bf04      	itt	eq
 8004a28:	1809      	addeq	r1, r1, r0
 8004a2a:	6021      	streq	r1, [r4, #0]
 8004a2c:	605c      	str	r4, [r3, #4]
 8004a2e:	e7c7      	b.n	80049c0 <_free_r+0x24>
 8004a30:	bd38      	pop	{r3, r4, r5, pc}
 8004a32:	bf00      	nop
 8004a34:	20005b54 	.word	0x20005b54

08004a38 <_malloc_r>:
 8004a38:	b570      	push	{r4, r5, r6, lr}
 8004a3a:	1ccd      	adds	r5, r1, #3
 8004a3c:	f025 0503 	bic.w	r5, r5, #3
 8004a40:	3508      	adds	r5, #8
 8004a42:	2d0c      	cmp	r5, #12
 8004a44:	bf38      	it	cc
 8004a46:	250c      	movcc	r5, #12
 8004a48:	2d00      	cmp	r5, #0
 8004a4a:	4606      	mov	r6, r0
 8004a4c:	db01      	blt.n	8004a52 <_malloc_r+0x1a>
 8004a4e:	42a9      	cmp	r1, r5
 8004a50:	d903      	bls.n	8004a5a <_malloc_r+0x22>
 8004a52:	230c      	movs	r3, #12
 8004a54:	6033      	str	r3, [r6, #0]
 8004a56:	2000      	movs	r0, #0
 8004a58:	bd70      	pop	{r4, r5, r6, pc}
 8004a5a:	f000 fc01 	bl	8005260 <__malloc_lock>
 8004a5e:	4a23      	ldr	r2, [pc, #140]	; (8004aec <_malloc_r+0xb4>)
 8004a60:	6814      	ldr	r4, [r2, #0]
 8004a62:	4621      	mov	r1, r4
 8004a64:	b991      	cbnz	r1, 8004a8c <_malloc_r+0x54>
 8004a66:	4c22      	ldr	r4, [pc, #136]	; (8004af0 <_malloc_r+0xb8>)
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	b91b      	cbnz	r3, 8004a74 <_malloc_r+0x3c>
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	f000 fb4d 	bl	800510c <_sbrk_r>
 8004a72:	6020      	str	r0, [r4, #0]
 8004a74:	4629      	mov	r1, r5
 8004a76:	4630      	mov	r0, r6
 8004a78:	f000 fb48 	bl	800510c <_sbrk_r>
 8004a7c:	1c43      	adds	r3, r0, #1
 8004a7e:	d126      	bne.n	8004ace <_malloc_r+0x96>
 8004a80:	230c      	movs	r3, #12
 8004a82:	6033      	str	r3, [r6, #0]
 8004a84:	4630      	mov	r0, r6
 8004a86:	f000 fbec 	bl	8005262 <__malloc_unlock>
 8004a8a:	e7e4      	b.n	8004a56 <_malloc_r+0x1e>
 8004a8c:	680b      	ldr	r3, [r1, #0]
 8004a8e:	1b5b      	subs	r3, r3, r5
 8004a90:	d41a      	bmi.n	8004ac8 <_malloc_r+0x90>
 8004a92:	2b0b      	cmp	r3, #11
 8004a94:	d90f      	bls.n	8004ab6 <_malloc_r+0x7e>
 8004a96:	600b      	str	r3, [r1, #0]
 8004a98:	50cd      	str	r5, [r1, r3]
 8004a9a:	18cc      	adds	r4, r1, r3
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	f000 fbe0 	bl	8005262 <__malloc_unlock>
 8004aa2:	f104 000b 	add.w	r0, r4, #11
 8004aa6:	1d23      	adds	r3, r4, #4
 8004aa8:	f020 0007 	bic.w	r0, r0, #7
 8004aac:	1ac3      	subs	r3, r0, r3
 8004aae:	d01b      	beq.n	8004ae8 <_malloc_r+0xb0>
 8004ab0:	425a      	negs	r2, r3
 8004ab2:	50e2      	str	r2, [r4, r3]
 8004ab4:	bd70      	pop	{r4, r5, r6, pc}
 8004ab6:	428c      	cmp	r4, r1
 8004ab8:	bf0d      	iteet	eq
 8004aba:	6863      	ldreq	r3, [r4, #4]
 8004abc:	684b      	ldrne	r3, [r1, #4]
 8004abe:	6063      	strne	r3, [r4, #4]
 8004ac0:	6013      	streq	r3, [r2, #0]
 8004ac2:	bf18      	it	ne
 8004ac4:	460c      	movne	r4, r1
 8004ac6:	e7e9      	b.n	8004a9c <_malloc_r+0x64>
 8004ac8:	460c      	mov	r4, r1
 8004aca:	6849      	ldr	r1, [r1, #4]
 8004acc:	e7ca      	b.n	8004a64 <_malloc_r+0x2c>
 8004ace:	1cc4      	adds	r4, r0, #3
 8004ad0:	f024 0403 	bic.w	r4, r4, #3
 8004ad4:	42a0      	cmp	r0, r4
 8004ad6:	d005      	beq.n	8004ae4 <_malloc_r+0xac>
 8004ad8:	1a21      	subs	r1, r4, r0
 8004ada:	4630      	mov	r0, r6
 8004adc:	f000 fb16 	bl	800510c <_sbrk_r>
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	d0cd      	beq.n	8004a80 <_malloc_r+0x48>
 8004ae4:	6025      	str	r5, [r4, #0]
 8004ae6:	e7d9      	b.n	8004a9c <_malloc_r+0x64>
 8004ae8:	bd70      	pop	{r4, r5, r6, pc}
 8004aea:	bf00      	nop
 8004aec:	20005b54 	.word	0x20005b54
 8004af0:	20005b58 	.word	0x20005b58

08004af4 <__sfputc_r>:
 8004af4:	6893      	ldr	r3, [r2, #8]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	b410      	push	{r4}
 8004afc:	6093      	str	r3, [r2, #8]
 8004afe:	da09      	bge.n	8004b14 <__sfputc_r+0x20>
 8004b00:	6994      	ldr	r4, [r2, #24]
 8004b02:	42a3      	cmp	r3, r4
 8004b04:	db02      	blt.n	8004b0c <__sfputc_r+0x18>
 8004b06:	b2cb      	uxtb	r3, r1
 8004b08:	2b0a      	cmp	r3, #10
 8004b0a:	d103      	bne.n	8004b14 <__sfputc_r+0x20>
 8004b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b10:	f7ff bca4 	b.w	800445c <__swbuf_r>
 8004b14:	6813      	ldr	r3, [r2, #0]
 8004b16:	1c58      	adds	r0, r3, #1
 8004b18:	6010      	str	r0, [r2, #0]
 8004b1a:	7019      	strb	r1, [r3, #0]
 8004b1c:	b2c8      	uxtb	r0, r1
 8004b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <__sfputs_r>:
 8004b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b26:	4606      	mov	r6, r0
 8004b28:	460f      	mov	r7, r1
 8004b2a:	4614      	mov	r4, r2
 8004b2c:	18d5      	adds	r5, r2, r3
 8004b2e:	42ac      	cmp	r4, r5
 8004b30:	d101      	bne.n	8004b36 <__sfputs_r+0x12>
 8004b32:	2000      	movs	r0, #0
 8004b34:	e007      	b.n	8004b46 <__sfputs_r+0x22>
 8004b36:	463a      	mov	r2, r7
 8004b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b3c:	4630      	mov	r0, r6
 8004b3e:	f7ff ffd9 	bl	8004af4 <__sfputc_r>
 8004b42:	1c43      	adds	r3, r0, #1
 8004b44:	d1f3      	bne.n	8004b2e <__sfputs_r+0xa>
 8004b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b48 <_vfiprintf_r>:
 8004b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b4c:	b09d      	sub	sp, #116	; 0x74
 8004b4e:	460c      	mov	r4, r1
 8004b50:	4617      	mov	r7, r2
 8004b52:	9303      	str	r3, [sp, #12]
 8004b54:	4606      	mov	r6, r0
 8004b56:	b118      	cbz	r0, 8004b60 <_vfiprintf_r+0x18>
 8004b58:	6983      	ldr	r3, [r0, #24]
 8004b5a:	b90b      	cbnz	r3, 8004b60 <_vfiprintf_r+0x18>
 8004b5c:	f7ff fe30 	bl	80047c0 <__sinit>
 8004b60:	4b7c      	ldr	r3, [pc, #496]	; (8004d54 <_vfiprintf_r+0x20c>)
 8004b62:	429c      	cmp	r4, r3
 8004b64:	d157      	bne.n	8004c16 <_vfiprintf_r+0xce>
 8004b66:	6874      	ldr	r4, [r6, #4]
 8004b68:	89a3      	ldrh	r3, [r4, #12]
 8004b6a:	0718      	lsls	r0, r3, #28
 8004b6c:	d55d      	bpl.n	8004c2a <_vfiprintf_r+0xe2>
 8004b6e:	6923      	ldr	r3, [r4, #16]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d05a      	beq.n	8004c2a <_vfiprintf_r+0xe2>
 8004b74:	2300      	movs	r3, #0
 8004b76:	9309      	str	r3, [sp, #36]	; 0x24
 8004b78:	2320      	movs	r3, #32
 8004b7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b7e:	2330      	movs	r3, #48	; 0x30
 8004b80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b84:	f04f 0b01 	mov.w	fp, #1
 8004b88:	46b8      	mov	r8, r7
 8004b8a:	4645      	mov	r5, r8
 8004b8c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d155      	bne.n	8004c40 <_vfiprintf_r+0xf8>
 8004b94:	ebb8 0a07 	subs.w	sl, r8, r7
 8004b98:	d00b      	beq.n	8004bb2 <_vfiprintf_r+0x6a>
 8004b9a:	4653      	mov	r3, sl
 8004b9c:	463a      	mov	r2, r7
 8004b9e:	4621      	mov	r1, r4
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	f7ff ffbf 	bl	8004b24 <__sfputs_r>
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	f000 80c4 	beq.w	8004d34 <_vfiprintf_r+0x1ec>
 8004bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bae:	4453      	add	r3, sl
 8004bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8004bb2:	f898 3000 	ldrb.w	r3, [r8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 80bc 	beq.w	8004d34 <_vfiprintf_r+0x1ec>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc2:	9304      	str	r3, [sp, #16]
 8004bc4:	9307      	str	r3, [sp, #28]
 8004bc6:	9205      	str	r2, [sp, #20]
 8004bc8:	9306      	str	r3, [sp, #24]
 8004bca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bce:	931a      	str	r3, [sp, #104]	; 0x68
 8004bd0:	2205      	movs	r2, #5
 8004bd2:	7829      	ldrb	r1, [r5, #0]
 8004bd4:	4860      	ldr	r0, [pc, #384]	; (8004d58 <_vfiprintf_r+0x210>)
 8004bd6:	f7fb fb03 	bl	80001e0 <memchr>
 8004bda:	f105 0801 	add.w	r8, r5, #1
 8004bde:	9b04      	ldr	r3, [sp, #16]
 8004be0:	2800      	cmp	r0, #0
 8004be2:	d131      	bne.n	8004c48 <_vfiprintf_r+0x100>
 8004be4:	06d9      	lsls	r1, r3, #27
 8004be6:	bf44      	itt	mi
 8004be8:	2220      	movmi	r2, #32
 8004bea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004bee:	071a      	lsls	r2, r3, #28
 8004bf0:	bf44      	itt	mi
 8004bf2:	222b      	movmi	r2, #43	; 0x2b
 8004bf4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004bf8:	782a      	ldrb	r2, [r5, #0]
 8004bfa:	2a2a      	cmp	r2, #42	; 0x2a
 8004bfc:	d02c      	beq.n	8004c58 <_vfiprintf_r+0x110>
 8004bfe:	9a07      	ldr	r2, [sp, #28]
 8004c00:	2100      	movs	r1, #0
 8004c02:	200a      	movs	r0, #10
 8004c04:	46a8      	mov	r8, r5
 8004c06:	3501      	adds	r5, #1
 8004c08:	f898 3000 	ldrb.w	r3, [r8]
 8004c0c:	3b30      	subs	r3, #48	; 0x30
 8004c0e:	2b09      	cmp	r3, #9
 8004c10:	d96d      	bls.n	8004cee <_vfiprintf_r+0x1a6>
 8004c12:	b371      	cbz	r1, 8004c72 <_vfiprintf_r+0x12a>
 8004c14:	e026      	b.n	8004c64 <_vfiprintf_r+0x11c>
 8004c16:	4b51      	ldr	r3, [pc, #324]	; (8004d5c <_vfiprintf_r+0x214>)
 8004c18:	429c      	cmp	r4, r3
 8004c1a:	d101      	bne.n	8004c20 <_vfiprintf_r+0xd8>
 8004c1c:	68b4      	ldr	r4, [r6, #8]
 8004c1e:	e7a3      	b.n	8004b68 <_vfiprintf_r+0x20>
 8004c20:	4b4f      	ldr	r3, [pc, #316]	; (8004d60 <_vfiprintf_r+0x218>)
 8004c22:	429c      	cmp	r4, r3
 8004c24:	bf08      	it	eq
 8004c26:	68f4      	ldreq	r4, [r6, #12]
 8004c28:	e79e      	b.n	8004b68 <_vfiprintf_r+0x20>
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	4630      	mov	r0, r6
 8004c2e:	f7ff fc67 	bl	8004500 <__swsetup_r>
 8004c32:	2800      	cmp	r0, #0
 8004c34:	d09e      	beq.n	8004b74 <_vfiprintf_r+0x2c>
 8004c36:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3a:	b01d      	add	sp, #116	; 0x74
 8004c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c40:	2b25      	cmp	r3, #37	; 0x25
 8004c42:	d0a7      	beq.n	8004b94 <_vfiprintf_r+0x4c>
 8004c44:	46a8      	mov	r8, r5
 8004c46:	e7a0      	b.n	8004b8a <_vfiprintf_r+0x42>
 8004c48:	4a43      	ldr	r2, [pc, #268]	; (8004d58 <_vfiprintf_r+0x210>)
 8004c4a:	1a80      	subs	r0, r0, r2
 8004c4c:	fa0b f000 	lsl.w	r0, fp, r0
 8004c50:	4318      	orrs	r0, r3
 8004c52:	9004      	str	r0, [sp, #16]
 8004c54:	4645      	mov	r5, r8
 8004c56:	e7bb      	b.n	8004bd0 <_vfiprintf_r+0x88>
 8004c58:	9a03      	ldr	r2, [sp, #12]
 8004c5a:	1d11      	adds	r1, r2, #4
 8004c5c:	6812      	ldr	r2, [r2, #0]
 8004c5e:	9103      	str	r1, [sp, #12]
 8004c60:	2a00      	cmp	r2, #0
 8004c62:	db01      	blt.n	8004c68 <_vfiprintf_r+0x120>
 8004c64:	9207      	str	r2, [sp, #28]
 8004c66:	e004      	b.n	8004c72 <_vfiprintf_r+0x12a>
 8004c68:	4252      	negs	r2, r2
 8004c6a:	f043 0302 	orr.w	r3, r3, #2
 8004c6e:	9207      	str	r2, [sp, #28]
 8004c70:	9304      	str	r3, [sp, #16]
 8004c72:	f898 3000 	ldrb.w	r3, [r8]
 8004c76:	2b2e      	cmp	r3, #46	; 0x2e
 8004c78:	d110      	bne.n	8004c9c <_vfiprintf_r+0x154>
 8004c7a:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8004c80:	f108 0101 	add.w	r1, r8, #1
 8004c84:	d137      	bne.n	8004cf6 <_vfiprintf_r+0x1ae>
 8004c86:	9b03      	ldr	r3, [sp, #12]
 8004c88:	1d1a      	adds	r2, r3, #4
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	9203      	str	r2, [sp, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	bfb8      	it	lt
 8004c92:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c96:	f108 0802 	add.w	r8, r8, #2
 8004c9a:	9305      	str	r3, [sp, #20]
 8004c9c:	4d31      	ldr	r5, [pc, #196]	; (8004d64 <_vfiprintf_r+0x21c>)
 8004c9e:	f898 1000 	ldrb.w	r1, [r8]
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	f7fb fa9b 	bl	80001e0 <memchr>
 8004caa:	b140      	cbz	r0, 8004cbe <_vfiprintf_r+0x176>
 8004cac:	2340      	movs	r3, #64	; 0x40
 8004cae:	1b40      	subs	r0, r0, r5
 8004cb0:	fa03 f000 	lsl.w	r0, r3, r0
 8004cb4:	9b04      	ldr	r3, [sp, #16]
 8004cb6:	4303      	orrs	r3, r0
 8004cb8:	9304      	str	r3, [sp, #16]
 8004cba:	f108 0801 	add.w	r8, r8, #1
 8004cbe:	f898 1000 	ldrb.w	r1, [r8]
 8004cc2:	4829      	ldr	r0, [pc, #164]	; (8004d68 <_vfiprintf_r+0x220>)
 8004cc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cc8:	2206      	movs	r2, #6
 8004cca:	f108 0701 	add.w	r7, r8, #1
 8004cce:	f7fb fa87 	bl	80001e0 <memchr>
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d034      	beq.n	8004d40 <_vfiprintf_r+0x1f8>
 8004cd6:	4b25      	ldr	r3, [pc, #148]	; (8004d6c <_vfiprintf_r+0x224>)
 8004cd8:	bb03      	cbnz	r3, 8004d1c <_vfiprintf_r+0x1d4>
 8004cda:	9b03      	ldr	r3, [sp, #12]
 8004cdc:	3307      	adds	r3, #7
 8004cde:	f023 0307 	bic.w	r3, r3, #7
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	9303      	str	r3, [sp, #12]
 8004ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ce8:	444b      	add	r3, r9
 8004cea:	9309      	str	r3, [sp, #36]	; 0x24
 8004cec:	e74c      	b.n	8004b88 <_vfiprintf_r+0x40>
 8004cee:	fb00 3202 	mla	r2, r0, r2, r3
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	e786      	b.n	8004c04 <_vfiprintf_r+0xbc>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	9305      	str	r3, [sp, #20]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	250a      	movs	r5, #10
 8004cfe:	4688      	mov	r8, r1
 8004d00:	3101      	adds	r1, #1
 8004d02:	f898 2000 	ldrb.w	r2, [r8]
 8004d06:	3a30      	subs	r2, #48	; 0x30
 8004d08:	2a09      	cmp	r2, #9
 8004d0a:	d903      	bls.n	8004d14 <_vfiprintf_r+0x1cc>
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0c5      	beq.n	8004c9c <_vfiprintf_r+0x154>
 8004d10:	9005      	str	r0, [sp, #20]
 8004d12:	e7c3      	b.n	8004c9c <_vfiprintf_r+0x154>
 8004d14:	fb05 2000 	mla	r0, r5, r0, r2
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e7f0      	b.n	8004cfe <_vfiprintf_r+0x1b6>
 8004d1c:	ab03      	add	r3, sp, #12
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	4622      	mov	r2, r4
 8004d22:	4b13      	ldr	r3, [pc, #76]	; (8004d70 <_vfiprintf_r+0x228>)
 8004d24:	a904      	add	r1, sp, #16
 8004d26:	4630      	mov	r0, r6
 8004d28:	f3af 8000 	nop.w
 8004d2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004d30:	4681      	mov	r9, r0
 8004d32:	d1d8      	bne.n	8004ce6 <_vfiprintf_r+0x19e>
 8004d34:	89a3      	ldrh	r3, [r4, #12]
 8004d36:	065b      	lsls	r3, r3, #25
 8004d38:	f53f af7d 	bmi.w	8004c36 <_vfiprintf_r+0xee>
 8004d3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d3e:	e77c      	b.n	8004c3a <_vfiprintf_r+0xf2>
 8004d40:	ab03      	add	r3, sp, #12
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	4622      	mov	r2, r4
 8004d46:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <_vfiprintf_r+0x228>)
 8004d48:	a904      	add	r1, sp, #16
 8004d4a:	4630      	mov	r0, r6
 8004d4c:	f000 f888 	bl	8004e60 <_printf_i>
 8004d50:	e7ec      	b.n	8004d2c <_vfiprintf_r+0x1e4>
 8004d52:	bf00      	nop
 8004d54:	080058b0 	.word	0x080058b0
 8004d58:	080058f0 	.word	0x080058f0
 8004d5c:	080058d0 	.word	0x080058d0
 8004d60:	08005890 	.word	0x08005890
 8004d64:	080058f6 	.word	0x080058f6
 8004d68:	080058fa 	.word	0x080058fa
 8004d6c:	00000000 	.word	0x00000000
 8004d70:	08004b25 	.word	0x08004b25

08004d74 <_printf_common>:
 8004d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d78:	4691      	mov	r9, r2
 8004d7a:	461f      	mov	r7, r3
 8004d7c:	688a      	ldr	r2, [r1, #8]
 8004d7e:	690b      	ldr	r3, [r1, #16]
 8004d80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d84:	4293      	cmp	r3, r2
 8004d86:	bfb8      	it	lt
 8004d88:	4613      	movlt	r3, r2
 8004d8a:	f8c9 3000 	str.w	r3, [r9]
 8004d8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d92:	4606      	mov	r6, r0
 8004d94:	460c      	mov	r4, r1
 8004d96:	b112      	cbz	r2, 8004d9e <_printf_common+0x2a>
 8004d98:	3301      	adds	r3, #1
 8004d9a:	f8c9 3000 	str.w	r3, [r9]
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	0699      	lsls	r1, r3, #26
 8004da2:	bf42      	ittt	mi
 8004da4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004da8:	3302      	addmi	r3, #2
 8004daa:	f8c9 3000 	strmi.w	r3, [r9]
 8004dae:	6825      	ldr	r5, [r4, #0]
 8004db0:	f015 0506 	ands.w	r5, r5, #6
 8004db4:	d107      	bne.n	8004dc6 <_printf_common+0x52>
 8004db6:	f104 0a19 	add.w	sl, r4, #25
 8004dba:	68e3      	ldr	r3, [r4, #12]
 8004dbc:	f8d9 2000 	ldr.w	r2, [r9]
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	429d      	cmp	r5, r3
 8004dc4:	db29      	blt.n	8004e1a <_printf_common+0xa6>
 8004dc6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004dca:	6822      	ldr	r2, [r4, #0]
 8004dcc:	3300      	adds	r3, #0
 8004dce:	bf18      	it	ne
 8004dd0:	2301      	movne	r3, #1
 8004dd2:	0692      	lsls	r2, r2, #26
 8004dd4:	d42e      	bmi.n	8004e34 <_printf_common+0xc0>
 8004dd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dda:	4639      	mov	r1, r7
 8004ddc:	4630      	mov	r0, r6
 8004dde:	47c0      	blx	r8
 8004de0:	3001      	adds	r0, #1
 8004de2:	d021      	beq.n	8004e28 <_printf_common+0xb4>
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	68e5      	ldr	r5, [r4, #12]
 8004de8:	f8d9 2000 	ldr.w	r2, [r9]
 8004dec:	f003 0306 	and.w	r3, r3, #6
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	bf08      	it	eq
 8004df4:	1aad      	subeq	r5, r5, r2
 8004df6:	68a3      	ldr	r3, [r4, #8]
 8004df8:	6922      	ldr	r2, [r4, #16]
 8004dfa:	bf0c      	ite	eq
 8004dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e00:	2500      	movne	r5, #0
 8004e02:	4293      	cmp	r3, r2
 8004e04:	bfc4      	itt	gt
 8004e06:	1a9b      	subgt	r3, r3, r2
 8004e08:	18ed      	addgt	r5, r5, r3
 8004e0a:	f04f 0900 	mov.w	r9, #0
 8004e0e:	341a      	adds	r4, #26
 8004e10:	454d      	cmp	r5, r9
 8004e12:	d11b      	bne.n	8004e4c <_printf_common+0xd8>
 8004e14:	2000      	movs	r0, #0
 8004e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	4652      	mov	r2, sl
 8004e1e:	4639      	mov	r1, r7
 8004e20:	4630      	mov	r0, r6
 8004e22:	47c0      	blx	r8
 8004e24:	3001      	adds	r0, #1
 8004e26:	d103      	bne.n	8004e30 <_printf_common+0xbc>
 8004e28:	f04f 30ff 	mov.w	r0, #4294967295
 8004e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e30:	3501      	adds	r5, #1
 8004e32:	e7c2      	b.n	8004dba <_printf_common+0x46>
 8004e34:	18e1      	adds	r1, r4, r3
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	2030      	movs	r0, #48	; 0x30
 8004e3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e3e:	4422      	add	r2, r4
 8004e40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e48:	3302      	adds	r3, #2
 8004e4a:	e7c4      	b.n	8004dd6 <_printf_common+0x62>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	4622      	mov	r2, r4
 8004e50:	4639      	mov	r1, r7
 8004e52:	4630      	mov	r0, r6
 8004e54:	47c0      	blx	r8
 8004e56:	3001      	adds	r0, #1
 8004e58:	d0e6      	beq.n	8004e28 <_printf_common+0xb4>
 8004e5a:	f109 0901 	add.w	r9, r9, #1
 8004e5e:	e7d7      	b.n	8004e10 <_printf_common+0x9c>

08004e60 <_printf_i>:
 8004e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e64:	4617      	mov	r7, r2
 8004e66:	7e0a      	ldrb	r2, [r1, #24]
 8004e68:	b085      	sub	sp, #20
 8004e6a:	2a6e      	cmp	r2, #110	; 0x6e
 8004e6c:	4698      	mov	r8, r3
 8004e6e:	4606      	mov	r6, r0
 8004e70:	460c      	mov	r4, r1
 8004e72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e74:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004e78:	f000 80bc 	beq.w	8004ff4 <_printf_i+0x194>
 8004e7c:	d81a      	bhi.n	8004eb4 <_printf_i+0x54>
 8004e7e:	2a63      	cmp	r2, #99	; 0x63
 8004e80:	d02e      	beq.n	8004ee0 <_printf_i+0x80>
 8004e82:	d80a      	bhi.n	8004e9a <_printf_i+0x3a>
 8004e84:	2a00      	cmp	r2, #0
 8004e86:	f000 80c8 	beq.w	800501a <_printf_i+0x1ba>
 8004e8a:	2a58      	cmp	r2, #88	; 0x58
 8004e8c:	f000 808a 	beq.w	8004fa4 <_printf_i+0x144>
 8004e90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e94:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004e98:	e02a      	b.n	8004ef0 <_printf_i+0x90>
 8004e9a:	2a64      	cmp	r2, #100	; 0x64
 8004e9c:	d001      	beq.n	8004ea2 <_printf_i+0x42>
 8004e9e:	2a69      	cmp	r2, #105	; 0x69
 8004ea0:	d1f6      	bne.n	8004e90 <_printf_i+0x30>
 8004ea2:	6821      	ldr	r1, [r4, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004eaa:	d023      	beq.n	8004ef4 <_printf_i+0x94>
 8004eac:	1d11      	adds	r1, r2, #4
 8004eae:	6019      	str	r1, [r3, #0]
 8004eb0:	6813      	ldr	r3, [r2, #0]
 8004eb2:	e027      	b.n	8004f04 <_printf_i+0xa4>
 8004eb4:	2a73      	cmp	r2, #115	; 0x73
 8004eb6:	f000 80b4 	beq.w	8005022 <_printf_i+0x1c2>
 8004eba:	d808      	bhi.n	8004ece <_printf_i+0x6e>
 8004ebc:	2a6f      	cmp	r2, #111	; 0x6f
 8004ebe:	d02a      	beq.n	8004f16 <_printf_i+0xb6>
 8004ec0:	2a70      	cmp	r2, #112	; 0x70
 8004ec2:	d1e5      	bne.n	8004e90 <_printf_i+0x30>
 8004ec4:	680a      	ldr	r2, [r1, #0]
 8004ec6:	f042 0220 	orr.w	r2, r2, #32
 8004eca:	600a      	str	r2, [r1, #0]
 8004ecc:	e003      	b.n	8004ed6 <_printf_i+0x76>
 8004ece:	2a75      	cmp	r2, #117	; 0x75
 8004ed0:	d021      	beq.n	8004f16 <_printf_i+0xb6>
 8004ed2:	2a78      	cmp	r2, #120	; 0x78
 8004ed4:	d1dc      	bne.n	8004e90 <_printf_i+0x30>
 8004ed6:	2278      	movs	r2, #120	; 0x78
 8004ed8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004edc:	496e      	ldr	r1, [pc, #440]	; (8005098 <_printf_i+0x238>)
 8004ede:	e064      	b.n	8004faa <_printf_i+0x14a>
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004ee6:	1d11      	adds	r1, r2, #4
 8004ee8:	6019      	str	r1, [r3, #0]
 8004eea:	6813      	ldr	r3, [r2, #0]
 8004eec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0a3      	b.n	800503c <_printf_i+0x1dc>
 8004ef4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004ef8:	f102 0104 	add.w	r1, r2, #4
 8004efc:	6019      	str	r1, [r3, #0]
 8004efe:	d0d7      	beq.n	8004eb0 <_printf_i+0x50>
 8004f00:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	da03      	bge.n	8004f10 <_printf_i+0xb0>
 8004f08:	222d      	movs	r2, #45	; 0x2d
 8004f0a:	425b      	negs	r3, r3
 8004f0c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004f10:	4962      	ldr	r1, [pc, #392]	; (800509c <_printf_i+0x23c>)
 8004f12:	220a      	movs	r2, #10
 8004f14:	e017      	b.n	8004f46 <_printf_i+0xe6>
 8004f16:	6820      	ldr	r0, [r4, #0]
 8004f18:	6819      	ldr	r1, [r3, #0]
 8004f1a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004f1e:	d003      	beq.n	8004f28 <_printf_i+0xc8>
 8004f20:	1d08      	adds	r0, r1, #4
 8004f22:	6018      	str	r0, [r3, #0]
 8004f24:	680b      	ldr	r3, [r1, #0]
 8004f26:	e006      	b.n	8004f36 <_printf_i+0xd6>
 8004f28:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f2c:	f101 0004 	add.w	r0, r1, #4
 8004f30:	6018      	str	r0, [r3, #0]
 8004f32:	d0f7      	beq.n	8004f24 <_printf_i+0xc4>
 8004f34:	880b      	ldrh	r3, [r1, #0]
 8004f36:	4959      	ldr	r1, [pc, #356]	; (800509c <_printf_i+0x23c>)
 8004f38:	2a6f      	cmp	r2, #111	; 0x6f
 8004f3a:	bf14      	ite	ne
 8004f3c:	220a      	movne	r2, #10
 8004f3e:	2208      	moveq	r2, #8
 8004f40:	2000      	movs	r0, #0
 8004f42:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004f46:	6865      	ldr	r5, [r4, #4]
 8004f48:	60a5      	str	r5, [r4, #8]
 8004f4a:	2d00      	cmp	r5, #0
 8004f4c:	f2c0 809c 	blt.w	8005088 <_printf_i+0x228>
 8004f50:	6820      	ldr	r0, [r4, #0]
 8004f52:	f020 0004 	bic.w	r0, r0, #4
 8004f56:	6020      	str	r0, [r4, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d13f      	bne.n	8004fdc <_printf_i+0x17c>
 8004f5c:	2d00      	cmp	r5, #0
 8004f5e:	f040 8095 	bne.w	800508c <_printf_i+0x22c>
 8004f62:	4675      	mov	r5, lr
 8004f64:	2a08      	cmp	r2, #8
 8004f66:	d10b      	bne.n	8004f80 <_printf_i+0x120>
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	07da      	lsls	r2, r3, #31
 8004f6c:	d508      	bpl.n	8004f80 <_printf_i+0x120>
 8004f6e:	6923      	ldr	r3, [r4, #16]
 8004f70:	6862      	ldr	r2, [r4, #4]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	bfde      	ittt	le
 8004f76:	2330      	movle	r3, #48	; 0x30
 8004f78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f80:	ebae 0305 	sub.w	r3, lr, r5
 8004f84:	6123      	str	r3, [r4, #16]
 8004f86:	f8cd 8000 	str.w	r8, [sp]
 8004f8a:	463b      	mov	r3, r7
 8004f8c:	aa03      	add	r2, sp, #12
 8004f8e:	4621      	mov	r1, r4
 8004f90:	4630      	mov	r0, r6
 8004f92:	f7ff feef 	bl	8004d74 <_printf_common>
 8004f96:	3001      	adds	r0, #1
 8004f98:	d155      	bne.n	8005046 <_printf_i+0x1e6>
 8004f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f9e:	b005      	add	sp, #20
 8004fa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fa4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004fa8:	493c      	ldr	r1, [pc, #240]	; (800509c <_printf_i+0x23c>)
 8004faa:	6822      	ldr	r2, [r4, #0]
 8004fac:	6818      	ldr	r0, [r3, #0]
 8004fae:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004fb2:	f100 0504 	add.w	r5, r0, #4
 8004fb6:	601d      	str	r5, [r3, #0]
 8004fb8:	d001      	beq.n	8004fbe <_printf_i+0x15e>
 8004fba:	6803      	ldr	r3, [r0, #0]
 8004fbc:	e002      	b.n	8004fc4 <_printf_i+0x164>
 8004fbe:	0655      	lsls	r5, r2, #25
 8004fc0:	d5fb      	bpl.n	8004fba <_printf_i+0x15a>
 8004fc2:	8803      	ldrh	r3, [r0, #0]
 8004fc4:	07d0      	lsls	r0, r2, #31
 8004fc6:	bf44      	itt	mi
 8004fc8:	f042 0220 	orrmi.w	r2, r2, #32
 8004fcc:	6022      	strmi	r2, [r4, #0]
 8004fce:	b91b      	cbnz	r3, 8004fd8 <_printf_i+0x178>
 8004fd0:	6822      	ldr	r2, [r4, #0]
 8004fd2:	f022 0220 	bic.w	r2, r2, #32
 8004fd6:	6022      	str	r2, [r4, #0]
 8004fd8:	2210      	movs	r2, #16
 8004fda:	e7b1      	b.n	8004f40 <_printf_i+0xe0>
 8004fdc:	4675      	mov	r5, lr
 8004fde:	fbb3 f0f2 	udiv	r0, r3, r2
 8004fe2:	fb02 3310 	mls	r3, r2, r0, r3
 8004fe6:	5ccb      	ldrb	r3, [r1, r3]
 8004fe8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004fec:	4603      	mov	r3, r0
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	d1f5      	bne.n	8004fde <_printf_i+0x17e>
 8004ff2:	e7b7      	b.n	8004f64 <_printf_i+0x104>
 8004ff4:	6808      	ldr	r0, [r1, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	6949      	ldr	r1, [r1, #20]
 8004ffa:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004ffe:	d004      	beq.n	800500a <_printf_i+0x1aa>
 8005000:	1d10      	adds	r0, r2, #4
 8005002:	6018      	str	r0, [r3, #0]
 8005004:	6813      	ldr	r3, [r2, #0]
 8005006:	6019      	str	r1, [r3, #0]
 8005008:	e007      	b.n	800501a <_printf_i+0x1ba>
 800500a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800500e:	f102 0004 	add.w	r0, r2, #4
 8005012:	6018      	str	r0, [r3, #0]
 8005014:	6813      	ldr	r3, [r2, #0]
 8005016:	d0f6      	beq.n	8005006 <_printf_i+0x1a6>
 8005018:	8019      	strh	r1, [r3, #0]
 800501a:	2300      	movs	r3, #0
 800501c:	6123      	str	r3, [r4, #16]
 800501e:	4675      	mov	r5, lr
 8005020:	e7b1      	b.n	8004f86 <_printf_i+0x126>
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	1d11      	adds	r1, r2, #4
 8005026:	6019      	str	r1, [r3, #0]
 8005028:	6815      	ldr	r5, [r2, #0]
 800502a:	6862      	ldr	r2, [r4, #4]
 800502c:	2100      	movs	r1, #0
 800502e:	4628      	mov	r0, r5
 8005030:	f7fb f8d6 	bl	80001e0 <memchr>
 8005034:	b108      	cbz	r0, 800503a <_printf_i+0x1da>
 8005036:	1b40      	subs	r0, r0, r5
 8005038:	6060      	str	r0, [r4, #4]
 800503a:	6863      	ldr	r3, [r4, #4]
 800503c:	6123      	str	r3, [r4, #16]
 800503e:	2300      	movs	r3, #0
 8005040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005044:	e79f      	b.n	8004f86 <_printf_i+0x126>
 8005046:	6923      	ldr	r3, [r4, #16]
 8005048:	462a      	mov	r2, r5
 800504a:	4639      	mov	r1, r7
 800504c:	4630      	mov	r0, r6
 800504e:	47c0      	blx	r8
 8005050:	3001      	adds	r0, #1
 8005052:	d0a2      	beq.n	8004f9a <_printf_i+0x13a>
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	079b      	lsls	r3, r3, #30
 8005058:	d507      	bpl.n	800506a <_printf_i+0x20a>
 800505a:	2500      	movs	r5, #0
 800505c:	f104 0919 	add.w	r9, r4, #25
 8005060:	68e3      	ldr	r3, [r4, #12]
 8005062:	9a03      	ldr	r2, [sp, #12]
 8005064:	1a9b      	subs	r3, r3, r2
 8005066:	429d      	cmp	r5, r3
 8005068:	db05      	blt.n	8005076 <_printf_i+0x216>
 800506a:	68e0      	ldr	r0, [r4, #12]
 800506c:	9b03      	ldr	r3, [sp, #12]
 800506e:	4298      	cmp	r0, r3
 8005070:	bfb8      	it	lt
 8005072:	4618      	movlt	r0, r3
 8005074:	e793      	b.n	8004f9e <_printf_i+0x13e>
 8005076:	2301      	movs	r3, #1
 8005078:	464a      	mov	r2, r9
 800507a:	4639      	mov	r1, r7
 800507c:	4630      	mov	r0, r6
 800507e:	47c0      	blx	r8
 8005080:	3001      	adds	r0, #1
 8005082:	d08a      	beq.n	8004f9a <_printf_i+0x13a>
 8005084:	3501      	adds	r5, #1
 8005086:	e7eb      	b.n	8005060 <_printf_i+0x200>
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1a7      	bne.n	8004fdc <_printf_i+0x17c>
 800508c:	780b      	ldrb	r3, [r1, #0]
 800508e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005092:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005096:	e765      	b.n	8004f64 <_printf_i+0x104>
 8005098:	08005912 	.word	0x08005912
 800509c:	08005901 	.word	0x08005901

080050a0 <_putc_r>:
 80050a0:	b570      	push	{r4, r5, r6, lr}
 80050a2:	460d      	mov	r5, r1
 80050a4:	4614      	mov	r4, r2
 80050a6:	4606      	mov	r6, r0
 80050a8:	b118      	cbz	r0, 80050b2 <_putc_r+0x12>
 80050aa:	6983      	ldr	r3, [r0, #24]
 80050ac:	b90b      	cbnz	r3, 80050b2 <_putc_r+0x12>
 80050ae:	f7ff fb87 	bl	80047c0 <__sinit>
 80050b2:	4b13      	ldr	r3, [pc, #76]	; (8005100 <_putc_r+0x60>)
 80050b4:	429c      	cmp	r4, r3
 80050b6:	d112      	bne.n	80050de <_putc_r+0x3e>
 80050b8:	6874      	ldr	r4, [r6, #4]
 80050ba:	68a3      	ldr	r3, [r4, #8]
 80050bc:	3b01      	subs	r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	60a3      	str	r3, [r4, #8]
 80050c2:	da16      	bge.n	80050f2 <_putc_r+0x52>
 80050c4:	69a2      	ldr	r2, [r4, #24]
 80050c6:	4293      	cmp	r3, r2
 80050c8:	db02      	blt.n	80050d0 <_putc_r+0x30>
 80050ca:	b2eb      	uxtb	r3, r5
 80050cc:	2b0a      	cmp	r3, #10
 80050ce:	d110      	bne.n	80050f2 <_putc_r+0x52>
 80050d0:	4622      	mov	r2, r4
 80050d2:	4629      	mov	r1, r5
 80050d4:	4630      	mov	r0, r6
 80050d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80050da:	f7ff b9bf 	b.w	800445c <__swbuf_r>
 80050de:	4b09      	ldr	r3, [pc, #36]	; (8005104 <_putc_r+0x64>)
 80050e0:	429c      	cmp	r4, r3
 80050e2:	d101      	bne.n	80050e8 <_putc_r+0x48>
 80050e4:	68b4      	ldr	r4, [r6, #8]
 80050e6:	e7e8      	b.n	80050ba <_putc_r+0x1a>
 80050e8:	4b07      	ldr	r3, [pc, #28]	; (8005108 <_putc_r+0x68>)
 80050ea:	429c      	cmp	r4, r3
 80050ec:	bf08      	it	eq
 80050ee:	68f4      	ldreq	r4, [r6, #12]
 80050f0:	e7e3      	b.n	80050ba <_putc_r+0x1a>
 80050f2:	6823      	ldr	r3, [r4, #0]
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	6022      	str	r2, [r4, #0]
 80050f8:	701d      	strb	r5, [r3, #0]
 80050fa:	b2e8      	uxtb	r0, r5
 80050fc:	bd70      	pop	{r4, r5, r6, pc}
 80050fe:	bf00      	nop
 8005100:	080058b0 	.word	0x080058b0
 8005104:	080058d0 	.word	0x080058d0
 8005108:	08005890 	.word	0x08005890

0800510c <_sbrk_r>:
 800510c:	b538      	push	{r3, r4, r5, lr}
 800510e:	4c06      	ldr	r4, [pc, #24]	; (8005128 <_sbrk_r+0x1c>)
 8005110:	2300      	movs	r3, #0
 8005112:	4605      	mov	r5, r0
 8005114:	4608      	mov	r0, r1
 8005116:	6023      	str	r3, [r4, #0]
 8005118:	f7ff f85c 	bl	80041d4 <_sbrk>
 800511c:	1c43      	adds	r3, r0, #1
 800511e:	d102      	bne.n	8005126 <_sbrk_r+0x1a>
 8005120:	6823      	ldr	r3, [r4, #0]
 8005122:	b103      	cbz	r3, 8005126 <_sbrk_r+0x1a>
 8005124:	602b      	str	r3, [r5, #0]
 8005126:	bd38      	pop	{r3, r4, r5, pc}
 8005128:	20005da0 	.word	0x20005da0

0800512c <__sread>:
 800512c:	b510      	push	{r4, lr}
 800512e:	460c      	mov	r4, r1
 8005130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005134:	f000 f896 	bl	8005264 <_read_r>
 8005138:	2800      	cmp	r0, #0
 800513a:	bfab      	itete	ge
 800513c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800513e:	89a3      	ldrhlt	r3, [r4, #12]
 8005140:	181b      	addge	r3, r3, r0
 8005142:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005146:	bfac      	ite	ge
 8005148:	6563      	strge	r3, [r4, #84]	; 0x54
 800514a:	81a3      	strhlt	r3, [r4, #12]
 800514c:	bd10      	pop	{r4, pc}

0800514e <__swrite>:
 800514e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005152:	461f      	mov	r7, r3
 8005154:	898b      	ldrh	r3, [r1, #12]
 8005156:	05db      	lsls	r3, r3, #23
 8005158:	4605      	mov	r5, r0
 800515a:	460c      	mov	r4, r1
 800515c:	4616      	mov	r6, r2
 800515e:	d505      	bpl.n	800516c <__swrite+0x1e>
 8005160:	2302      	movs	r3, #2
 8005162:	2200      	movs	r2, #0
 8005164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005168:	f000 f868 	bl	800523c <_lseek_r>
 800516c:	89a3      	ldrh	r3, [r4, #12]
 800516e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005176:	81a3      	strh	r3, [r4, #12]
 8005178:	4632      	mov	r2, r6
 800517a:	463b      	mov	r3, r7
 800517c:	4628      	mov	r0, r5
 800517e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005182:	f000 b817 	b.w	80051b4 <_write_r>

08005186 <__sseek>:
 8005186:	b510      	push	{r4, lr}
 8005188:	460c      	mov	r4, r1
 800518a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800518e:	f000 f855 	bl	800523c <_lseek_r>
 8005192:	1c43      	adds	r3, r0, #1
 8005194:	89a3      	ldrh	r3, [r4, #12]
 8005196:	bf15      	itete	ne
 8005198:	6560      	strne	r0, [r4, #84]	; 0x54
 800519a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800519e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051a2:	81a3      	strheq	r3, [r4, #12]
 80051a4:	bf18      	it	ne
 80051a6:	81a3      	strhne	r3, [r4, #12]
 80051a8:	bd10      	pop	{r4, pc}

080051aa <__sclose>:
 80051aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ae:	f000 b813 	b.w	80051d8 <_close_r>
	...

080051b4 <_write_r>:
 80051b4:	b538      	push	{r3, r4, r5, lr}
 80051b6:	4c07      	ldr	r4, [pc, #28]	; (80051d4 <_write_r+0x20>)
 80051b8:	4605      	mov	r5, r0
 80051ba:	4608      	mov	r0, r1
 80051bc:	4611      	mov	r1, r2
 80051be:	2200      	movs	r2, #0
 80051c0:	6022      	str	r2, [r4, #0]
 80051c2:	461a      	mov	r2, r3
 80051c4:	f7fe ffec 	bl	80041a0 <_write>
 80051c8:	1c43      	adds	r3, r0, #1
 80051ca:	d102      	bne.n	80051d2 <_write_r+0x1e>
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	b103      	cbz	r3, 80051d2 <_write_r+0x1e>
 80051d0:	602b      	str	r3, [r5, #0]
 80051d2:	bd38      	pop	{r3, r4, r5, pc}
 80051d4:	20005da0 	.word	0x20005da0

080051d8 <_close_r>:
 80051d8:	b538      	push	{r3, r4, r5, lr}
 80051da:	4c06      	ldr	r4, [pc, #24]	; (80051f4 <_close_r+0x1c>)
 80051dc:	2300      	movs	r3, #0
 80051de:	4605      	mov	r5, r0
 80051e0:	4608      	mov	r0, r1
 80051e2:	6023      	str	r3, [r4, #0]
 80051e4:	f7ff f810 	bl	8004208 <_close>
 80051e8:	1c43      	adds	r3, r0, #1
 80051ea:	d102      	bne.n	80051f2 <_close_r+0x1a>
 80051ec:	6823      	ldr	r3, [r4, #0]
 80051ee:	b103      	cbz	r3, 80051f2 <_close_r+0x1a>
 80051f0:	602b      	str	r3, [r5, #0]
 80051f2:	bd38      	pop	{r3, r4, r5, pc}
 80051f4:	20005da0 	.word	0x20005da0

080051f8 <_fstat_r>:
 80051f8:	b538      	push	{r3, r4, r5, lr}
 80051fa:	4c07      	ldr	r4, [pc, #28]	; (8005218 <_fstat_r+0x20>)
 80051fc:	2300      	movs	r3, #0
 80051fe:	4605      	mov	r5, r0
 8005200:	4608      	mov	r0, r1
 8005202:	4611      	mov	r1, r2
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	f7ff f802 	bl	800420e <_fstat>
 800520a:	1c43      	adds	r3, r0, #1
 800520c:	d102      	bne.n	8005214 <_fstat_r+0x1c>
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	b103      	cbz	r3, 8005214 <_fstat_r+0x1c>
 8005212:	602b      	str	r3, [r5, #0]
 8005214:	bd38      	pop	{r3, r4, r5, pc}
 8005216:	bf00      	nop
 8005218:	20005da0 	.word	0x20005da0

0800521c <_isatty_r>:
 800521c:	b538      	push	{r3, r4, r5, lr}
 800521e:	4c06      	ldr	r4, [pc, #24]	; (8005238 <_isatty_r+0x1c>)
 8005220:	2300      	movs	r3, #0
 8005222:	4605      	mov	r5, r0
 8005224:	4608      	mov	r0, r1
 8005226:	6023      	str	r3, [r4, #0]
 8005228:	f7fe fff6 	bl	8004218 <_isatty>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	d102      	bne.n	8005236 <_isatty_r+0x1a>
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	b103      	cbz	r3, 8005236 <_isatty_r+0x1a>
 8005234:	602b      	str	r3, [r5, #0]
 8005236:	bd38      	pop	{r3, r4, r5, pc}
 8005238:	20005da0 	.word	0x20005da0

0800523c <_lseek_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	4c07      	ldr	r4, [pc, #28]	; (800525c <_lseek_r+0x20>)
 8005240:	4605      	mov	r5, r0
 8005242:	4608      	mov	r0, r1
 8005244:	4611      	mov	r1, r2
 8005246:	2200      	movs	r2, #0
 8005248:	6022      	str	r2, [r4, #0]
 800524a:	461a      	mov	r2, r3
 800524c:	f7fe ffe6 	bl	800421c <_lseek>
 8005250:	1c43      	adds	r3, r0, #1
 8005252:	d102      	bne.n	800525a <_lseek_r+0x1e>
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	b103      	cbz	r3, 800525a <_lseek_r+0x1e>
 8005258:	602b      	str	r3, [r5, #0]
 800525a:	bd38      	pop	{r3, r4, r5, pc}
 800525c:	20005da0 	.word	0x20005da0

08005260 <__malloc_lock>:
 8005260:	4770      	bx	lr

08005262 <__malloc_unlock>:
 8005262:	4770      	bx	lr

08005264 <_read_r>:
 8005264:	b538      	push	{r3, r4, r5, lr}
 8005266:	4c07      	ldr	r4, [pc, #28]	; (8005284 <_read_r+0x20>)
 8005268:	4605      	mov	r5, r0
 800526a:	4608      	mov	r0, r1
 800526c:	4611      	mov	r1, r2
 800526e:	2200      	movs	r2, #0
 8005270:	6022      	str	r2, [r4, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	f7fe ff86 	bl	8004184 <_read>
 8005278:	1c43      	adds	r3, r0, #1
 800527a:	d102      	bne.n	8005282 <_read_r+0x1e>
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	b103      	cbz	r3, 8005282 <_read_r+0x1e>
 8005280:	602b      	str	r3, [r5, #0]
 8005282:	bd38      	pop	{r3, r4, r5, pc}
 8005284:	20005da0 	.word	0x20005da0

08005288 <_init>:
 8005288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528a:	bf00      	nop
 800528c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528e:	bc08      	pop	{r3}
 8005290:	469e      	mov	lr, r3
 8005292:	4770      	bx	lr

08005294 <_fini>:
 8005294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005296:	bf00      	nop
 8005298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529a:	bc08      	pop	{r3}
 800529c:	469e      	mov	lr, r3
 800529e:	4770      	bx	lr
